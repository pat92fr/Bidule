
ThemisCarbon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08005698  08005698  00015698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000390  20000000  08005960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000025cc  20000390  08005cf0  00020390  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000295c  08005cf0  0002295c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029927  00000000  00000000  000203be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000507a  00000000  00000000  00049ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000da6d  00000000  00000000  0004ed5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001130  00000000  00000000  0005c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001778  00000000  00000000  0005d900  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000adc6  00000000  00000000  0005f078  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006d48  00000000  00000000  00069e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00070b86  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034e4  00000000  00000000  00070c04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000390 	.word	0x20000390
 8000214:	00000000 	.word	0x00000000
 8000218:	0800567c 	.word	0x0800567c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000394 	.word	0x20000394
 8000234:	0800567c 	.word	0x0800567c

08000238 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <HAL_InitTick+0x24>)
{
 800023a:	b510      	push	{r4, lr}
 800023c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000244:	fbb0 f0f3 	udiv	r0, r0, r3
 8000248:	f000 f888 	bl	800035c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800024c:	2200      	movs	r2, #0
 800024e:	4621      	mov	r1, r4
 8000250:	f04f 30ff 	mov.w	r0, #4294967295
 8000254:	f000 f83e 	bl	80002d4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000258:	2000      	movs	r0, #0
 800025a:	bd10      	pop	{r4, pc}
 800025c:	20000324 	.word	0x20000324

08000260 <HAL_Init>:
{
 8000260:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000262:	2003      	movs	r0, #3
 8000264:	f000 f824 	bl	80002b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000268:	2000      	movs	r0, #0
 800026a:	f7ff ffe5 	bl	8000238 <HAL_InitTick>
  HAL_MspInit();
 800026e:	f004 f91e 	bl	80044ae <HAL_MspInit>
}
 8000272:	2000      	movs	r0, #0
 8000274:	bd08      	pop	{r3, pc}
	...

08000278 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20001d68 	.word	0x20001d68

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20001d68 	.word	0x20001d68

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b513      	push	{r0, r1, r4, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
 800029c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800029e:	f7ff fff3 	bl	8000288 <HAL_GetTick>
 80002a2:	9b01      	ldr	r3, [sp, #4]
 80002a4:	1b00      	subs	r0, r0, r4
 80002a6:	4298      	cmp	r0, r3
 80002a8:	d3f9      	bcc.n	800029e <HAL_Delay+0xa>
  {
  }
}
 80002aa:	b002      	add	sp, #8
 80002ac:	bd10      	pop	{r4, pc}
	...

080002b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002be:	041b      	lsls	r3, r3, #16
 80002c0:	0c1b      	lsrs	r3, r3, #16
 80002c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002cc:	60d3      	str	r3, [r2, #12]
 80002ce:	4770      	bx	lr
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002d6:	b530      	push	{r4, r5, lr}
 80002d8:	68dc      	ldr	r4, [r3, #12]
 80002da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e4:	2b04      	cmp	r3, #4
 80002e6:	bf28      	it	cs
 80002e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f0:	bf8c      	ite	hi
 80002f2:	3c03      	subhi	r4, #3
 80002f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80002fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8000300:	ea01 0103 	and.w	r1, r1, r3
 8000304:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000308:	fa05 f404 	lsl.w	r4, r5, r4
 800030c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000310:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	ea42 0201 	orr.w	r2, r2, r1
 8000318:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800031c:	da05      	bge.n	800032a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	f000 000f 	and.w	r0, r0, #15
 8000322:	b2d2      	uxtb	r2, r2
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_NVIC_SetPriority+0x6c>)
 8000326:	541a      	strb	r2, [r3, r0]
 8000328:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000334:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	e000ed14 	.word	0xe000ed14

08000344 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000344:	0942      	lsrs	r2, r0, #5
 8000346:	2301      	movs	r3, #1
 8000348:	f000 001f 	and.w	r0, r0, #31
 800034c:	fa03 f000 	lsl.w	r0, r3, r0
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <HAL_NVIC_EnableIRQ+0x14>)
 8000352:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100

0800035c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800035c:	3801      	subs	r0, #1
 800035e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000362:	d20a      	bcs.n	800037a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000366:	21f0      	movs	r1, #240	; 0xf0
 8000368:	4a06      	ldr	r2, [pc, #24]	; (8000384 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800036a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800036c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000372:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000374:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800037a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	e000e010 	.word	0xe000e010
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800038a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	bf0c      	ite	eq
 8000390:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000394:	f022 0204 	bicne.w	r2, r2, #4
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	4770      	bx	lr
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80003a0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80003a2:	f003 fb43 	bl	8003a2c <HAL_SYSTICK_Callback>
 80003a6:	bd08      	pop	{r3, pc}

080003a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80003a8:	6803      	ldr	r3, [r0, #0]
 80003aa:	2118      	movs	r1, #24
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80003b2:	3a10      	subs	r2, #16
 80003b4:	f023 0303 	bic.w	r3, r3, #3
 80003b8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80003bc:	4904      	ldr	r1, [pc, #16]	; (80003d0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80003be:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80003c0:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80003c2:	bf88      	it	hi
 80003c4:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80003c6:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80003c8:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80003ca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	080056ac 	.word	0x080056ac

080003d4 <HAL_DMA_Init>:
{
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003d8:	f7ff ff56 	bl	8000288 <HAL_GetTick>
 80003dc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80003de:	2c00      	cmp	r4, #0
 80003e0:	d071      	beq.n	80004c6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80003e2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80003e4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80003e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80003ea:	2302      	movs	r3, #2
 80003ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80003f0:	6813      	ldr	r3, [r2, #0]
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80003f8:	6821      	ldr	r1, [r4, #0]
 80003fa:	680b      	ldr	r3, [r1, #0]
 80003fc:	07d8      	lsls	r0, r3, #31
 80003fe:	d43c      	bmi.n	800047a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000400:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000402:	4d32      	ldr	r5, [pc, #200]	; (80004cc <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000404:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000406:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000408:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800040a:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800040c:	4313      	orrs	r3, r2
 800040e:	68e2      	ldr	r2, [r4, #12]
 8000410:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000412:	6922      	ldr	r2, [r4, #16]
 8000414:	4313      	orrs	r3, r2
 8000416:	6962      	ldr	r2, [r4, #20]
 8000418:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800041a:	69e2      	ldr	r2, [r4, #28]
 800041c:	4303      	orrs	r3, r0
 800041e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000420:	6a22      	ldr	r2, [r4, #32]
 8000422:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000424:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000426:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000428:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800042c:	bf01      	itttt	eq
 800042e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000430:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000432:	4335      	orreq	r5, r6
 8000434:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000436:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000438:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800043a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800043c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000440:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000444:	d10b      	bne.n	800045e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000446:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000448:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800044a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800044c:	b13d      	cbz	r5, 800045e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800044e:	b9f8      	cbnz	r0, 8000490 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000450:	2a01      	cmp	r2, #1
 8000452:	d02d      	beq.n	80004b0 <HAL_DMA_Init+0xdc>
 8000454:	d301      	bcc.n	800045a <HAL_DMA_Init+0x86>
 8000456:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000458:	d101      	bne.n	800045e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800045a:	01ea      	lsls	r2, r5, #7
 800045c:	d42b      	bmi.n	80004b6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800045e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000460:	4620      	mov	r0, r4
 8000462:	f7ff ffa1 	bl	80003a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000466:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000468:	233f      	movs	r3, #63	; 0x3f
 800046a:	4093      	lsls	r3, r2
 800046c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800046e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000470:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000472:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000474:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000478:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800047a:	f7ff ff05 	bl	8000288 <HAL_GetTick>
 800047e:	1b40      	subs	r0, r0, r5
 8000480:	2805      	cmp	r0, #5
 8000482:	d9b9      	bls.n	80003f8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000484:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000486:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000488:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800048a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800048e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000490:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000494:	d113      	bne.n	80004be <HAL_DMA_Init+0xea>
    switch (tmp)
 8000496:	2a03      	cmp	r2, #3
 8000498:	d8e1      	bhi.n	800045e <HAL_DMA_Init+0x8a>
 800049a:	a001      	add	r0, pc, #4	; (adr r0, 80004a0 <HAL_DMA_Init+0xcc>)
 800049c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80004a0:	080004b7 	.word	0x080004b7
 80004a4:	0800045b 	.word	0x0800045b
 80004a8:	080004b7 	.word	0x080004b7
 80004ac:	080004b1 	.word	0x080004b1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80004b0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80004b4:	d1d3      	bne.n	800045e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80004b6:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80004b8:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80004ba:	6563      	str	r3, [r4, #84]	; 0x54
 80004bc:	e7e5      	b.n	800048a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80004be:	2a02      	cmp	r2, #2
 80004c0:	d9f9      	bls.n	80004b6 <HAL_DMA_Init+0xe2>
 80004c2:	2a03      	cmp	r2, #3
 80004c4:	e7c8      	b.n	8000458 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	bf00      	nop
 80004cc:	e010803f 	.word	0xe010803f

080004d0 <HAL_DMA_Start_IT>:
{
 80004d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80004d2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80004d6:	2c01      	cmp	r4, #1
 80004d8:	d035      	beq.n	8000546 <HAL_DMA_Start_IT+0x76>
 80004da:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80004dc:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80004de:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 80004e0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80004e4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80004e8:	2c01      	cmp	r4, #1
 80004ea:	f04f 0402 	mov.w	r4, #2
 80004ee:	d128      	bne.n	8000542 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80004f0:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80004f4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004f6:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80004f8:	6825      	ldr	r5, [r4, #0]
 80004fa:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80004fe:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000500:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000502:	6883      	ldr	r3, [r0, #8]
 8000504:	2b40      	cmp	r3, #64	; 0x40
 8000506:	d119      	bne.n	800053c <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000508:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800050a:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800050c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800050e:	233f      	movs	r3, #63	; 0x3f
 8000510:	4093      	lsls	r3, r2
 8000512:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	f043 0316 	orr.w	r3, r3, #22
 800051a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800051c:	6963      	ldr	r3, [r4, #20]
 800051e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000522:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000524:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000526:	b11b      	cbz	r3, 8000530 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000530:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000532:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6023      	str	r3, [r4, #0]
 800053a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800053c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800053e:	60e2      	str	r2, [r4, #12]
 8000540:	e7e4      	b.n	800050c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000542:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000546:	2002      	movs	r0, #2
}
 8000548:	bd70      	pop	{r4, r5, r6, pc}

0800054a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800054a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800054e:	2b02      	cmp	r3, #2
 8000550:	d003      	beq.n	800055a <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000556:	2001      	movs	r0, #1
 8000558:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800055a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800055c:	2305      	movs	r3, #5
 800055e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000562:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000564:	6813      	ldr	r3, [r2, #0]
 8000566:	f023 0301 	bic.w	r3, r3, #1
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	4770      	bx	lr
	...

08000570 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000570:	2300      	movs	r3, #0
{
 8000572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000574:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000576:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000578:	4b59      	ldr	r3, [pc, #356]	; (80006e0 <HAL_DMA_IRQHandler+0x170>)
{
 800057a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800057c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800057e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000580:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000582:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000584:	409a      	lsls	r2, r3
 8000586:	4216      	tst	r6, r2
 8000588:	d00c      	beq.n	80005a4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800058a:	6801      	ldr	r1, [r0, #0]
 800058c:	6808      	ldr	r0, [r1, #0]
 800058e:	0740      	lsls	r0, r0, #29
 8000590:	d508      	bpl.n	80005a4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000592:	6808      	ldr	r0, [r1, #0]
 8000594:	f020 0004 	bic.w	r0, r0, #4
 8000598:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800059a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800059c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800059e:	f042 0201 	orr.w	r2, r2, #1
 80005a2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80005a4:	4a4f      	ldr	r2, [pc, #316]	; (80006e4 <HAL_DMA_IRQHandler+0x174>)
 80005a6:	409a      	lsls	r2, r3
 80005a8:	4216      	tst	r6, r2
 80005aa:	d008      	beq.n	80005be <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80005ac:	6821      	ldr	r1, [r4, #0]
 80005ae:	6949      	ldr	r1, [r1, #20]
 80005b0:	0609      	lsls	r1, r1, #24
 80005b2:	d504      	bpl.n	80005be <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80005b4:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80005b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80005b8:	f042 0202 	orr.w	r2, r2, #2
 80005bc:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80005be:	4a4a      	ldr	r2, [pc, #296]	; (80006e8 <HAL_DMA_IRQHandler+0x178>)
 80005c0:	409a      	lsls	r2, r3
 80005c2:	4216      	tst	r6, r2
 80005c4:	d008      	beq.n	80005d8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80005c6:	6821      	ldr	r1, [r4, #0]
 80005c8:	6809      	ldr	r1, [r1, #0]
 80005ca:	0788      	lsls	r0, r1, #30
 80005cc:	d504      	bpl.n	80005d8 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80005ce:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80005d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80005d2:	f042 0204 	orr.w	r2, r2, #4
 80005d6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80005d8:	2210      	movs	r2, #16
 80005da:	409a      	lsls	r2, r3
 80005dc:	4216      	tst	r6, r2
 80005de:	d010      	beq.n	8000602 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	6819      	ldr	r1, [r3, #0]
 80005e4:	0709      	lsls	r1, r1, #28
 80005e6:	d50c      	bpl.n	8000602 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80005e8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	0350      	lsls	r0, r2, #13
 80005ee:	d535      	bpl.n	800065c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	0319      	lsls	r1, r3, #12
 80005f4:	d401      	bmi.n	80005fa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80005f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005f8:	e000      	b.n	80005fc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80005fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80005fc:	b10b      	cbz	r3, 8000602 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80005fe:	4620      	mov	r0, r4
 8000600:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000602:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000604:	2220      	movs	r2, #32
 8000606:	408a      	lsls	r2, r1
 8000608:	4216      	tst	r6, r2
 800060a:	d038      	beq.n	800067e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800060c:	6823      	ldr	r3, [r4, #0]
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	06c6      	lsls	r6, r0, #27
 8000612:	d534      	bpl.n	800067e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000614:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000616:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800061a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800061c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800061e:	d125      	bne.n	800066c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000620:	f022 0216 	bic.w	r2, r2, #22
 8000624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800062c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800062e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000630:	b90a      	cbnz	r2, 8000636 <HAL_DMA_IRQHandler+0xc6>
 8000632:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000634:	b11a      	cbz	r2, 800063e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	f022 0208 	bic.w	r2, r2, #8
 800063c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800063e:	233f      	movs	r3, #63	; 0x3f
 8000640:	408b      	lsls	r3, r1
 8000642:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000644:	2300      	movs	r3, #0
 8000646:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800064a:	2301      	movs	r3, #1
 800064c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000650:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000652:	b10b      	cbz	r3, 8000658 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000654:	4620      	mov	r0, r4
 8000656:	4798      	blx	r3
}
 8000658:	b003      	add	sp, #12
 800065a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	05d2      	lsls	r2, r2, #23
 8000660:	d4c9      	bmi.n	80005f6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	f022 0208 	bic.w	r2, r2, #8
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e7c4      	b.n	80005f6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800066c:	0350      	lsls	r0, r2, #13
 800066e:	d528      	bpl.n	80006c2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	0319      	lsls	r1, r3, #12
 8000674:	d432      	bmi.n	80006dc <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000676:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000678:	b10b      	cbz	r3, 800067e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800067a:	4620      	mov	r0, r4
 800067c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800067e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0e9      	beq.n	8000658 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000684:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000686:	07da      	lsls	r2, r3, #31
 8000688:	d519      	bpl.n	80006be <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800068a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800068c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800068e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000692:	6813      	ldr	r3, [r2, #0]
 8000694:	f023 0301 	bic.w	r3, r3, #1
 8000698:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800069a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800069e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80006a2:	9b01      	ldr	r3, [sp, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	429f      	cmp	r7, r3
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	d302      	bcc.n	80006b2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80006ac:	6813      	ldr	r3, [r2, #0]
 80006ae:	07db      	lsls	r3, r3, #31
 80006b0:	d4f7      	bmi.n	80006a2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80006b2:	2300      	movs	r3, #0
 80006b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80006be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006c0:	e7c7      	b.n	8000652 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80006c8:	d108      	bne.n	80006dc <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	f021 0110 	bic.w	r1, r1, #16
 80006d0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80006d2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80006d4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80006d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80006dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006de:	e7cb      	b.n	8000678 <HAL_DMA_IRQHandler+0x108>
 80006e0:	20000324 	.word	0x20000324
 80006e4:	00800001 	.word	0x00800001
 80006e8:	00800004 	.word	0x00800004

080006ec <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80006ec:	4909      	ldr	r1, [pc, #36]	; (8000714 <FLASH_Program_DoubleWord+0x28>)
{
 80006ee:	b510      	push	{r4, lr}
  FLASH->CR &= CR_PSIZE_MASK;
 80006f0:	690c      	ldr	r4, [r1, #16]
 80006f2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80006f6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80006f8:	690c      	ldr	r4, [r1, #16]
 80006fa:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80006fe:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000700:	690c      	ldr	r4, [r1, #16]
 8000702:	f044 0401 	orr.w	r4, r4, #1
 8000706:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000708:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800070a:	6043      	str	r3, [r0, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
 8000710:	bd10      	pop	{r4, pc}
 8000712:	bf00      	nop
 8000714:	40023c00 	.word	0x40023c00

08000718 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <FLASH_Program_Word+0x24>)
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000720:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000728:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800072a:	691a      	ldr	r2, [r3, #16]
 800072c:	f042 0201 	orr.w	r2, r2, #1
 8000730:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000732:	6001      	str	r1, [r0, #0]
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023c00 	.word	0x40023c00

08000740 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <FLASH_Program_HalfWord+0x24>)
 8000742:	691a      	ldr	r2, [r3, #16]
 8000744:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000748:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000750:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	f042 0201 	orr.w	r2, r2, #1
 8000758:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800075a:	8001      	strh	r1, [r0, #0]
 800075c:	f3bf 8f4f 	dsb	sy
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023c00 	.word	0x40023c00

08000768 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <FLASH_Program_Byte+0x20>)
 800076a:	691a      	ldr	r2, [r3, #16]
 800076c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000770:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000772:	691a      	ldr	r2, [r3, #16]
 8000774:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000776:	691a      	ldr	r2, [r3, #16]
 8000778:	f042 0201 	orr.w	r2, r2, #1
 800077c:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800077e:	7001      	strb	r1, [r0, #0]
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023c00 	.word	0x40023c00

0800078c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <FLASH_SetErrorCode+0x5c>)
 800078e:	68da      	ldr	r2, [r3, #12]
 8000790:	0792      	lsls	r2, r2, #30
 8000792:	d504      	bpl.n	800079e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000794:	4915      	ldr	r1, [pc, #84]	; (80007ec <FLASH_SetErrorCode+0x60>)
 8000796:	698a      	ldr	r2, [r1, #24]
 8000798:	f042 0220 	orr.w	r2, r2, #32
 800079c:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	06db      	lsls	r3, r3, #27
 80007a2:	d504      	bpl.n	80007ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80007a4:	4a11      	ldr	r2, [pc, #68]	; (80007ec <FLASH_SetErrorCode+0x60>)
 80007a6:	6993      	ldr	r3, [r2, #24]
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <FLASH_SetErrorCode+0x5c>)
 80007b0:	68da      	ldr	r2, [r3, #12]
 80007b2:	0690      	lsls	r0, r2, #26
 80007b4:	d504      	bpl.n	80007c0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <FLASH_SetErrorCode+0x60>)
 80007b8:	698a      	ldr	r2, [r1, #24]
 80007ba:	f042 0208 	orr.w	r2, r2, #8
 80007be:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	0659      	lsls	r1, r3, #25
 80007c4:	d504      	bpl.n	80007d0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80007c6:	4a09      	ldr	r2, [pc, #36]	; (80007ec <FLASH_SetErrorCode+0x60>)
 80007c8:	6993      	ldr	r3, [r2, #24]
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <FLASH_SetErrorCode+0x5c>)
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	0612      	lsls	r2, r2, #24
 80007d6:	d504      	bpl.n	80007e2 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80007d8:	4904      	ldr	r1, [pc, #16]	; (80007ec <FLASH_SetErrorCode+0x60>)
 80007da:	698a      	ldr	r2, [r1, #24]
 80007dc:	f042 0202 	orr.w	r2, r2, #2
 80007e0:	618a      	str	r2, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80007e2:	22f2      	movs	r2, #242	; 0xf2
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	4770      	bx	lr
 80007e8:	40023c00 	.word	0x40023c00
 80007ec:	20001d6c 	.word	0x20001d6c

080007f0 <HAL_FLASH_Unlock>:
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_FLASH_Unlock+0x1c>)
 80007f2:	691a      	ldr	r2, [r3, #16]
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	da06      	bge.n	8000806 <HAL_FLASH_Unlock+0x16>
    FLASH->KEYR = FLASH_KEY1;
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <HAL_FLASH_Unlock+0x20>)
  return HAL_OK; 
 80007fa:	2000      	movs	r0, #0
    FLASH->KEYR = FLASH_KEY1;
 80007fc:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80007fe:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000802:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8000804:	4770      	bx	lr
    return HAL_ERROR;
 8000806:	2001      	movs	r0, #1
}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023c00 	.word	0x40023c00
 8000810:	45670123 	.word	0x45670123

08000814 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <HAL_FLASH_Lock+0x10>)
}
 8000816:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 8000818:	6913      	ldr	r3, [r2, #16]
 800081a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800081e:	6113      	str	r3, [r2, #16]
}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023c00 	.word	0x40023c00

08000828 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000828:	2200      	movs	r2, #0
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <FLASH_WaitForLastOperation+0x50>)
{ 
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000830:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000832:	4c12      	ldr	r4, [pc, #72]	; (800087c <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 8000834:	f7ff fd28 	bl	8000288 <HAL_GetTick>
 8000838:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800083a:	68e3      	ldr	r3, [r4, #12]
 800083c:	03db      	lsls	r3, r3, #15
 800083e:	d407      	bmi.n	8000850 <FLASH_WaitForLastOperation+0x28>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000840:	68e2      	ldr	r2, [r4, #12]
 8000842:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 8000846:	d00e      	beq.n	8000866 <FLASH_WaitForLastOperation+0x3e>
    FLASH_SetErrorCode();
 8000848:	f7ff ffa0 	bl	800078c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800084c:	2001      	movs	r0, #1
 800084e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000850:	1c6a      	adds	r2, r5, #1
 8000852:	d0f2      	beq.n	800083a <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000854:	b90d      	cbnz	r5, 800085a <FLASH_WaitForLastOperation+0x32>
        return HAL_TIMEOUT;
 8000856:	2003      	movs	r0, #3
 8000858:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800085a:	f7ff fd15 	bl	8000288 <HAL_GetTick>
 800085e:	1b80      	subs	r0, r0, r6
 8000860:	4285      	cmp	r5, r0
 8000862:	d2ea      	bcs.n	800083a <FLASH_WaitForLastOperation+0x12>
 8000864:	e7f7      	b.n	8000856 <FLASH_WaitForLastOperation+0x2e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000866:	68e0      	ldr	r0, [r4, #12]
 8000868:	f010 0001 	ands.w	r0, r0, #1
 800086c:	d002      	beq.n	8000874 <FLASH_WaitForLastOperation+0x4c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800086e:	2301      	movs	r3, #1
  return HAL_OK;
 8000870:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000872:	60e3      	str	r3, [r4, #12]
}  
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	bf00      	nop
 8000878:	20001d6c 	.word	0x20001d6c
 800087c:	40023c00 	.word	0x40023c00

08000880 <HAL_FLASH_Program>:
{
 8000880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000884:	4c1c      	ldr	r4, [pc, #112]	; (80008f8 <HAL_FLASH_Program+0x78>)
{
 8000886:	4698      	mov	r8, r3
 8000888:	4607      	mov	r7, r0
 800088a:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 800088c:	7d23      	ldrb	r3, [r4, #20]
{
 800088e:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8000890:	2b01      	cmp	r3, #1
 8000892:	d02d      	beq.n	80008f0 <HAL_FLASH_Program+0x70>
 8000894:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000896:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800089a:	7523      	strb	r3, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800089c:	f7ff ffc4 	bl	8000828 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80008a0:	b990      	cbnz	r0, 80008c8 <HAL_FLASH_Program+0x48>
    switch(TypeProgram)
 80008a2:	2f03      	cmp	r7, #3
 80008a4:	d807      	bhi.n	80008b6 <HAL_FLASH_Program+0x36>
 80008a6:	e8df f007 	tbb	[pc, r7]
 80008aa:	1302      	.short	0x1302
 80008ac:	1d18      	.short	0x1d18
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80008ae:	b2f1      	uxtb	r1, r6
 80008b0:	4628      	mov	r0, r5
 80008b2:	f7ff ff59 	bl	8000768 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80008b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008ba:	f7ff ffb5 	bl	8000828 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_FLASH_Program+0x7c>)
 80008c0:	6913      	ldr	r3, [r2, #16]
 80008c2:	f023 0301 	bic.w	r3, r3, #1
 80008c6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80008c8:	2300      	movs	r3, #0
 80008ca:	7523      	strb	r3, [r4, #20]
  return status;
 80008cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80008d0:	b2b1      	uxth	r1, r6
 80008d2:	4628      	mov	r0, r5
 80008d4:	f7ff ff34 	bl	8000740 <FLASH_Program_HalfWord>
        break;
 80008d8:	e7ed      	b.n	80008b6 <HAL_FLASH_Program+0x36>
        FLASH_Program_Word(Address, (uint32_t) Data);
 80008da:	4631      	mov	r1, r6
 80008dc:	4628      	mov	r0, r5
 80008de:	f7ff ff1b 	bl	8000718 <FLASH_Program_Word>
        break;
 80008e2:	e7e8      	b.n	80008b6 <HAL_FLASH_Program+0x36>
        FLASH_Program_DoubleWord(Address, Data);
 80008e4:	4632      	mov	r2, r6
 80008e6:	4643      	mov	r3, r8
 80008e8:	4628      	mov	r0, r5
 80008ea:	f7ff feff 	bl	80006ec <FLASH_Program_DoubleWord>
        break;
 80008ee:	e7e2      	b.n	80008b6 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80008f0:	2002      	movs	r0, #2
}
 80008f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f6:	bf00      	nop
 80008f8:	20001d6c 	.word	0x20001d6c
 80008fc:	40023c00 	.word	0x40023c00

08000900 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <FLASH_MassErase+0x38>)
  if(Banks == FLASH_BANK_BOTH)
 8000902:	2903      	cmp	r1, #3
  FLASH->CR &= CR_PSIZE_MASK;
 8000904:	691a      	ldr	r2, [r3, #16]
 8000906:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800090a:	611a      	str	r2, [r3, #16]
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800090c:	691a      	ldr	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800090e:	d104      	bne.n	800091a <FLASH_MassErase+0x1a>
    FLASH->CR |= FLASH_MER_BIT;
 8000910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8000914:	f042 0204 	orr.w	r2, r2, #4
 8000918:	e003      	b.n	8000922 <FLASH_MassErase+0x22>
  else if(Banks == FLASH_BANK_2)
 800091a:	2902      	cmp	r1, #2
 800091c:	d1fa      	bne.n	8000914 <FLASH_MassErase+0x14>
    FLASH->CR |= FLASH_CR_MER2;
 800091e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER1;    
 8000922:	611a      	str	r2, [r3, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000924:	691a      	ldr	r2, [r3, #16]
 8000926:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800092a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800092e:	6118      	str	r0, [r3, #16]
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800093c:	b139      	cbz	r1, 800094e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800093e:	2901      	cmp	r1, #1
 8000940:	d021      	beq.n	8000986 <FLASH_Erase_Sector+0x4a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000942:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000944:	bf0c      	ite	eq
 8000946:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800094a:	f44f 7140 	movne.w	r1, #768	; 0x300
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
 8000950:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 8000952:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 8000954:	bf88      	it	hi
 8000956:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 8000958:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800095c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800095e:	691a      	ldr	r2, [r3, #16]
 8000960:	4311      	orrs	r1, r2
 8000962:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800096a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800096c:	691a      	ldr	r2, [r3, #16]
 800096e:	f042 0202 	orr.w	r2, r2, #2
 8000972:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000976:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	e7e0      	b.n	800094e <FLASH_Erase_Sector+0x12>
 800098c:	40023c00 	.word	0x40023c00

08000990 <HAL_FLASHEx_Erase>:
{
 8000990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000994:	4e24      	ldr	r6, [pc, #144]	; (8000a28 <HAL_FLASHEx_Erase+0x98>)
{
 8000996:	4604      	mov	r4, r0
 8000998:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800099a:	7d33      	ldrb	r3, [r6, #20]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d040      	beq.n	8000a22 <HAL_FLASHEx_Erase+0x92>
 80009a0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009a2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80009a6:	7533      	strb	r3, [r6, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009a8:	f7ff ff3e 	bl	8000828 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80009ac:	4605      	mov	r5, r0
 80009ae:	b9b0      	cbnz	r0, 80009de <HAL_FLASHEx_Erase+0x4e>
    *SectorError = 0xFFFFFFFFU;
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d114      	bne.n	80009e8 <HAL_FLASHEx_Erase+0x58>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80009be:	6861      	ldr	r1, [r4, #4]
 80009c0:	7c20      	ldrb	r0, [r4, #16]
 80009c2:	f7ff ff9d 	bl	8000900 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009ca:	f7ff ff2d 	bl	8000828 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_FLASHEx_Erase+0x9c>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009d0:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80009d2:	6913      	ldr	r3, [r2, #16]
 80009d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d8:	f023 0304 	bic.w	r3, r3, #4
 80009dc:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80009de:	2300      	movs	r3, #0
 80009e0:	7533      	strb	r3, [r6, #20]
}
 80009e2:	4628      	mov	r0, r5
 80009e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80009e8:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80009ea:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8000a2c <HAL_FLASHEx_Erase+0x9c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80009ee:	68e3      	ldr	r3, [r4, #12]
 80009f0:	68a2      	ldr	r2, [r4, #8]
 80009f2:	4413      	add	r3, r2
 80009f4:	429f      	cmp	r7, r3
 80009f6:	d2f2      	bcs.n	80009de <HAL_FLASHEx_Erase+0x4e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80009f8:	7c21      	ldrb	r1, [r4, #16]
 80009fa:	4638      	mov	r0, r7
 80009fc:	f7ff ff9e 	bl	800093c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a04:	f7ff ff10 	bl	8000828 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000a08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000a0c:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000a10:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8000a14:	b118      	cbz	r0, 8000a1e <HAL_FLASHEx_Erase+0x8e>
          *SectorError = index;
 8000a16:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a1a:	4605      	mov	r5, r0
          break;
 8000a1c:	e7df      	b.n	80009de <HAL_FLASHEx_Erase+0x4e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000a1e:	3701      	adds	r7, #1
 8000a20:	e7e5      	b.n	80009ee <HAL_FLASHEx_Erase+0x5e>
  __HAL_LOCK(&pFlash);
 8000a22:	2502      	movs	r5, #2
 8000a24:	e7dd      	b.n	80009e2 <HAL_FLASHEx_Erase+0x52>
 8000a26:	bf00      	nop
 8000a28:	20001d6c 	.word	0x20001d6c
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a34:	680b      	ldr	r3, [r1, #0]
{
 8000a36:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000bfc <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a3e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a40:	4a6c      	ldr	r2, [pc, #432]	; (8000bf4 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a42:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000c00 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000a46:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000a4c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a50:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a54:	45b6      	cmp	lr, r6
 8000a56:	f040 80b3 	bne.w	8000bc0 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5a:	684c      	ldr	r4, [r1, #4]
 8000a5c:	f024 0710 	bic.w	r7, r4, #16
 8000a60:	2f02      	cmp	r7, #2
 8000a62:	d116      	bne.n	8000a92 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000a64:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a68:	f003 0b07 	and.w	fp, r3, #7
 8000a6c:	f04f 0c0f 	mov.w	ip, #15
 8000a70:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000a74:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000a78:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a7c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a80:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a84:	690d      	ldr	r5, [r1, #16]
 8000a86:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a8a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000a8e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000a92:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a96:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a98:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a9c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aa0:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000aa6:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aaa:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aac:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aae:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ab2:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000ab6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aba:	d811      	bhi.n	8000ae0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000abc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000abe:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ac2:	68cf      	ldr	r7, [r1, #12]
 8000ac4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ac8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000acc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ace:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ad4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ad8:	409f      	lsls	r7, r3
 8000ada:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ade:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ae0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ae2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ae4:	688f      	ldr	r7, [r1, #8]
 8000ae6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000aea:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000aec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aee:	00e5      	lsls	r5, r4, #3
 8000af0:	d566      	bpl.n	8000bc0 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000af6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000afa:	f003 0e03 	and.w	lr, r3, #3
 8000afe:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000b06:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b0a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000b12:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000b16:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000b1a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000b1e:	9503      	str	r5, [sp, #12]
 8000b20:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b22:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000b26:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b2a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b2e:	4d32      	ldr	r5, [pc, #200]	; (8000bf8 <HAL_GPIO_Init+0x1c8>)
 8000b30:	42a8      	cmp	r0, r5
 8000b32:	d04c      	beq.n	8000bce <HAL_GPIO_Init+0x19e>
 8000b34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b38:	42a8      	cmp	r0, r5
 8000b3a:	d04a      	beq.n	8000bd2 <HAL_GPIO_Init+0x1a2>
 8000b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b40:	42a8      	cmp	r0, r5
 8000b42:	d048      	beq.n	8000bd6 <HAL_GPIO_Init+0x1a6>
 8000b44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b48:	42a8      	cmp	r0, r5
 8000b4a:	d046      	beq.n	8000bda <HAL_GPIO_Init+0x1aa>
 8000b4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b50:	42a8      	cmp	r0, r5
 8000b52:	d044      	beq.n	8000bde <HAL_GPIO_Init+0x1ae>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d044      	beq.n	8000be2 <HAL_GPIO_Init+0x1b2>
 8000b58:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b5c:	42a8      	cmp	r0, r5
 8000b5e:	d042      	beq.n	8000be6 <HAL_GPIO_Init+0x1b6>
 8000b60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b64:	42a8      	cmp	r0, r5
 8000b66:	d040      	beq.n	8000bea <HAL_GPIO_Init+0x1ba>
 8000b68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b6c:	42a8      	cmp	r0, r5
 8000b6e:	d03e      	beq.n	8000bee <HAL_GPIO_Init+0x1be>
 8000b70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b74:	42a8      	cmp	r0, r5
 8000b76:	bf14      	ite	ne
 8000b78:	250a      	movne	r5, #10
 8000b7a:	2509      	moveq	r5, #9
 8000b7c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b84:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b88:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b8a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000b8e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b90:	bf0c      	ite	eq
 8000b92:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b94:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b96:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000b9a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000b9c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b9e:	bf0c      	ite	eq
 8000ba0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ba2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000ba8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000baa:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bac:	bf0c      	ite	eq
 8000bae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bb0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000bb4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000bb6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bb8:	bf54      	ite	pl
 8000bba:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000bbc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000bbe:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	f47f af3f 	bne.w	8000a46 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bc8:	b005      	add	sp, #20
 8000bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bce:	2500      	movs	r5, #0
 8000bd0:	e7d4      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000bd2:	2501      	movs	r5, #1
 8000bd4:	e7d2      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000bd6:	2502      	movs	r5, #2
 8000bd8:	e7d0      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000bda:	2503      	movs	r5, #3
 8000bdc:	e7ce      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000bde:	2504      	movs	r5, #4
 8000be0:	e7cc      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000be2:	2505      	movs	r5, #5
 8000be4:	e7ca      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000be6:	2506      	movs	r5, #6
 8000be8:	e7c8      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000bea:	2507      	movs	r5, #7
 8000bec:	e7c6      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000bee:	2508      	movs	r5, #8
 8000bf0:	e7c4      	b.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000bf2:	bf00      	nop
 8000bf4:	40013c00 	.word	0x40013c00
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40021400 	.word	0x40021400

08000c04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c04:	b10a      	cbz	r2, 8000c0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c06:	6181      	str	r1, [r0, #24]
 8000c08:	4770      	bx	lr
 8000c0a:	0409      	lsls	r1, r1, #16
 8000c0c:	e7fb      	b.n	8000c06 <HAL_GPIO_WritePin+0x2>

08000c0e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000c0e:	6803      	ldr	r3, [r0, #0]
 8000c10:	699a      	ldr	r2, [r3, #24]
 8000c12:	0791      	lsls	r1, r2, #30
 8000c14:	d501      	bpl.n	8000c1a <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00U;
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	07d2      	lsls	r2, r2, #31
 8000c1e:	d403      	bmi.n	8000c28 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000c20:	699a      	ldr	r2, [r3, #24]
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	619a      	str	r2, [r3, #24]
 8000c28:	4770      	bx	lr

08000c2a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000c2a:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000c2c:	6805      	ldr	r5, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000c2e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000c32:	9c03      	ldr	r4, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 8000c34:	6868      	ldr	r0, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000c36:	4323      	orrs	r3, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000c38:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000c3c:	4319      	orrs	r1, r3
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000c3e:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000c42:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000c46:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8000c4a:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000c4e:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000c50:	6069      	str	r1, [r5, #4]
 8000c52:	bd30      	pop	{r4, r5, pc}

08000c54 <I2C_WaitOnFlagUntilTimeout>:
{
 8000c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c58:	9f06      	ldr	r7, [sp, #24]
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	4688      	mov	r8, r1
 8000c5e:	4616      	mov	r6, r2
 8000c60:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c62:	6822      	ldr	r2, [r4, #0]
 8000c64:	6993      	ldr	r3, [r2, #24]
 8000c66:	ea38 0303 	bics.w	r3, r8, r3
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	d002      	beq.n	8000c7a <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000c74:	2000      	movs	r0, #0
}
 8000c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000c7a:	1c6b      	adds	r3, r5, #1
 8000c7c:	d0f2      	beq.n	8000c64 <I2C_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c7e:	b955      	cbnz	r5, 8000c96 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State= HAL_I2C_STATE_READY;
 8000c80:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8000c82:	2003      	movs	r0, #3
        hi2c->State= HAL_I2C_STATE_READY;
 8000c84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000c8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c96:	f7ff faf7 	bl	8000288 <HAL_GetTick>
 8000c9a:	1bc0      	subs	r0, r0, r7
 8000c9c:	4285      	cmp	r5, r0
 8000c9e:	d2e0      	bcs.n	8000c62 <I2C_WaitOnFlagUntilTimeout+0xe>
 8000ca0:	e7ee      	b.n	8000c80 <I2C_WaitOnFlagUntilTimeout+0x2c>

08000ca2 <I2C_IsAcknowledgeFailed>:
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ca2:	6803      	ldr	r3, [r0, #0]
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ca8:	6998      	ldr	r0, [r3, #24]
{
 8000caa:	460d      	mov	r5, r1
 8000cac:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cae:	f010 0010 	ands.w	r0, r0, #16
 8000cb2:	d112      	bne.n	8000cda <I2C_IsAcknowledgeFailed+0x38>
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8000cb6:	1c69      	adds	r1, r5, #1
 8000cb8:	d010      	beq.n	8000cdc <I2C_IsAcknowledgeFailed+0x3a>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000cba:	b94d      	cbnz	r5, 8000cd0 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State= HAL_I2C_STATE_READY;
 8000cbc:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8000cbe:	2003      	movs	r0, #3
          hi2c->State= HAL_I2C_STATE_READY;
 8000cc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000cca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000cd0:	f7ff fada 	bl	8000288 <HAL_GetTick>
 8000cd4:	1b80      	subs	r0, r0, r6
 8000cd6:	4285      	cmp	r5, r0
 8000cd8:	d3f0      	bcc.n	8000cbc <I2C_IsAcknowledgeFailed+0x1a>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	6999      	ldr	r1, [r3, #24]
 8000cde:	068a      	lsls	r2, r1, #26
 8000ce0:	d5e9      	bpl.n	8000cb6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ce2:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ce4:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000ce6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ce8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cea:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000cec:	f7ff ff8f 	bl	8000c0e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000cf0:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8000cf4:	6853      	ldr	r3, [r2, #4]
 8000cf6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000cfa:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000cfe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d0c:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 8000d0e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8000d1a:	bd70      	pop	{r4, r5, r6, pc}

08000d1c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	079b      	lsls	r3, r3, #30
 8000d2a:	d501      	bpl.n	8000d30 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d30:	4632      	mov	r2, r6
 8000d32:	4629      	mov	r1, r5
 8000d34:	4620      	mov	r0, r4
 8000d36:	f7ff ffb4 	bl	8000ca2 <I2C_IsAcknowledgeFailed>
 8000d3a:	b9b0      	cbnz	r0, 8000d6a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 8000d3c:	1c6a      	adds	r2, r5, #1
 8000d3e:	d0f1      	beq.n	8000d24 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000d40:	b96d      	cbnz	r5, 8000d5e <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d42:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000d44:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000d58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000d5e:	f7ff fa93 	bl	8000288 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	4285      	cmp	r5, r0
 8000d66:	d2dd      	bcs.n	8000d24 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000d68:	e7eb      	b.n	8000d42 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
}
 8000d6c:	bd70      	pop	{r4, r5, r6, pc}

08000d6e <I2C_RequestMemoryWrite>:
{
 8000d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d70:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8000d76:	4604      	mov	r4, r0
 8000d78:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000d7a:	9300      	str	r3, [sp, #0]
{
 8000d7c:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d82:	b2fa      	uxtb	r2, r7
 8000d84:	f7ff ff51 	bl	8000c2a <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d88:	4632      	mov	r2, r6
 8000d8a:	9908      	ldr	r1, [sp, #32]
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff ffc5 	bl	8000d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8000d92:	b128      	cbz	r0, 8000da0 <I2C_RequestMemoryWrite+0x32>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d110      	bne.n	8000dbc <I2C_RequestMemoryWrite+0x4e>
      return HAL_ERROR;
 8000d9a:	2001      	movs	r0, #1
}
 8000d9c:	b003      	add	sp, #12
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000da0:	2f01      	cmp	r7, #1
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	d10c      	bne.n	8000dc0 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000da6:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000da8:	2200      	movs	r2, #0
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000dae:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000db0:	9b08      	ldr	r3, [sp, #32]
 8000db2:	9600      	str	r6, [sp, #0]
 8000db4:	f7ff ff4e 	bl	8000c54 <I2C_WaitOnFlagUntilTimeout>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d0ef      	beq.n	8000d9c <I2C_RequestMemoryWrite+0x2e>
      return HAL_TIMEOUT;
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	e7ed      	b.n	8000d9c <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000dc0:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dc2:	9908      	ldr	r1, [sp, #32]
 8000dc4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dc8:	4632      	mov	r2, r6
 8000dca:	f7ff ffa7 	bl	8000d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d1e0      	bne.n	8000d94 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	e7e7      	b.n	8000da6 <I2C_RequestMemoryWrite+0x38>

08000dd6 <I2C_RequestMemoryRead>:
{
 8000dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000dd8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8000dde:	4604      	mov	r4, r0
 8000de0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000de2:	9300      	str	r3, [sp, #0]
{
 8000de4:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000de6:	2300      	movs	r3, #0
 8000de8:	b2fa      	uxtb	r2, r7
 8000dea:	f7ff ff1e 	bl	8000c2a <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dee:	4632      	mov	r2, r6
 8000df0:	9908      	ldr	r1, [sp, #32]
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ff92 	bl	8000d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8000df8:	b128      	cbz	r0, 8000e06 <I2C_RequestMemoryRead+0x30>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000dfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d110      	bne.n	8000e22 <I2C_RequestMemoryRead+0x4c>
      return HAL_ERROR;
 8000e00:	2001      	movs	r0, #1
}
 8000e02:	b003      	add	sp, #12
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e06:	2f01      	cmp	r7, #1
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	d10c      	bne.n	8000e26 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e0c:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e14:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000e16:	9b08      	ldr	r3, [sp, #32]
 8000e18:	9600      	str	r6, [sp, #0]
 8000e1a:	f7ff ff1b 	bl	8000c54 <I2C_WaitOnFlagUntilTimeout>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d0ef      	beq.n	8000e02 <I2C_RequestMemoryRead+0x2c>
      return HAL_TIMEOUT;
 8000e22:	2003      	movs	r0, #3
 8000e24:	e7ed      	b.n	8000e02 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000e26:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e28:	9908      	ldr	r1, [sp, #32]
 8000e2a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e2e:	4632      	mov	r2, r6
 8000e30:	f7ff ff74 	bl	8000d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d1e0      	bne.n	8000dfa <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	e7e7      	b.n	8000e0c <I2C_RequestMemoryRead+0x36>

08000e3c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4604      	mov	r4, r0
 8000e40:	460d      	mov	r5, r1
 8000e42:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	069b      	lsls	r3, r3, #26
 8000e4a:	d501      	bpl.n	8000e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e50:	4632      	mov	r2, r6
 8000e52:	4629      	mov	r1, r5
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff ff24 	bl	8000ca2 <I2C_IsAcknowledgeFailed>
 8000e5a:	b9a0      	cbnz	r0, 8000e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000e5c:	b96d      	cbnz	r5, 8000e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000e60:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000e68:	2320      	movs	r3, #32
 8000e6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000e78:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000e7a:	f7ff fa05 	bl	8000288 <HAL_GetTick>
 8000e7e:	1b80      	subs	r0, r0, r6
 8000e80:	4285      	cmp	r5, r0
 8000e82:	d2df      	bcs.n	8000e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8000e84:	e7eb      	b.n	8000e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
}
 8000e88:	bd70      	pop	{r4, r5, r6, pc}

08000e8a <HAL_I2C_Init>:
{
 8000e8a:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d04a      	beq.n	8000f28 <HAL_I2C_Init+0x9e>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000e92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e9a:	b91b      	cbnz	r3, 8000ea4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000e9c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000ea0:	f003 fb36 	bl	8004510 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ea4:	2324      	movs	r3, #36	; 0x24
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ea6:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ea8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eac:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000eb8:	6862      	ldr	r2, [r4, #4]
 8000eba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ebe:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eca:	d124      	bne.n	8000f16 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ed0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ed2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed4:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ed6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ed8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ee0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ee8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000eea:	6922      	ldr	r2, [r4, #16]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	69a1      	ldr	r1, [r4, #24]
 8000ef0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ef4:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ef8:	69e2      	ldr	r2, [r4, #28]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000f06:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f08:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f0e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f10:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000f14:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f1a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f1c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f1e:	d1d8      	bne.n	8000ed2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	e7d4      	b.n	8000ed2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
}
 8000f2a:	bd10      	pop	{r4, pc}

08000f2c <HAL_I2C_Mem_Write>:
{
 8000f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f30:	469b      	mov	fp, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000f36:	b085      	sub	sp, #20
 8000f38:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f3a:	2b20      	cmp	r3, #32
{
 8000f3c:	460f      	mov	r7, r1
 8000f3e:	9203      	str	r2, [sp, #12]
 8000f40:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000f44:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f48:	f040 80a6 	bne.w	8001098 <HAL_I2C_Mem_Write+0x16c>
    if((pData == NULL) || (Size == 0U))
 8000f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f4e:	b91b      	cbnz	r3, 8000f58 <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8000f50:	2001      	movs	r0, #1
}
 8000f52:	b005      	add	sp, #20
 8000f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((pData == NULL) || (Size == 0U))
 8000f58:	f1ba 0f00 	cmp.w	sl, #0
 8000f5c:	d0f8      	beq.n	8000f50 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8000f5e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	f000 8098 	beq.w	8001098 <HAL_I2C_Mem_Write+0x16c>
 8000f68:	2501      	movs	r5, #1
 8000f6a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000f6e:	f7ff f98b 	bl	8000288 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f72:	2319      	movs	r3, #25
 8000f74:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000f76:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f78:	462a      	mov	r2, r5
 8000f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f7ff fe68 	bl	8000c54 <I2C_WaitOnFlagUntilTimeout>
 8000f84:	4680      	mov	r8, r0
 8000f86:	b9d0      	cbnz	r0, 8000fbe <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f88:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8000f8a:	6360      	str	r0, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f8c:	9601      	str	r6, [sp, #4]
 8000f8e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f94:	2340      	movs	r3, #64	; 0x40
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f96:	f8cd 9000 	str.w	r9, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa0:	6460      	str	r0, [r4, #68]	; 0x44
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fa2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8000fa4:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fa6:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8000fa8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fac:	9a03      	ldr	r2, [sp, #12]
 8000fae:	f7ff fede 	bl	8000d6e <I2C_RequestMemoryWrite>
 8000fb2:	b130      	cbz	r0, 8000fc2 <HAL_I2C_Mem_Write+0x96>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000fb6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d0c8      	beq.n	8000f50 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	e7c7      	b.n	8000f52 <HAL_I2C_Mem_Write+0x26>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	2bff      	cmp	r3, #255	; 0xff
 8000fc8:	d910      	bls.n	8000fec <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fca:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fd2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff fe27 	bl	8000c2a <I2C_TransferConfig>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fdc:	4632      	mov	r2, r6
 8000fde:	4649      	mov	r1, r9
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff fe9b 	bl	8000d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8000fe6:	b148      	cbz	r0, 8000ffc <HAL_I2C_Mem_Write+0xd0>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fea:	e7e6      	b.n	8000fba <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8000fec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ff2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	e7eb      	b.n	8000fd4 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	1c59      	adds	r1, r3, #1
 8001002:	6261      	str	r1, [r4, #36]	; 0x24
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 8001008:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800100a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800100c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800100e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001010:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001012:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001014:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001016:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001018:	b9ba      	cbnz	r2, 800104a <HAL_I2C_Mem_Write+0x11e>
 800101a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800101c:	b29b      	uxth	r3, r3
 800101e:	b1a3      	cbz	r3, 800104a <HAL_I2C_Mem_Write+0x11e>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001020:	9600      	str	r6, [sp, #0]
 8001022:	464b      	mov	r3, r9
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff fe14 	bl	8000c54 <I2C_WaitOnFlagUntilTimeout>
 800102c:	2800      	cmp	r0, #0
 800102e:	d1c6      	bne.n	8000fbe <HAL_I2C_Mem_Write+0x92>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001030:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001032:	b29b      	uxth	r3, r3
 8001034:	2bff      	cmp	r3, #255	; 0xff
 8001036:	d927      	bls.n	8001088 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001038:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800103a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800103e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001040:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001042:	4639      	mov	r1, r7
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff fdf0 	bl	8000c2a <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 800104a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800104c:	b29b      	uxth	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1c4      	bne.n	8000fdc <HAL_I2C_Mem_Write+0xb0>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001052:	4632      	mov	r2, r6
 8001054:	4649      	mov	r1, r9
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff fef0 	bl	8000e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800105c:	2800      	cmp	r0, #0
 800105e:	d1c3      	bne.n	8000fe8 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	2120      	movs	r1, #32
 8001064:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800106c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001070:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800107a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800107e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001082:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001086:	e764      	b.n	8000f52 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8001088:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800108a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800108e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001090:	b292      	uxth	r2, r2
 8001092:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	e7d4      	b.n	8001042 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8001098:	2002      	movs	r0, #2
 800109a:	e75a      	b.n	8000f52 <HAL_I2C_Mem_Write+0x26>

0800109c <HAL_I2C_Mem_Read>:
{
 800109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a0:	469b      	mov	fp, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 80010a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80010a6:	b085      	sub	sp, #20
 80010a8:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80010aa:	2b20      	cmp	r3, #32
{
 80010ac:	460f      	mov	r7, r1
 80010ae:	9203      	str	r2, [sp, #12]
 80010b0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80010b4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if(hi2c->State == HAL_I2C_STATE_READY)
 80010b8:	f040 80ac 	bne.w	8001214 <HAL_I2C_Mem_Read+0x178>
    if((pData == NULL) || (Size == 0U))
 80010bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80010be:	b91b      	cbnz	r3, 80010c8 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
}
 80010c2:	b005      	add	sp, #20
 80010c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((pData == NULL) || (Size == 0U))
 80010c8:	f1ba 0f00 	cmp.w	sl, #0
 80010cc:	d0f8      	beq.n	80010c0 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 80010ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	f000 809e 	beq.w	8001214 <HAL_I2C_Mem_Read+0x178>
 80010d8:	2501      	movs	r5, #1
 80010da:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80010de:	f7ff f8d3 	bl	8000288 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010e2:	2319      	movs	r3, #25
 80010e4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80010e6:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010e8:	462a      	mov	r2, r5
 80010ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff fdb0 	bl	8000c54 <I2C_WaitOnFlagUntilTimeout>
 80010f4:	4680      	mov	r8, r0
 80010f6:	b9d0      	cbnz	r0, 800112e <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010f8:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80010fa:	6360      	str	r0, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010fc:	9601      	str	r6, [sp, #4]
 80010fe:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001100:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001104:	2340      	movs	r3, #64	; 0x40
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001106:	f8cd 9000 	str.w	r9, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800110a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800110e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001110:	6460      	str	r0, [r4, #68]	; 0x44
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001112:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8001114:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001116:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8001118:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800111c:	9a03      	ldr	r2, [sp, #12]
 800111e:	f7ff fe5a 	bl	8000dd6 <I2C_RequestMemoryRead>
 8001122:	b130      	cbz	r0, 8001132 <HAL_I2C_Mem_Read+0x96>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001124:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001126:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800112a:	2b04      	cmp	r3, #4
 800112c:	d0c8      	beq.n	80010c0 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 800112e:	2003      	movs	r0, #3
 8001130:	e7c7      	b.n	80010c2 <HAL_I2C_Mem_Read+0x26>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001132:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001134:	b29b      	uxth	r3, r3
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d946      	bls.n	80011c8 <HAL_I2C_Mem_Read+0x12c>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800113a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800113e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001146:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001148:	4639      	mov	r1, r7
 800114a:	4620      	mov	r0, r4
 800114c:	f7ff fd6d 	bl	8000c2a <I2C_TransferConfig>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001150:	9600      	str	r6, [sp, #0]
 8001152:	464b      	mov	r3, r9
 8001154:	2200      	movs	r2, #0
 8001156:	2104      	movs	r1, #4
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff fd7b 	bl	8000c54 <I2C_WaitOnFlagUntilTimeout>
 800115e:	2800      	cmp	r0, #0
 8001160:	d1e5      	bne.n	800112e <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	6262      	str	r2, [r4, #36]	; 0x24
 8001168:	6822      	ldr	r2, [r4, #0]
 800116a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800116c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800116e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001170:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001172:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001174:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001176:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001178:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800117a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800117c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800117e:	b9ba      	cbnz	r2, 80011b0 <HAL_I2C_Mem_Read+0x114>
 8001180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001182:	b29b      	uxth	r3, r3
 8001184:	b1a3      	cbz	r3, 80011b0 <HAL_I2C_Mem_Read+0x114>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001186:	9600      	str	r6, [sp, #0]
 8001188:	464b      	mov	r3, r9
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	4620      	mov	r0, r4
 800118e:	f7ff fd61 	bl	8000c54 <I2C_WaitOnFlagUntilTimeout>
 8001192:	2800      	cmp	r0, #0
 8001194:	d1cb      	bne.n	800112e <HAL_I2C_Mem_Read+0x92>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001196:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001198:	b29b      	uxth	r3, r3
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	d91e      	bls.n	80011dc <HAL_I2C_Mem_Read+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800119e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011a8:	4639      	mov	r1, r7
 80011aa:	4620      	mov	r0, r4
 80011ac:	f7ff fd3d 	bl	8000c2a <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 80011b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1cb      	bne.n	8001150 <HAL_I2C_Mem_Read+0xb4>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b8:	4632      	mov	r2, r6
 80011ba:	4649      	mov	r1, r9
 80011bc:	4620      	mov	r0, r4
 80011be:	f7ff fe3d 	bl	8000e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80011c2:	b198      	cbz	r0, 80011ec <HAL_I2C_Mem_Read+0x150>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c6:	e7b0      	b.n	800112a <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80011c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011ca:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 80011ce:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80011d6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	e7b5      	b.n	8001148 <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 80011dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80011e4:	b292      	uxth	r2, r2
 80011e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	e7dd      	b.n	80011a8 <HAL_I2C_Mem_Read+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	2120      	movs	r1, #32
 80011f0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80011f8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80011fc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001206:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800120a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800120e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001212:	e756      	b.n	80010c2 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8001214:	2002      	movs	r0, #2
 8001216:	e754      	b.n	80010c2 <HAL_I2C_Mem_Read+0x26>

08001218 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001218:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	2a20      	cmp	r2, #32
{
 8001220:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001222:	d11d      	bne.n	8001260 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001224:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001228:	2b01      	cmp	r3, #1
 800122a:	d019      	beq.n	8001260 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800122c:	2324      	movs	r3, #36	; 0x24
 800122e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001232:	6803      	ldr	r3, [r0, #0]
 8001234:	681c      	ldr	r4, [r3, #0]
 8001236:	f024 0401 	bic.w	r4, r4, #1
 800123a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800123c:	681c      	ldr	r4, [r3, #0]
 800123e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001242:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001244:	681c      	ldr	r4, [r3, #0]
 8001246:	4321      	orrs	r1, r4
 8001248:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800124a:	6819      	ldr	r1, [r3, #0]
 800124c:	f041 0101 	orr.w	r1, r1, #1
 8001250:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001252:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001254:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001258:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800125c:	4618      	mov	r0, r3
 800125e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001260:	2002      	movs	r0, #2
  }
}
 8001262:	bd10      	pop	{r4, pc}

08001264 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001264:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001266:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800126a:	b2e4      	uxtb	r4, r4
 800126c:	2c20      	cmp	r4, #32
 800126e:	d11c      	bne.n	80012aa <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001270:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001274:	2b01      	cmp	r3, #1
 8001276:	d018      	beq.n	80012aa <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001278:	2324      	movs	r3, #36	; 0x24
 800127a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800127e:	6803      	ldr	r3, [r0, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001288:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800128a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800128e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001292:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800129c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800129e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012a2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80012aa:	2002      	movs	r0, #2
  }
}
 80012ac:	bd10      	pop	{r4, pc}
	...

080012b0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80012b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012b6:	4c19      	ldr	r4, [pc, #100]	; (800131c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ce:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7fe ffda 	bl	8000288 <HAL_GetTick>
 80012d4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012d6:	6863      	ldr	r3, [r4, #4]
 80012d8:	03da      	lsls	r2, r3, #15
 80012da:	d50c      	bpl.n	80012f6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7fe ffd0 	bl	8000288 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012e8:	4c0c      	ldr	r4, [pc, #48]	; (800131c <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80012ea:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ec:	6863      	ldr	r3, [r4, #4]
 80012ee:	039b      	lsls	r3, r3, #14
 80012f0:	d50a      	bpl.n	8001308 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80012f2:	2000      	movs	r0, #0
 80012f4:	e006      	b.n	8001304 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012f6:	f7fe ffc7 	bl	8000288 <HAL_GetTick>
 80012fa:	1b40      	subs	r0, r0, r5
 80012fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001300:	d9e9      	bls.n	80012d6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001302:	2003      	movs	r0, #3
}
 8001304:	b003      	add	sp, #12
 8001306:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001308:	f7fe ffbe 	bl	8000288 <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001312:	d9eb      	bls.n	80012ec <HAL_PWREx_EnableOverDrive+0x3c>
 8001314:	e7f5      	b.n	8001302 <HAL_PWREx_EnableOverDrive+0x52>
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001324:	4604      	mov	r4, r0
 8001326:	b918      	cbnz	r0, 8001330 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001328:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800132a:	b002      	add	sp, #8
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001330:	6803      	ldr	r3, [r0, #0]
 8001332:	07d8      	lsls	r0, r3, #31
 8001334:	d410      	bmi.n	8001358 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	0799      	lsls	r1, r3, #30
 800133a:	d45e      	bmi.n	80013fa <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	0719      	lsls	r1, r3, #28
 8001340:	f100 80a3 	bmi.w	800148a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	075a      	lsls	r2, r3, #29
 8001348:	f100 80c4 	bmi.w	80014d4 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134c:	69a2      	ldr	r2, [r4, #24]
 800134e:	2a00      	cmp	r2, #0
 8001350:	f040 812e 	bne.w	80015b0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001354:	2000      	movs	r0, #0
 8001356:	e7e8      	b.n	800132a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001358:	4b93      	ldr	r3, [pc, #588]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	f002 020c 	and.w	r2, r2, #12
 8001360:	2a04      	cmp	r2, #4
 8001362:	d007      	beq.n	8001374 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	f002 020c 	and.w	r2, r2, #12
 800136a:	2a08      	cmp	r2, #8
 800136c:	d10a      	bne.n	8001384 <HAL_RCC_OscConfig+0x64>
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	025a      	lsls	r2, r3, #9
 8001372:	d507      	bpl.n	8001384 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	039b      	lsls	r3, r3, #14
 800137a:	d5dc      	bpl.n	8001336 <HAL_RCC_OscConfig+0x16>
 800137c:	6863      	ldr	r3, [r4, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1d9      	bne.n	8001336 <HAL_RCC_OscConfig+0x16>
 8001382:	e7d1      	b.n	8001328 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	4d88      	ldr	r5, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d111      	bne.n	80013b2 <HAL_RCC_OscConfig+0x92>
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001394:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001396:	f7fe ff77 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4d83      	ldr	r5, [pc, #524]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800139c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	039f      	lsls	r7, r3, #14
 80013a2:	d4c8      	bmi.n	8001336 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7fe ff70 	bl	8000288 <HAL_GetTick>
 80013a8:	1b80      	subs	r0, r0, r6
 80013aa:	2864      	cmp	r0, #100	; 0x64
 80013ac:	d9f7      	bls.n	800139e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80013ae:	2003      	movs	r0, #3
 80013b0:	e7bb      	b.n	800132a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	b99b      	cbnz	r3, 80013dc <HAL_RCC_OscConfig+0xbc>
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	602b      	str	r3, [r5, #0]
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013c4:	f7fe ff60 	bl	8000288 <HAL_GetTick>
 80013c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	0398      	lsls	r0, r3, #14
 80013ce:	d5b2      	bpl.n	8001336 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7fe ff5a 	bl	8000288 <HAL_GetTick>
 80013d4:	1b80      	subs	r0, r0, r6
 80013d6:	2864      	cmp	r0, #100	; 0x64
 80013d8:	d9f7      	bls.n	80013ca <HAL_RCC_OscConfig+0xaa>
 80013da:	e7e8      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	d103      	bne.n	80013ec <HAL_RCC_OscConfig+0xcc>
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	e7d0      	b.n	800138e <HAL_RCC_OscConfig+0x6e>
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f0:	602b      	str	r3, [r5, #0]
 80013f2:	682b      	ldr	r3, [r5, #0]
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	e7cc      	b.n	8001394 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fa:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	f012 0f0c 	tst.w	r2, #12
 8001402:	d007      	beq.n	8001414 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	f002 020c 	and.w	r2, r2, #12
 800140a:	2a08      	cmp	r2, #8
 800140c:	d111      	bne.n	8001432 <HAL_RCC_OscConfig+0x112>
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0259      	lsls	r1, r3, #9
 8001412:	d40e      	bmi.n	8001432 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	0792      	lsls	r2, r2, #30
 800141a:	d502      	bpl.n	8001422 <HAL_RCC_OscConfig+0x102>
 800141c:	68e2      	ldr	r2, [r4, #12]
 800141e:	2a01      	cmp	r2, #1
 8001420:	d182      	bne.n	8001328 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	6921      	ldr	r1, [r4, #16]
 8001426:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800142a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800142e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001430:	e784      	b.n	800133c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001432:	68e3      	ldr	r3, [r4, #12]
 8001434:	4d5c      	ldr	r5, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001436:	b1bb      	cbz	r3, 8001468 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001440:	f7fe ff22 	bl	8000288 <HAL_GetTick>
 8001444:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	079f      	lsls	r7, r3, #30
 800144a:	d507      	bpl.n	800145c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	6922      	ldr	r2, [r4, #16]
 8001450:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001454:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001458:	602b      	str	r3, [r5, #0]
 800145a:	e76f      	b.n	800133c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145c:	f7fe ff14 	bl	8000288 <HAL_GetTick>
 8001460:	1b80      	subs	r0, r0, r6
 8001462:	2802      	cmp	r0, #2
 8001464:	d9ef      	bls.n	8001446 <HAL_RCC_OscConfig+0x126>
 8001466:	e7a2      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001470:	f7fe ff0a 	bl	8000288 <HAL_GetTick>
 8001474:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	0798      	lsls	r0, r3, #30
 800147a:	f57f af5f 	bpl.w	800133c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147e:	f7fe ff03 	bl	8000288 <HAL_GetTick>
 8001482:	1b80      	subs	r0, r0, r6
 8001484:	2802      	cmp	r0, #2
 8001486:	d9f6      	bls.n	8001476 <HAL_RCC_OscConfig+0x156>
 8001488:	e791      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148a:	6963      	ldr	r3, [r4, #20]
 800148c:	4d46      	ldr	r5, [pc, #280]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 800148e:	b183      	cbz	r3, 80014b2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001490:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001498:	f7fe fef6 	bl	8000288 <HAL_GetTick>
 800149c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014a0:	079b      	lsls	r3, r3, #30
 80014a2:	f53f af4f 	bmi.w	8001344 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a6:	f7fe feef 	bl	8000288 <HAL_GetTick>
 80014aa:	1b80      	subs	r0, r0, r6
 80014ac:	2802      	cmp	r0, #2
 80014ae:	d9f6      	bls.n	800149e <HAL_RCC_OscConfig+0x17e>
 80014b0:	e77d      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80014b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014ba:	f7fe fee5 	bl	8000288 <HAL_GetTick>
 80014be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014c2:	079f      	lsls	r7, r3, #30
 80014c4:	f57f af3e 	bpl.w	8001344 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7fe fede 	bl	8000288 <HAL_GetTick>
 80014cc:	1b80      	subs	r0, r0, r6
 80014ce:	2802      	cmp	r0, #2
 80014d0:	d9f6      	bls.n	80014c0 <HAL_RCC_OscConfig+0x1a0>
 80014d2:	e76c      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 80014d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d8:	00d0      	lsls	r0, r2, #3
 80014da:	d427      	bmi.n	800152c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80014de:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f0:	4d2e      	ldr	r5, [pc, #184]	; (80015ac <HAL_RCC_OscConfig+0x28c>)
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	05d9      	lsls	r1, r3, #23
 80014f6:	d51b      	bpl.n	8001530 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	68a3      	ldr	r3, [r4, #8]
 80014fa:	4d2b      	ldr	r5, [pc, #172]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d127      	bne.n	8001550 <HAL_RCC_OscConfig+0x230>
 8001500:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800150c:	f7fe febc 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	4f25      	ldr	r7, [pc, #148]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001512:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001516:	079b      	lsls	r3, r3, #30
 8001518:	d53f      	bpl.n	800159a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800151a:	2e00      	cmp	r6, #0
 800151c:	f43f af16 	beq.w	800134c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001522:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	e70f      	b.n	800134c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800152c:	2600      	movs	r6, #0
 800152e:	e7df      	b.n	80014f0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001538:	f7fe fea6 	bl	8000288 <HAL_GetTick>
 800153c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	05da      	lsls	r2, r3, #23
 8001542:	d4d9      	bmi.n	80014f8 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001544:	f7fe fea0 	bl	8000288 <HAL_GetTick>
 8001548:	1bc0      	subs	r0, r0, r7
 800154a:	2864      	cmp	r0, #100	; 0x64
 800154c:	d9f7      	bls.n	800153e <HAL_RCC_OscConfig+0x21e>
 800154e:	e72e      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	b9ab      	cbnz	r3, 800157e <HAL_RCC_OscConfig+0x25e>
 8001552:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	672b      	str	r3, [r5, #112]	; 0x70
 800155e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001566:	f7fe fe8f 	bl	8000288 <HAL_GetTick>
 800156a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800156e:	0798      	lsls	r0, r3, #30
 8001570:	d5d3      	bpl.n	800151a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7fe fe89 	bl	8000288 <HAL_GetTick>
 8001576:	1bc0      	subs	r0, r0, r7
 8001578:	4540      	cmp	r0, r8
 800157a:	d9f7      	bls.n	800156c <HAL_RCC_OscConfig+0x24c>
 800157c:	e717      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157e:	2b05      	cmp	r3, #5
 8001580:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001582:	d103      	bne.n	800158c <HAL_RCC_OscConfig+0x26c>
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	672b      	str	r3, [r5, #112]	; 0x70
 800158a:	e7b9      	b.n	8001500 <HAL_RCC_OscConfig+0x1e0>
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	672b      	str	r3, [r5, #112]	; 0x70
 8001592:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	e7b5      	b.n	8001506 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7fe fe75 	bl	8000288 <HAL_GetTick>
 800159e:	eba0 0008 	sub.w	r0, r0, r8
 80015a2:	42a8      	cmp	r0, r5
 80015a4:	d9b6      	bls.n	8001514 <HAL_RCC_OscConfig+0x1f4>
 80015a6:	e702      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b0:	4d24      	ldr	r5, [pc, #144]	; (8001644 <HAL_RCC_OscConfig+0x324>)
 80015b2:	68ab      	ldr	r3, [r5, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	f43f aeb5 	beq.w	8001328 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80015be:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015c6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c8:	d12f      	bne.n	800162a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80015ca:	f7fe fe5d 	bl	8000288 <HAL_GetTick>
 80015ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	0199      	lsls	r1, r3, #6
 80015d4:	d423      	bmi.n	800161e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d6:	6a22      	ldr	r2, [r4, #32]
 80015d8:	69e3      	ldr	r3, [r4, #28]
 80015da:	4313      	orrs	r3, r2
 80015dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80015ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	4c14      	ldr	r4, [pc, #80]	; (8001644 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f2:	0852      	lsrs	r2, r2, #1
 80015f4:	3a01      	subs	r2, #1
 80015f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015fa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001602:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001604:	f7fe fe40 	bl	8000288 <HAL_GetTick>
 8001608:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	019a      	lsls	r2, r3, #6
 800160e:	f53f aea1 	bmi.w	8001354 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001612:	f7fe fe39 	bl	8000288 <HAL_GetTick>
 8001616:	1b40      	subs	r0, r0, r5
 8001618:	2802      	cmp	r0, #2
 800161a:	d9f6      	bls.n	800160a <HAL_RCC_OscConfig+0x2ea>
 800161c:	e6c7      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7fe fe33 	bl	8000288 <HAL_GetTick>
 8001622:	1b80      	subs	r0, r0, r6
 8001624:	2802      	cmp	r0, #2
 8001626:	d9d3      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2b0>
 8001628:	e6c1      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800162a:	f7fe fe2d 	bl	8000288 <HAL_GetTick>
 800162e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	019b      	lsls	r3, r3, #6
 8001634:	f57f ae8e 	bpl.w	8001354 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7fe fe26 	bl	8000288 <HAL_GetTick>
 800163c:	1b00      	subs	r0, r0, r4
 800163e:	2802      	cmp	r0, #2
 8001640:	d9f6      	bls.n	8001630 <HAL_RCC_OscConfig+0x310>
 8001642:	e6b4      	b.n	80013ae <HAL_RCC_OscConfig+0x8e>
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_GetSysClockFreq+0x48>)
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	f002 020c 	and.w	r2, r2, #12
 8001650:	2a04      	cmp	r2, #4
 8001652:	d003      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x14>
 8001654:	2a08      	cmp	r2, #8
 8001656:	d003      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001658:	480e      	ldr	r0, [pc, #56]	; (8001694 <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800165a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800165c:	480e      	ldr	r0, [pc, #56]	; (8001698 <HAL_RCC_GetSysClockFreq+0x50>)
 800165e:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001662:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001664:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8001668:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800166a:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 800166c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001670:	bf4c      	ite	mi
 8001672:	4809      	ldrmi	r0, [pc, #36]	; (8001698 <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8001674:	4807      	ldrpl	r0, [pc, #28]	; (8001694 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001676:	fbb0 f0f2 	udiv	r0, r0, r2
 800167a:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_RCC_GetSysClockFreq+0x48>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001684:	3301      	adds	r3, #1
 8001686:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001688:	fbb0 f0f3 	udiv	r0, r0, r3
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	00f42400 	.word	0x00f42400
 8001698:	017d7840 	.word	0x017d7840

0800169c <HAL_RCC_ClockConfig>:
{
 800169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80016a2:	4604      	mov	r4, r0
 80016a4:	b910      	cbnz	r0, 80016ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
 80016a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4a3f      	ldr	r2, [pc, #252]	; (80017ac <HAL_RCC_ClockConfig+0x110>)
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	428b      	cmp	r3, r1
 80016b6:	d328      	bcc.n	800170a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	6822      	ldr	r2, [r4, #0]
 80016ba:	0796      	lsls	r6, r2, #30
 80016bc:	d430      	bmi.n	8001720 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	07d0      	lsls	r0, r2, #31
 80016c0:	d436      	bmi.n	8001730 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c2:	4a3a      	ldr	r2, [pc, #232]	; (80017ac <HAL_RCC_ClockConfig+0x110>)
 80016c4:	6813      	ldr	r3, [r2, #0]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	429d      	cmp	r5, r3
 80016cc:	d35a      	bcc.n	8001784 <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ce:	6822      	ldr	r2, [r4, #0]
 80016d0:	0751      	lsls	r1, r2, #29
 80016d2:	d462      	bmi.n	800179a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	0713      	lsls	r3, r2, #28
 80016d6:	d507      	bpl.n	80016e8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016d8:	4a35      	ldr	r2, [pc, #212]	; (80017b0 <HAL_RCC_ClockConfig+0x114>)
 80016da:	6921      	ldr	r1, [r4, #16]
 80016dc:	6893      	ldr	r3, [r2, #8]
 80016de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e8:	f7ff ffae 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_RCC_ClockConfig+0x114>)
 80016ee:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <HAL_RCC_ClockConfig+0x118>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	40d8      	lsrs	r0, r3
 80016fa:	4b2f      	ldr	r3, [pc, #188]	; (80017b8 <HAL_RCC_ClockConfig+0x11c>)
 80016fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7fe fd9a 	bl	8000238 <HAL_InitTick>
  return HAL_OK;
 8001704:	2000      	movs	r0, #0
 8001706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	f023 030f 	bic.w	r3, r3, #15
 8001710:	430b      	orrs	r3, r1
 8001712:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001714:	6813      	ldr	r3, [r2, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	4299      	cmp	r1, r3
 800171c:	d1c3      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xa>
 800171e:	e7cb      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4923      	ldr	r1, [pc, #140]	; (80017b0 <HAL_RCC_ClockConfig+0x114>)
 8001722:	68a0      	ldr	r0, [r4, #8]
 8001724:	688b      	ldr	r3, [r1, #8]
 8001726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800172a:	4303      	orrs	r3, r0
 800172c:	608b      	str	r3, [r1, #8]
 800172e:	e7c6      	b.n	80016be <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001730:	6861      	ldr	r1, [r4, #4]
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <HAL_RCC_ClockConfig+0x114>)
 8001734:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	d0b2      	beq.n	80016a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001740:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001742:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4e1a      	ldr	r6, [pc, #104]	; (80017b0 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001748:	f022 0203 	bic.w	r2, r2, #3
 800174c:	430a      	orrs	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001750:	f7fe fd9a 	bl	8000288 <HAL_GetTick>
 8001754:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	68b3      	ldr	r3, [r6, #8]
 8001758:	6862      	ldr	r2, [r4, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001762:	d0ae      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001764:	f7fe fd90 	bl	8000288 <HAL_GetTick>
 8001768:	1bc0      	subs	r0, r0, r7
 800176a:	4540      	cmp	r0, r8
 800176c:	d9f3      	bls.n	8001756 <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
}
 8001770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001774:	2902      	cmp	r1, #2
 8001776:	d102      	bne.n	800177e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001778:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800177c:	e7df      	b.n	800173e <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	f012 0f02 	tst.w	r2, #2
 8001782:	e7dc      	b.n	800173e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	f023 030f 	bic.w	r3, r3, #15
 800178a:	432b      	orrs	r3, r5
 800178c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	429d      	cmp	r5, r3
 8001796:	d186      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xa>
 8001798:	e799      	b.n	80016ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179a:	4905      	ldr	r1, [pc, #20]	; (80017b0 <HAL_RCC_ClockConfig+0x114>)
 800179c:	68e0      	ldr	r0, [r4, #12]
 800179e:	688b      	ldr	r3, [r1, #8]
 80017a0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017a4:	4303      	orrs	r3, r0
 80017a6:	608b      	str	r3, [r1, #8]
 80017a8:	e794      	b.n	80016d4 <HAL_RCC_ClockConfig+0x38>
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08005763 	.word	0x08005763
 80017b8:	20000324 	.word	0x20000324

080017bc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017bc:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000324 	.word	0x20000324

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017d2:	5cd3      	ldrb	r3, [r2, r3]
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017d6:	6810      	ldr	r0, [r2, #0]
}
 80017d8:	40d8      	lsrs	r0, r3
 80017da:	4770      	bx	lr
 80017dc:	40023800 	.word	0x40023800
 80017e0:	08005773 	.word	0x08005773
 80017e4:	20000324 	.word	0x20000324

080017e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017f6:	6810      	ldr	r0, [r2, #0]
} 
 80017f8:	40d8      	lsrs	r0, r3
 80017fa:	4770      	bx	lr
 80017fc:	40023800 	.word	0x40023800
 8001800:	08005773 	.word	0x08005773
 8001804:	20000324 	.word	0x20000324

08001808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800180c:	6802      	ldr	r2, [r0, #0]
{
 800180e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001810:	f012 0601 	ands.w	r6, r2, #1
 8001814:	d00b      	beq.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001816:	4bba      	ldr	r3, [pc, #744]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001818:	6899      	ldr	r1, [r3, #8]
 800181a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800181e:	6099      	str	r1, [r3, #8]
 8001820:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001822:	6899      	ldr	r1, [r3, #8]
 8001824:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001826:	fab6 f686 	clz	r6, r6
 800182a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800182c:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800182e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001832:	d012      	beq.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001834:	49b2      	ldr	r1, [pc, #712]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001836:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001838:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800183c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001840:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8001844:	bf08      	it	eq
 8001846:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001848:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800184c:	bf16      	itet	ne
 800184e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001852:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001854:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001856:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800185a:	02d7      	lsls	r7, r2, #11
 800185c:	d510      	bpl.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800185e:	48a8      	ldr	r0, [pc, #672]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001860:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001862:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001866:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800186a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800186e:	ea43 0301 	orr.w	r3, r3, r1
 8001872:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001876:	f000 81a9 	beq.w	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800187a:	2900      	cmp	r1, #0
 800187c:	bf08      	it	eq
 800187e:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8001880:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001884:	bf18      	it	ne
 8001886:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001888:	0690      	lsls	r0, r2, #26
 800188a:	d531      	bpl.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4b9c      	ldr	r3, [pc, #624]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800188e:	4f9d      	ldr	r7, [pc, #628]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001892:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018aa:	f7fe fced 	bl	8000288 <HAL_GetTick>
 80018ae:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	05d9      	lsls	r1, r3, #23
 80018b4:	f140 818c 	bpl.w	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018b8:	4f91      	ldr	r7, [pc, #580]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018bc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018c0:	f040 8191 	bne.w	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80018ca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80018ce:	4a8c      	ldr	r2, [pc, #560]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018d0:	f040 81af 	bne.w	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80018d4:	6891      	ldr	r1, [r2, #8]
 80018d6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80018da:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80018de:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80018e2:	4301      	orrs	r1, r0
 80018e4:	6091      	str	r1, [r2, #8]
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	06df      	lsls	r7, r3, #27
 80018f4:	d50c      	bpl.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80018f6:	4a82      	ldr	r2, [pc, #520]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018f8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80018fc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001900:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001904:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001908:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800190a:	4301      	orrs	r1, r0
 800190c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001910:	0458      	lsls	r0, r3, #17
 8001912:	d508      	bpl.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001914:	497a      	ldr	r1, [pc, #488]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001916:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001918:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800191c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001920:	4302      	orrs	r2, r0
 8001922:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001926:	0419      	lsls	r1, r3, #16
 8001928:	d508      	bpl.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800192a:	4975      	ldr	r1, [pc, #468]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800192c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800192e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001932:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001936:	4302      	orrs	r2, r0
 8001938:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800193c:	03da      	lsls	r2, r3, #15
 800193e:	d508      	bpl.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001940:	496f      	ldr	r1, [pc, #444]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001942:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001944:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001948:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800194c:	4302      	orrs	r2, r0
 800194e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001952:	039f      	lsls	r7, r3, #14
 8001954:	d508      	bpl.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001956:	496a      	ldr	r1, [pc, #424]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001958:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800195a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800195e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001962:	4302      	orrs	r2, r0
 8001964:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001968:	0658      	lsls	r0, r3, #25
 800196a:	d508      	bpl.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800196c:	4964      	ldr	r1, [pc, #400]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800196e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001970:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001974:	f022 0203 	bic.w	r2, r2, #3
 8001978:	4302      	orrs	r2, r0
 800197a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800197e:	0619      	lsls	r1, r3, #24
 8001980:	d508      	bpl.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001982:	495f      	ldr	r1, [pc, #380]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001984:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001986:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800198a:	f022 020c 	bic.w	r2, r2, #12
 800198e:	4302      	orrs	r2, r0
 8001990:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001994:	05da      	lsls	r2, r3, #23
 8001996:	d508      	bpl.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001998:	4959      	ldr	r1, [pc, #356]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800199a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800199c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019a0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80019a4:	4302      	orrs	r2, r0
 80019a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019aa:	059f      	lsls	r7, r3, #22
 80019ac:	d508      	bpl.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019ae:	4954      	ldr	r1, [pc, #336]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80019b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80019ba:	4302      	orrs	r2, r0
 80019bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019c0:	0558      	lsls	r0, r3, #21
 80019c2:	d508      	bpl.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019c4:	494e      	ldr	r1, [pc, #312]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019d0:	4302      	orrs	r2, r0
 80019d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80019d6:	0519      	lsls	r1, r3, #20
 80019d8:	d508      	bpl.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80019da:	4949      	ldr	r1, [pc, #292]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80019e6:	4302      	orrs	r2, r0
 80019e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80019ec:	04da      	lsls	r2, r3, #19
 80019ee:	d508      	bpl.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80019f0:	4943      	ldr	r1, [pc, #268]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019f2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80019f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019fc:	4302      	orrs	r2, r0
 80019fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a02:	049f      	lsls	r7, r3, #18
 8001a04:	d508      	bpl.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a06:	493e      	ldr	r1, [pc, #248]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a08:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a0a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a12:	4302      	orrs	r2, r0
 8001a14:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a18:	0258      	lsls	r0, r3, #9
 8001a1a:	d508      	bpl.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a1c:	4938      	ldr	r1, [pc, #224]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a1e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001a20:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a24:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001a28:	4302      	orrs	r2, r0
 8001a2a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a2e:	0299      	lsls	r1, r3, #10
 8001a30:	d50c      	bpl.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a32:	4833      	ldr	r0, [pc, #204]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a34:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a36:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a3a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a3e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8001a42:	bf08      	it	eq
 8001a44:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a46:	430a      	orrs	r2, r1
 8001a48:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001a4c:	f013 0f08 	tst.w	r3, #8
 8001a50:	bf18      	it	ne
 8001a52:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a54:	035a      	lsls	r2, r3, #13
 8001a56:	d508      	bpl.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a58:	4929      	ldr	r1, [pc, #164]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a5a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001a5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a64:	4302      	orrs	r2, r0
 8001a66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a6a:	021f      	lsls	r7, r3, #8
 8001a6c:	d509      	bpl.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a6e:	4924      	ldr	r1, [pc, #144]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001a74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a78:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001a7c:	4302      	orrs	r2, r0
 8001a7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001a82:	0158      	lsls	r0, r3, #5
 8001a84:	d509      	bpl.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001a86:	491e      	ldr	r1, [pc, #120]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a88:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001a8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a90:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001a94:	4302      	orrs	r2, r0
 8001a96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001a9a:	0119      	lsls	r1, r3, #4
 8001a9c:	d509      	bpl.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001a9e:	4918      	ldr	r1, [pc, #96]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001aa0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001aa4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001aa8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001aac:	4302      	orrs	r2, r0
 8001aae:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001ab2:	00da      	lsls	r2, r3, #3
 8001ab4:	d509      	bpl.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ab6:	4912      	ldr	r1, [pc, #72]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ab8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001abc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001ac0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001ac4:	4302      	orrs	r2, r0
 8001ac6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001aca:	2e01      	cmp	r6, #1
 8001acc:	f000 80b5 	beq.w	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ad4:	f000 80b1 	beq.w	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001ad8:	2d01      	cmp	r5, #1
 8001ada:	d175      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001adc:	4d08      	ldr	r5, [pc, #32]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae6:	f7fe fbcf 	bl	8000288 <HAL_GetTick>
 8001aea:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	009f      	lsls	r7, r3, #2
 8001af0:	f100 8127 	bmi.w	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001af4:	6821      	ldr	r1, [r4, #0]
 8001af6:	030e      	lsls	r6, r1, #12
 8001af8:	d506      	bpl.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001afa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001afc:	b143      	cbz	r3, 8001b10 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001afe:	e003      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40007000 	.word	0x40007000
 8001b08:	02cd      	lsls	r5, r1, #11
 8001b0a:	d51d      	bpl.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b0e:	b9db      	cbnz	r3, 8001b48 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b10:	4a93      	ldr	r2, [pc, #588]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b16:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b22:	4303      	orrs	r3, r0
 8001b24:	6960      	ldr	r0, [r4, #20]
 8001b26:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b2a:	69a0      	ldr	r0, [r4, #24]
 8001b2c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b34:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b3a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b3e:	3801      	subs	r0, #1
 8001b40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001b44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001b48:	0288      	lsls	r0, r1, #10
 8001b4a:	d515      	bpl.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001b4c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b52:	d111      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b54:	4a82      	ldr	r2, [pc, #520]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b5a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b5e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b62:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b66:	4303      	orrs	r3, r0
 8001b68:	6960      	ldr	r0, [r4, #20]
 8001b6a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b6e:	6a20      	ldr	r0, [r4, #32]
 8001b70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001b78:	070a      	lsls	r2, r1, #28
 8001b7a:	d519      	bpl.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b7c:	4978      	ldr	r1, [pc, #480]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b82:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b86:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	6962      	ldr	r2, [r4, #20]
 8001b92:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b96:	69e2      	ldr	r2, [r4, #28]
 8001b98:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001ba0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001ba4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ba6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001bb0:	4c6b      	ldr	r4, [pc, #428]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bba:	f7fe fb65 	bl	8000288 <HAL_GetTick>
 8001bbe:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f140 80c4 	bpl.w	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001bc8:	2000      	movs	r0, #0
 8001bca:	e009      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1; 
 8001bcc:	2601      	movs	r6, #1
 8001bce:	e657      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7fe fb5a 	bl	8000288 <HAL_GetTick>
 8001bd4:	eba0 0008 	sub.w	r0, r0, r8
 8001bd8:	2864      	cmp	r0, #100	; 0x64
 8001bda:	f67f ae69 	bls.w	80018b0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
}
 8001be0:	b003      	add	sp, #12
 8001be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001be8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bec:	4293      	cmp	r3, r2
 8001bee:	f43f ae69 	beq.w	80018c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bf4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bfa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bfe:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c06:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c08:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c0c:	07da      	lsls	r2, r3, #31
 8001c0e:	f57f ae59 	bpl.w	80018c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001c12:	f7fe fb39 	bl	8000288 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c1a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c1e:	079b      	lsls	r3, r3, #30
 8001c20:	f53f ae50 	bmi.w	80018c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7fe fb30 	bl	8000288 <HAL_GetTick>
 8001c28:	eba0 0008 	sub.w	r0, r0, r8
 8001c2c:	4548      	cmp	r0, r9
 8001c2e:	d9f5      	bls.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001c30:	e7d5      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c32:	6891      	ldr	r1, [r2, #8]
 8001c34:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c38:	e654      	b.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8001c3a:	4e49      	ldr	r6, [pc, #292]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001c3c:	6833      	ldr	r3, [r6, #0]
 8001c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c42:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c44:	f7fe fb20 	bl	8000288 <HAL_GetTick>
 8001c48:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c4a:	6833      	ldr	r3, [r6, #0]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	d472      	bmi.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c50:	6822      	ldr	r2, [r4, #0]
 8001c52:	07d7      	lsls	r7, r2, #31
 8001c54:	d512      	bpl.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c58:	b983      	cbnz	r3, 8001c7c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c5a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c5e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c66:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	6861      	ldr	r1, [r4, #4]
 8001c6e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c72:	68a1      	ldr	r1, [r4, #8]
 8001c74:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001c78:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c7c:	0316      	lsls	r6, r2, #12
 8001c7e:	d503      	bpl.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001c80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c86:	d005      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001c88:	02d0      	lsls	r0, r2, #11
 8001c8a:	d51e      	bpl.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c92:	d11a      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c94:	4932      	ldr	r1, [pc, #200]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001c96:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c9a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001ca6:	4303      	orrs	r3, r0
 8001ca8:	6860      	ldr	r0, [r4, #4]
 8001caa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cae:	68e0      	ldr	r0, [r4, #12]
 8001cb0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001cb8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cbe:	f020 001f 	bic.w	r0, r0, #31
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	4303      	orrs	r3, r0
 8001cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cca:	01d1      	lsls	r1, r2, #7
 8001ccc:	d511      	bpl.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cce:	4924      	ldr	r1, [pc, #144]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001cd0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cd4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001cd8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001cdc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001ce0:	4303      	orrs	r3, r0
 8001ce2:	6860      	ldr	r0, [r4, #4]
 8001ce4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ce8:	6920      	ldr	r0, [r4, #16]
 8001cea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001cee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cf2:	0192      	lsls	r2, r2, #6
 8001cf4:	d50d      	bpl.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cf6:	6923      	ldr	r3, [r4, #16]
 8001cf8:	6862      	ldr	r2, [r4, #4]
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d00:	68e2      	ldr	r2, [r4, #12]
 8001d02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d06:	68a2      	ldr	r2, [r4, #8]
 8001d08:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d12:	4e13      	ldr	r6, [pc, #76]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d14:	6833      	ldr	r3, [r6, #0]
 8001d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d1a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001d1c:	f7fe fab4 	bl	8000288 <HAL_GetTick>
 8001d20:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d22:	6833      	ldr	r3, [r6, #0]
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	f53f aed7 	bmi.w	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d2a:	f7fe faad 	bl	8000288 <HAL_GetTick>
 8001d2e:	1bc0      	subs	r0, r0, r7
 8001d30:	2864      	cmp	r0, #100	; 0x64
 8001d32:	d9f6      	bls.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001d34:	e753      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d36:	f7fe faa7 	bl	8000288 <HAL_GetTick>
 8001d3a:	1bc0      	subs	r0, r0, r7
 8001d3c:	2864      	cmp	r0, #100	; 0x64
 8001d3e:	d984      	bls.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001d40:	e74d      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d42:	f7fe faa1 	bl	8000288 <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	2864      	cmp	r0, #100	; 0x64
 8001d4a:	f67f aecf 	bls.w	8001aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001d4e:	e746      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d50:	f7fe fa9a 	bl	8000288 <HAL_GetTick>
 8001d54:	1b40      	subs	r0, r0, r5
 8001d56:	2864      	cmp	r0, #100	; 0x64
 8001d58:	f67f af32 	bls.w	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001d5c:	e73f      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800

08001d64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d64:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d66:	4604      	mov	r4, r0
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d04e      	beq.n	8001e0a <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d70:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001d74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d78:	b91b      	cbnz	r3, 8001d82 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d7a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d7e:	f002 fbef 	bl	8004560 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d82:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d84:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d86:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d88:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001d8c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d8e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d9c:	d932      	bls.n	8001e04 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d9e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001da0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da4:	bf18      	it	ne
 8001da6:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001da8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001daa:	b92b      	cbnz	r3, 8001db8 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dac:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001db0:	bf8c      	ite	hi
 8001db2:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001db4:	2301      	movls	r3, #1
 8001db6:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001db8:	68a6      	ldr	r6, [r4, #8]
 8001dba:	6863      	ldr	r3, [r4, #4]
 8001dbc:	69a5      	ldr	r5, [r4, #24]
 8001dbe:	4333      	orrs	r3, r6
 8001dc0:	6926      	ldr	r6, [r4, #16]
 8001dc2:	4333      	orrs	r3, r6
 8001dc4:	6966      	ldr	r6, [r4, #20]
 8001dc6:	4333      	orrs	r3, r6
 8001dc8:	69e6      	ldr	r6, [r4, #28]
 8001dca:	4333      	orrs	r3, r6
 8001dcc:	6a26      	ldr	r6, [r4, #32]
 8001dce:	4333      	orrs	r3, r6
 8001dd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dd2:	4333      	orrs	r3, r6
 8001dd4:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001dd8:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001dda:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001ddc:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001de0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de4:	431a      	orrs	r2, r3
 8001de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001de8:	431a      	orrs	r2, r3
 8001dea:	432a      	orrs	r2, r5
 8001dec:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dee:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001df0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001df2:	69cb      	ldr	r3, [r1, #28]
 8001df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001df8:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001dfa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dfc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001dfe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e08:	e7cc      	b.n	8001da4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
}
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}

08001e0e <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e0e:	6a03      	ldr	r3, [r0, #32]
{
 8001e10:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e12:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e14:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e18:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8001e1c:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e1e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e20:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e22:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001e26:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e2a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e2c:	6203      	str	r3, [r0, #32]
 8001e2e:	bd10      	pop	{r4, pc}

08001e30 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e30:	6a03      	ldr	r3, [r0, #32]
 8001e32:	f023 0310 	bic.w	r3, r3, #16
{
 8001e36:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e38:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e3a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e3c:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e3e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001e46:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8001e4a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e4e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e50:	6203      	str	r3, [r0, #32]
 8001e52:	bd10      	pop	{r4, pc}

08001e54 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e54:	6803      	ldr	r3, [r0, #0]
}
 8001e56:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	4770      	bx	lr

08001e6a <HAL_TIM_IC_MspInit>:
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_OC_DelayElapsedCallback>:
 8001e6c:	4770      	bx	lr

08001e6e <HAL_TIM_IC_CaptureCallback>:
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_TriggerCallback>:
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e74:	6803      	ldr	r3, [r0, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	0791      	lsls	r1, r2, #30
{
 8001e7a:	b510      	push	{r4, lr}
 8001e7c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e7e:	d50f      	bpl.n	8001ea0 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	0792      	lsls	r2, r2, #30
 8001e84:	d50c      	bpl.n	8001ea0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e86:	f06f 0202 	mvn.w	r2, #2
 8001e8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001e8e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e90:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001e92:	0799      	lsls	r1, r3, #30
 8001e94:	f000 8085 	beq.w	8001fa2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001e98:	f7ff ffe9 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	0752      	lsls	r2, r2, #29
 8001ea6:	d510      	bpl.n	8001eca <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	0750      	lsls	r0, r2, #29
 8001eac:	d50d      	bpl.n	8001eca <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eae:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001eb8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eba:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001ebc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001ec0:	d075      	beq.n	8001fae <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	f7ff ffd4 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	0711      	lsls	r1, r2, #28
 8001ed0:	d50f      	bpl.n	8001ef2 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	0712      	lsls	r2, r2, #28
 8001ed6:	d50c      	bpl.n	8001ef2 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed8:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8001edc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee0:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001ee2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001ee6:	079b      	lsls	r3, r3, #30
 8001ee8:	d067      	beq.n	8001fba <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	f7ff ffc0 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	06d0      	lsls	r0, r2, #27
 8001ef8:	d510      	bpl.n	8001f1c <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	06d1      	lsls	r1, r2, #27
 8001efe:	d50d      	bpl.n	8001f1c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f00:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8001f04:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f08:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001f0a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001f0e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f12:	d058      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f14:	f7ff ffab 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	07d2      	lsls	r2, r2, #31
 8001f22:	d508      	bpl.n	8001f36 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	07d0      	lsls	r0, r2, #31
 8001f28:	d505      	bpl.n	8001f36 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f2a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f30:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f32:	f001 fc79 	bl	8003828 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	0611      	lsls	r1, r2, #24
 8001f3c:	d508      	bpl.n	8001f50 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	0612      	lsls	r2, r2, #24
 8001f42:	d505      	bpl.n	8001f50 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f48:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f4c:	f000 fac1 	bl	80024d2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	05d0      	lsls	r0, r2, #23
 8001f56:	d508      	bpl.n	8001f6a <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	0611      	lsls	r1, r2, #24
 8001f5c:	d505      	bpl.n	8001f6a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f66:	f000 fab4 	bl	80024d2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	0652      	lsls	r2, r2, #25
 8001f70:	d508      	bpl.n	8001f84 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	0650      	lsls	r0, r2, #25
 8001f76:	d505      	bpl.n	8001f84 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001f7c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f80:	f7ff ff77 	bl	8001e72 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	0691      	lsls	r1, r2, #26
 8001f8a:	d522      	bpl.n	8001fd2 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	0692      	lsls	r2, r2, #26
 8001f90:	d51f      	bpl.n	8001fd2 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f92:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001f96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f98:	611a      	str	r2, [r3, #16]
}
 8001f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001f9e:	f000 ba97 	b.w	80024d0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	f7ff ff63 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff ff62 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fac:	e776      	b.n	8001e9c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	f7ff ff5d 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ff5c 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fb8:	e785      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	f7ff ff57 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff ff56 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fc4:	e793      	b.n	8001eee <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	f7ff ff51 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff ff50 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fd0:	e7a2      	b.n	8001f18 <HAL_TIM_IRQHandler+0xa4>
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001fd4:	4a30      	ldr	r2, [pc, #192]	; (8002098 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001fd6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001fd8:	4290      	cmp	r0, r2
 8001fda:	d012      	beq.n	8002002 <TIM_Base_SetConfig+0x2e>
 8001fdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fe0:	d00f      	beq.n	8002002 <TIM_Base_SetConfig+0x2e>
 8001fe2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fe6:	4290      	cmp	r0, r2
 8001fe8:	d00b      	beq.n	8002002 <TIM_Base_SetConfig+0x2e>
 8001fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fee:	4290      	cmp	r0, r2
 8001ff0:	d007      	beq.n	8002002 <TIM_Base_SetConfig+0x2e>
 8001ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff6:	4290      	cmp	r0, r2
 8001ff8:	d003      	beq.n	8002002 <TIM_Base_SetConfig+0x2e>
 8001ffa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001ffe:	4290      	cmp	r0, r2
 8002000:	d11d      	bne.n	800203e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002002:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002008:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800200a:	4a23      	ldr	r2, [pc, #140]	; (8002098 <TIM_Base_SetConfig+0xc4>)
 800200c:	4290      	cmp	r0, r2
 800200e:	d104      	bne.n	800201a <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002014:	68ca      	ldr	r2, [r1, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	e028      	b.n	800206c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800201a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800201e:	d0f7      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <TIM_Base_SetConfig+0xc8>)
 8002022:	4290      	cmp	r0, r2
 8002024:	d0f4      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 8002026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800202a:	4290      	cmp	r0, r2
 800202c:	d0f0      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 800202e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002032:	4290      	cmp	r0, r2
 8002034:	d0ec      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 8002036:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800203a:	4290      	cmp	r0, r2
 800203c:	d0e8      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <TIM_Base_SetConfig+0xcc>)
 8002040:	4290      	cmp	r0, r2
 8002042:	d0e5      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 8002044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002048:	4290      	cmp	r0, r2
 800204a:	d0e1      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 800204c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002050:	4290      	cmp	r0, r2
 8002052:	d0dd      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 8002054:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002058:	4290      	cmp	r0, r2
 800205a:	d0d9      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 800205c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002060:	4290      	cmp	r0, r2
 8002062:	d0d5      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
 8002064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002068:	4290      	cmp	r0, r2
 800206a:	d0d1      	beq.n	8002010 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800206c:	694a      	ldr	r2, [r1, #20]
 800206e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002072:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002074:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002076:	688b      	ldr	r3, [r1, #8]
 8002078:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800207a:	680b      	ldr	r3, [r1, #0]
 800207c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <TIM_Base_SetConfig+0xc4>)
 8002080:	4298      	cmp	r0, r3
 8002082:	d006      	beq.n	8002092 <TIM_Base_SetConfig+0xbe>
 8002084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002088:	4298      	cmp	r0, r3
 800208a:	d002      	beq.n	8002092 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 800208c:	2301      	movs	r3, #1
 800208e:	6143      	str	r3, [r0, #20]
}
 8002090:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002092:	690b      	ldr	r3, [r1, #16]
 8002094:	6303      	str	r3, [r0, #48]	; 0x30
 8002096:	e7f9      	b.n	800208c <TIM_Base_SetConfig+0xb8>
 8002098:	40010000 	.word	0x40010000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40014000 	.word	0x40014000

080020a4 <HAL_TIM_Base_Init>:
{ 
 80020a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80020a6:	4604      	mov	r4, r0
 80020a8:	b1a0      	cbz	r0, 80020d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80020aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b2:	b91b      	cbnz	r3, 80020bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020b8:	f002 fa84 	bl	80045c4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80020bc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80020be:	6820      	ldr	r0, [r4, #0]
 80020c0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80020c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80020c6:	f7ff ff85 	bl	8001fd4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020ca:	2301      	movs	r3, #1
  return HAL_OK;
 80020cc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80020ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
}
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <HAL_TIM_IC_Init>:
{
 80020d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80020da:	4604      	mov	r4, r0
 80020dc:	b1a0      	cbz	r0, 8002108 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80020de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020e6:	b91b      	cbnz	r3, 80020f0 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;   
 80020e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80020ec:	f7ff febd 	bl	8001e6a <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 80020f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80020f2:	6820      	ldr	r0, [r4, #0]
 80020f4:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;   
 80020f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80020fa:	f7ff ff6b 	bl	8001fd4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020fe:	2301      	movs	r3, #1
  return HAL_OK;
 8002100:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002106:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002108:	2001      	movs	r0, #1
}
 800210a:	bd10      	pop	{r4, pc}

0800210c <TIM_TI1_SetConfig>:
{
 800210c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800210e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002110:	4e1a      	ldr	r6, [pc, #104]	; (800217c <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002112:	f024 0401 	bic.w	r4, r4, #1
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002116:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002118:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800211c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800211e:	d01a      	beq.n	8002156 <TIM_TI1_SetConfig+0x4a>
 8002120:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002124:	d017      	beq.n	8002156 <TIM_TI1_SetConfig+0x4a>
 8002126:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800212a:	42b0      	cmp	r0, r6
 800212c:	d013      	beq.n	8002156 <TIM_TI1_SetConfig+0x4a>
 800212e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002132:	42b0      	cmp	r0, r6
 8002134:	d00f      	beq.n	8002156 <TIM_TI1_SetConfig+0x4a>
 8002136:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800213a:	42b0      	cmp	r0, r6
 800213c:	d00b      	beq.n	8002156 <TIM_TI1_SetConfig+0x4a>
 800213e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002142:	42b0      	cmp	r0, r6
 8002144:	d007      	beq.n	8002156 <TIM_TI1_SetConfig+0x4a>
 8002146:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800214a:	42b0      	cmp	r0, r6
 800214c:	d003      	beq.n	8002156 <TIM_TI1_SetConfig+0x4a>
 800214e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002152:	42b0      	cmp	r0, r6
 8002154:	d10f      	bne.n	8002176 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002156:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800215a:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 800215c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800215e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002162:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002166:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 800216a:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800216c:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 800216e:	431a      	orrs	r2, r3
  TIMx->CCMR1 = tmpccmr1;
 8002170:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002172:	6201      	str	r1, [r0, #32]
}
 8002174:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002176:	f044 0201 	orr.w	r2, r4, #1
 800217a:	e7ef      	b.n	800215c <TIM_TI1_SetConfig+0x50>
 800217c:	40010000 	.word	0x40010000

08002180 <HAL_TIM_IC_ConfigChannel>:
{
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002182:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002186:	4604      	mov	r4, r0
 8002188:	460d      	mov	r5, r1
 800218a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800218c:	2b01      	cmp	r3, #1
 800218e:	d019      	beq.n	80021c4 <HAL_TIM_IC_ConfigChannel+0x44>
 8002190:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002192:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002196:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800219a:	b9a2      	cbnz	r2, 80021c6 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI1_SetConfig(htim->Instance,
 800219c:	68cb      	ldr	r3, [r1, #12]
 800219e:	6820      	ldr	r0, [r4, #0]
 80021a0:	c906      	ldmia	r1, {r1, r2}
 80021a2:	f7ff ffb3 	bl	800210c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80021a6:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80021a8:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	f022 020c 	bic.w	r2, r2, #12
 80021b0:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80021b8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80021ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80021c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80021c6:	2a04      	cmp	r2, #4
 80021c8:	688e      	ldr	r6, [r1, #8]
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	68e8      	ldr	r0, [r5, #12]
 80021ce:	c982      	ldmia	r1, {r1, r7}
 80021d0:	d11f      	bne.n	8002212 <HAL_TIM_IC_ConfigChannel+0x92>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80021d4:	0300      	lsls	r0, r0, #12
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021d6:	0109      	lsls	r1, r1, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d8:	f022 0210 	bic.w	r2, r2, #16
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80021dc:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021de:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021e4:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80021e6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80021e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 80021ec:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021f0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80021f4:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021f6:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021fa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80021fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021fe:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002206:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800220e:	619e      	str	r6, [r3, #24]
 8002210:	e7d2      	b.n	80021b8 <HAL_TIM_IC_ConfigChannel+0x38>
  else if (Channel == TIM_CHANNEL_3)
 8002212:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002214:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002216:	d11c      	bne.n	8002252 <HAL_TIM_IC_ConfigChannel+0xd2>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800221c:	0100      	lsls	r0, r0, #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800221e:	0209      	lsls	r1, r1, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002220:	621a      	str	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002222:	b2c0      	uxtb	r0, r0
  tmpccmr2 = TIMx->CCMR2;
 8002224:	69da      	ldr	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002226:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer = TIMx->CCER;
 800222a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800222c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8002230:	433a      	orrs	r2, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002232:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002236:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002238:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800223c:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800223e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002240:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002242:	69da      	ldr	r2, [r3, #28]
 8002244:	f022 020c 	bic.w	r2, r2, #12
 8002248:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800224a:	69da      	ldr	r2, [r3, #28]
 800224c:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 800224e:	61de      	str	r6, [r3, #28]
 8002250:	e7b2      	b.n	80021b8 <HAL_TIM_IC_ConfigChannel+0x38>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002256:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002258:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800225a:	621a      	str	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 800225c:	b280      	uxth	r0, r0
  tmpccmr2 = TIMx->CCMR2;
 800225e:	69da      	ldr	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002260:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer = TIMx->CCER;
 8002264:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002266:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8);
 800226a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800226e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002272:	4310      	orrs	r0, r2
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002274:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002278:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800227a:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800227c:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002284:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800228c:	e7df      	b.n	800224e <HAL_TIM_IC_ConfigChannel+0xce>

0800228e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800228e:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002290:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8002292:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002294:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002298:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800229c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800229e:	6083      	str	r3, [r0, #8]
 80022a0:	bd10      	pop	{r4, pc}
	...

080022a4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80022a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
{
 80022aa:	b510      	push	{r4, lr}
 80022ac:	4604      	mov	r4, r0
 80022ae:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80022b2:	d018      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022b8:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80022ba:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80022bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80022c0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022c2:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <HAL_TIM_ConfigClockSource+0x118>)
 80022c4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80022c6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80022c8:	680b      	ldr	r3, [r1, #0]
 80022ca:	2b40      	cmp	r3, #64	; 0x40
 80022cc:	d059      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0xde>
 80022ce:	d815      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x58>
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d067      	beq.n	80023a4 <HAL_TIM_ConfigClockSource+0x100>
 80022d4:	d808      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x44>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d05e      	beq.n	8002398 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 80022da:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80022dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80022de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022e2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80022e6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d061      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x10c>
 80022ec:	2b30      	cmp	r3, #48	; 0x30
 80022ee:	d1f4      	bne.n	80022da <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 80022f0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022f6:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80022fa:	e026      	b.n	800234a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80022fc:	2b70      	cmp	r3, #112	; 0x70
 80022fe:	d026      	beq.n	800234e <HAL_TIM_ConfigClockSource+0xaa>
 8002300:	d80e      	bhi.n	8002320 <HAL_TIM_ConfigClockSource+0x7c>
 8002302:	2b50      	cmp	r3, #80	; 0x50
 8002304:	d032      	beq.n	800236c <HAL_TIM_ConfigClockSource+0xc8>
 8002306:	2b60      	cmp	r3, #96	; 0x60
 8002308:	d1e7      	bne.n	80022da <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800230a:	68ca      	ldr	r2, [r1, #12]
 800230c:	6849      	ldr	r1, [r1, #4]
 800230e:	f7ff fd8f 	bl	8001e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002312:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002314:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800231a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800231e:	e023      	b.n	8002368 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002324:	d00c      	beq.n	8002340 <HAL_TIM_ConfigClockSource+0x9c>
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232a:	d1d6      	bne.n	80022da <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800232c:	68cb      	ldr	r3, [r1, #12]
 800232e:	684a      	ldr	r2, [r1, #4]
 8002330:	6889      	ldr	r1, [r1, #8]
 8002332:	f7ff ffac 	bl	800228e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	6893      	ldr	r3, [r2, #8]
 800233a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233e:	e013      	b.n	8002368 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002340:	6883      	ldr	r3, [r0, #8]
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800234a:	6083      	str	r3, [r0, #8]
 800234c:	e7c5      	b.n	80022da <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800234e:	68cb      	ldr	r3, [r1, #12]
 8002350:	684a      	ldr	r2, [r1, #4]
 8002352:	6889      	ldr	r1, [r1, #8]
 8002354:	f7ff ff9b 	bl	800228e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002368:	6093      	str	r3, [r2, #8]
    break;
 800236a:	e7b6      	b.n	80022da <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800236c:	68ca      	ldr	r2, [r1, #12]
 800236e:	6849      	ldr	r1, [r1, #4]
 8002370:	f7ff fd4d 	bl	8001e0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002374:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002376:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800237c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002380:	e7f2      	b.n	8002368 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002382:	68ca      	ldr	r2, [r1, #12]
 8002384:	6849      	ldr	r1, [r1, #4]
 8002386:	f7ff fd42 	bl	8001e0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800238a:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800238c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002392:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002396:	e7e7      	b.n	8002368 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8002398:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800239e:	f043 0307 	orr.w	r3, r3, #7
 80023a2:	e7d2      	b.n	800234a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80023a4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80023aa:	f043 0317 	orr.w	r3, r3, #23
 80023ae:	e7cc      	b.n	800234a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80023b0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80023b6:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80023ba:	e7c6      	b.n	800234a <HAL_TIM_ConfigClockSource+0xa6>
 80023bc:	fffe0088 	.word	0xfffe0088

080023c0 <HAL_TIM_SlaveConfigSynchronization>:
{
 80023c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80023c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80023c6:	4604      	mov	r4, r0
 80023c8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d01e      	beq.n	800240c <HAL_TIM_SlaveConfigSynchronization+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 80023ce:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80023d2:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80023d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80023da:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023dc:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023e2:	680d      	ldr	r5, [r1, #0]
  switch (sSlaveConfig->InputTrigger)
 80023e4:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023e6:	ea43 0302 	orr.w	r3, r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023f2:	ea43 0305 	orr.w	r3, r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80023f6:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80023f8:	d021      	beq.n	800243e <HAL_TIM_SlaveConfigSynchronization+0x7e>
 80023fa:	d808      	bhi.n	800240e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 80023fc:	2a40      	cmp	r2, #64	; 0x40
 80023fe:	d010      	beq.n	8002422 <HAL_TIM_SlaveConfigSynchronization+0x62>
  htim->State = HAL_TIM_STATE_READY;
 8002400:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);  
 8002402:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002404:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 8002408:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
} 
 800240c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800240e:	2a60      	cmp	r2, #96	; 0x60
 8002410:	d01a      	beq.n	8002448 <HAL_TIM_SlaveConfigSynchronization+0x88>
 8002412:	2a70      	cmp	r2, #112	; 0x70
 8002414:	d1f4      	bne.n	8002400 <HAL_TIM_SlaveConfigSynchronization+0x40>
      TIM_ETR_SetConfig(htim->Instance, 
 8002416:	690b      	ldr	r3, [r1, #16]
 8002418:	688a      	ldr	r2, [r1, #8]
 800241a:	68c9      	ldr	r1, [r1, #12]
 800241c:	f7ff ff37 	bl	800228e <TIM_ETR_SetConfig>
    break;
 8002420:	e7ee      	b.n	8002400 <HAL_TIM_SlaveConfigSynchronization+0x40>
      tmpccer = htim->Instance->CCER;
 8002422:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002424:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 8002426:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800242e:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 8002434:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002438:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;                               
 800243a:	6202      	str	r2, [r0, #32]
    break;
 800243c:	e7e0      	b.n	8002400 <HAL_TIM_SlaveConfigSynchronization+0x40>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800243e:	690a      	ldr	r2, [r1, #16]
 8002440:	6889      	ldr	r1, [r1, #8]
 8002442:	f7ff fce4 	bl	8001e0e <TIM_TI1_ConfigInputStage>
    break;
 8002446:	e7db      	b.n	8002400 <HAL_TIM_SlaveConfigSynchronization+0x40>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002448:	690a      	ldr	r2, [r1, #16]
 800244a:	6889      	ldr	r1, [r1, #8]
 800244c:	f7ff fcf0 	bl	8001e30 <TIM_TI2_ConfigInputStage>
    break;
 8002450:	e7d6      	b.n	8002400 <HAL_TIM_SlaveConfigSynchronization+0x40>

08002452 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002452:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002454:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002456:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002458:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 800245a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800245c:	ea23 0304 	bic.w	r3, r3, r4
 8002460:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002462:	6a03      	ldr	r3, [r0, #32]
 8002464:	431a      	orrs	r2, r3
 8002466:	6202      	str	r2, [r0, #32]
 8002468:	bd10      	pop	{r4, pc}

0800246a <HAL_TIM_IC_Start>:
{
 800246a:	b510      	push	{r4, lr}
 800246c:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800246e:	2201      	movs	r2, #1
 8002470:	6800      	ldr	r0, [r0, #0]
 8002472:	f7ff ffee 	bl	8002452 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002476:	6822      	ldr	r2, [r4, #0]
} 
 8002478:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);  
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6013      	str	r3, [r2, #0]
} 
 8002482:	bd10      	pop	{r4, pc}

08002484 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002484:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002488:	2b01      	cmp	r3, #1
{
 800248a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800248c:	d01c      	beq.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800248e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002490:	4d0e      	ldr	r5, [pc, #56]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8002492:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002494:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8002496:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002498:	d003      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800249a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800249e:	42aa      	cmp	r2, r5
 80024a0:	d103      	bne.n	80024aa <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024a6:	684d      	ldr	r5, [r1, #4]
 80024a8:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024aa:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80024ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024b0:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80024b2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024b6:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024b8:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ba:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80024bc:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80024be:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80024c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80024c8:	2002      	movs	r0, #2
} 
 80024ca:	bd30      	pop	{r4, r5, pc}
 80024cc:	40010000 	.word	0x40010000

080024d0 <HAL_TIMEx_CommutationCallback>:
 80024d0:	4770      	bx	lr

080024d2 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d2:	4770      	bx	lr

080024d4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d4:	6803      	ldr	r3, [r0, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024e6:	2320      	movs	r3, #32
 80024e8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_UART_Transmit_DMA>:
{
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4604      	mov	r4, r0
 80024f4:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80024f6:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80024fa:	2a20      	cmp	r2, #32
 80024fc:	d12b      	bne.n	8002556 <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 80024fe:	b341      	cbz	r1, 8002552 <HAL_UART_Transmit_DMA+0x62>
 8002500:	b33b      	cbz	r3, 8002552 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8002502:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8002506:	2a01      	cmp	r2, #1
 8002508:	d025      	beq.n	8002556 <HAL_UART_Transmit_DMA+0x66>
 800250a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250c:	2500      	movs	r5, #0
    huart->TxXferCount = Size;
 800250e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 8002512:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002516:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800251a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 8002522:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 8002526:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002528:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800252a:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 800252c:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800252e:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_UART_Transmit_DMA+0x74>)
 8002532:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	3228      	adds	r2, #40	; 0x28
 8002538:	f7fd ffca 	bl	80004d0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8002540:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 8002542:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002544:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8002546:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800254a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800254e:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002550:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002552:	2001      	movs	r0, #1
 8002554:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002556:	2002      	movs	r0, #2
}
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	bf00      	nop
 800255c:	08002653 	.word	0x08002653
 8002560:	08002683 	.word	0x08002683
 8002564:	08002745 	.word	0x08002745

08002568 <HAL_UART_Receive_DMA>:
{
 8002568:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800256a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800256e:	2a20      	cmp	r2, #32
{
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8002574:	d133      	bne.n	80025de <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 8002576:	2900      	cmp	r1, #0
 8002578:	d02f      	beq.n	80025da <HAL_UART_Receive_DMA+0x72>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02d      	beq.n	80025da <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 800257e:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 8002582:	2a01      	cmp	r2, #1
 8002584:	d02b      	beq.n	80025de <HAL_UART_Receive_DMA+0x76>
 8002586:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	2500      	movs	r5, #0
    huart->pRxBuffPtr = pData;
 800258a:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 800258c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002590:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxXferSize = Size;
 8002594:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002598:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800259c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800259e:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80025a0:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025a2:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_UART_Receive_DMA+0x80>)
    huart->hdmarx->XferAbortCallback = NULL;
 80025a6:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025a8:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_UART_Receive_DMA+0x84>)
 80025ac:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80025ae:	460a      	mov	r2, r1
 80025b0:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80025b4:	f7fd ff8c 	bl	80004d0 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025b8:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80025ba:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    return HAL_OK;
 80025be:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c6:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d6:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80025de:	2002      	movs	r0, #2
}
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	bf00      	nop
 80025e4:	0800268f 	.word	0x0800268f
 80025e8:	08002739 	.word	0x08002739
 80025ec:	08002745 	.word	0x08002745

080025f0 <UART_WaitOnFlagUntilTimeout>:
{
 80025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f4:	9d06      	ldr	r5, [sp, #24]
 80025f6:	4604      	mov	r4, r0
 80025f8:	460f      	mov	r7, r1
 80025fa:	4616      	mov	r6, r2
 80025fc:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fe:	6821      	ldr	r1, [r4, #0]
 8002600:	69ca      	ldr	r2, [r1, #28]
 8002602:	ea37 0302 	bics.w	r3, r7, r2
 8002606:	bf0c      	ite	eq
 8002608:	2201      	moveq	r2, #1
 800260a:	2200      	movne	r2, #0
 800260c:	42b2      	cmp	r2, r6
 800260e:	d002      	beq.n	8002616 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002610:	2000      	movs	r0, #0
}
 8002612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002616:	1c6b      	adds	r3, r5, #1
 8002618:	d0f2      	beq.n	8002600 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800261a:	b99d      	cbnz	r5, 8002644 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800261c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800261e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002626:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002630:	2320      	movs	r3, #32
 8002632:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002636:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800263a:	2300      	movs	r3, #0
 800263c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002644:	f7fd fe20 	bl	8000288 <HAL_GetTick>
 8002648:	eba0 0008 	sub.w	r0, r0, r8
 800264c:	4285      	cmp	r5, r0
 800264e:	d8d6      	bhi.n	80025fe <UART_WaitOnFlagUntilTimeout+0xe>
 8002650:	e7e4      	b.n	800261c <UART_WaitOnFlagUntilTimeout+0x2c>

08002652 <UART_DMATransmitCplt>:
{
 8002652:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002654:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002656:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800265e:	d10b      	bne.n	8002678 <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0U;
 8002660:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002678:	4610      	mov	r0, r2
 800267a:	f001 f823 	bl	80036c4 <HAL_UART_TxCpltCallback>
 800267e:	bd08      	pop	{r3, pc}

08002680 <HAL_UART_TxHalfCpltCallback>:
 8002680:	4770      	bx	lr

08002682 <UART_DMATxHalfCplt>:
{
 8002682:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002684:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002686:	f7ff fffb 	bl	8002680 <HAL_UART_TxHalfCpltCallback>
 800268a:	bd08      	pop	{r3, pc}

0800268c <HAL_UART_RxCpltCallback>:
 800268c:	4770      	bx	lr

0800268e <UART_DMAReceiveCplt>:
{
 800268e:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002690:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002692:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800269a:	d111      	bne.n	80026c0 <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 800269c:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a0:	6813      	ldr	r3, [r2, #0]
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80026a8:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	f021 0101 	bic.w	r1, r1, #1
 80026b0:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80026b8:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80026ba:	2320      	movs	r3, #32
 80026bc:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
  HAL_UART_RxCpltCallback(huart);
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7ff ffe3 	bl	800268c <HAL_UART_RxCpltCallback>
 80026c6:	bd08      	pop	{r3, pc}

080026c8 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026c8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80026cc:	6802      	ldr	r2, [r0, #0]
 80026ce:	2b22      	cmp	r3, #34	; 0x22
{
 80026d0:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026d2:	d12a      	bne.n	800272a <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 80026d6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026e0:	d11d      	bne.n	800271e <UART_Receive_IT+0x56>
 80026e2:	6904      	ldr	r4, [r0, #16]
 80026e4:	b9dc      	cbnz	r4, 800271e <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80026e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e8:	4011      	ands	r1, r2
 80026ea:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 80026ee:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 80026f0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80026f4:	3c01      	subs	r4, #1
 80026f6:	b2a4      	uxth	r4, r4
 80026f8:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80026fc:	b96c      	cbnz	r4, 800271a <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fe:	6803      	ldr	r3, [r0, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002706:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002710:	2320      	movs	r3, #32
 8002712:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002716:	f7ff ffb9 	bl	800268c <HAL_UART_RxCpltCallback>
    return HAL_OK;
 800271a:	2000      	movs	r0, #0
}
 800271c:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800271e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002720:	1c5c      	adds	r4, r3, #1
 8002722:	4011      	ands	r1, r2
 8002724:	6544      	str	r4, [r0, #84]	; 0x54
 8002726:	7019      	strb	r1, [r3, #0]
 8002728:	e7e2      	b.n	80026f0 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800272a:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 800272c:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8002734:	bd10      	pop	{r4, pc}

08002736 <HAL_UART_RxHalfCpltCallback>:
 8002736:	4770      	bx	lr

08002738 <UART_DMARxHalfCplt>:
{
 8002738:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800273a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800273c:	f7ff fffb 	bl	8002736 <HAL_UART_RxHalfCpltCallback>
 8002740:	bd08      	pop	{r3, pc}

08002742 <HAL_UART_ErrorCallback>:
{
 8002742:	4770      	bx	lr

08002744 <UART_DMAError>:
{
 8002744:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002746:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800274e:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002752:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 8002756:	2b21      	cmp	r3, #33	; 0x21
 8002758:	d10a      	bne.n	8002770 <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800275a:	680b      	ldr	r3, [r1, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	0612      	lsls	r2, r2, #24
 8002760:	d506      	bpl.n	8002770 <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002768:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800276a:	2320      	movs	r3, #32
 800276c:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002770:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8002774:	2b22      	cmp	r3, #34	; 0x22
 8002776:	d106      	bne.n	8002786 <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8002778:	680b      	ldr	r3, [r1, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	065b      	lsls	r3, r3, #25
 800277e:	d502      	bpl.n	8002786 <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 8002780:	4608      	mov	r0, r1
 8002782:	f7ff fea7 	bl	80024d4 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8002786:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002788:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 800278a:	f043 0310 	orr.w	r3, r3, #16
 800278e:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002790:	f7ff ffd7 	bl	8002742 <HAL_UART_ErrorCallback>
 8002794:	bd08      	pop	{r3, pc}
	...

08002798 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002798:	6803      	ldr	r3, [r0, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800279c:	6819      	ldr	r1, [r3, #0]
{
 800279e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80027a0:	0716      	lsls	r6, r2, #28
{
 80027a2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a4:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80027a6:	d107      	bne.n	80027b8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a8:	0695      	lsls	r5, r2, #26
 80027aa:	d563      	bpl.n	8002874 <HAL_UART_IRQHandler+0xdc>
 80027ac:	068e      	lsls	r6, r1, #26
 80027ae:	d561      	bpl.n	8002874 <HAL_UART_IRQHandler+0xdc>
}
 80027b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80027b4:	f7ff bf88 	b.w	80026c8 <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80027b8:	f015 0001 	ands.w	r0, r5, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80027be:	f411 7f90 	tst.w	r1, #288	; 0x120
 80027c2:	d057      	beq.n	8002874 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c4:	07d5      	lsls	r5, r2, #31
 80027c6:	d507      	bpl.n	80027d8 <HAL_UART_IRQHandler+0x40>
 80027c8:	05ce      	lsls	r6, r1, #23
 80027ca:	d505      	bpl.n	80027d8 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80027cc:	2501      	movs	r5, #1
 80027ce:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027d0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80027d2:	f045 0501 	orr.w	r5, r5, #1
 80027d6:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d8:	0795      	lsls	r5, r2, #30
 80027da:	d506      	bpl.n	80027ea <HAL_UART_IRQHandler+0x52>
 80027dc:	b128      	cbz	r0, 80027ea <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80027de:	2502      	movs	r5, #2
 80027e0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027e2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80027e4:	f045 0504 	orr.w	r5, r5, #4
 80027e8:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ea:	0756      	lsls	r6, r2, #29
 80027ec:	d506      	bpl.n	80027fc <HAL_UART_IRQHandler+0x64>
 80027ee:	b128      	cbz	r0, 80027fc <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80027f0:	2504      	movs	r5, #4
 80027f2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027f4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80027f6:	f045 0502 	orr.w	r5, r5, #2
 80027fa:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80027fc:	0715      	lsls	r5, r2, #28
 80027fe:	d507      	bpl.n	8002810 <HAL_UART_IRQHandler+0x78>
 8002800:	068e      	lsls	r6, r1, #26
 8002802:	d400      	bmi.n	8002806 <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002804:	b120      	cbz	r0, 8002810 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002806:	2008      	movs	r0, #8
 8002808:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800280a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800280c:	4303      	orrs	r3, r0
 800280e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002810:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d06a      	beq.n	80028ec <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002816:	0695      	lsls	r5, r2, #26
 8002818:	d504      	bpl.n	8002824 <HAL_UART_IRQHandler+0x8c>
 800281a:	0688      	lsls	r0, r1, #26
 800281c:	d502      	bpl.n	8002824 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff ff52 	bl	80026c8 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002824:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8002826:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002828:	0719      	lsls	r1, r3, #28
 800282a:	d404      	bmi.n	8002836 <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002830:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002834:	d01a      	beq.n	800286c <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8002836:	f7ff fe4d 	bl	80024d4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	0652      	lsls	r2, r2, #25
 8002840:	d510      	bpl.n	8002864 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002842:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002844:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284a:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800284c:	b150      	cbz	r0, 8002864 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_UART_IRQHandler+0x158>)
 8002850:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002852:	f7fd fe7a 	bl	800054a <HAL_DMA_Abort_IT>
 8002856:	2800      	cmp	r0, #0
 8002858:	d048      	beq.n	80028ec <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800285a:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 800285c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002860:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002862:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002864:	4620      	mov	r0, r4
 8002866:	f7ff ff6c 	bl	8002742 <HAL_UART_ErrorCallback>
 800286a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800286c:	f7ff ff69 	bl	8002742 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002872:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002874:	0616      	lsls	r6, r2, #24
 8002876:	d52b      	bpl.n	80028d0 <HAL_UART_IRQHandler+0x138>
 8002878:	060d      	lsls	r5, r1, #24
 800287a:	d529      	bpl.n	80028d0 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800287c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8002880:	2a21      	cmp	r2, #33	; 0x21
 8002882:	d133      	bne.n	80028ec <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8002884:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002888:	b292      	uxth	r2, r2
 800288a:	b942      	cbnz	r2, 800289e <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002892:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289e:	68a2      	ldr	r2, [r4, #8]
 80028a0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80028a4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80028a6:	d10e      	bne.n	80028c6 <HAL_UART_IRQHandler+0x12e>
 80028a8:	6921      	ldr	r1, [r4, #16]
 80028aa:	b961      	cbnz	r1, 80028c6 <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028ac:	f832 1b02 	ldrh.w	r1, [r2], #2
 80028b0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80028b4:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80028b6:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 80028b8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80028c6:	1c51      	adds	r1, r2, #1
 80028c8:	64e1      	str	r1, [r4, #76]	; 0x4c
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
 80028ce:	e7f3      	b.n	80028b8 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028d0:	0650      	lsls	r0, r2, #25
 80028d2:	d50b      	bpl.n	80028ec <HAL_UART_IRQHandler+0x154>
 80028d4:	064a      	lsls	r2, r1, #25
 80028d6:	d509      	bpl.n	80028ec <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028d8:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80028da:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80028e2:	2320      	movs	r3, #32
 80028e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80028e8:	f000 feec 	bl	80036c4 <HAL_UART_TxCpltCallback>
 80028ec:	bd70      	pop	{r4, r5, r6, pc}
 80028ee:	bf00      	nop
 80028f0:	080028f5 	.word	0x080028f5

080028f4 <UART_DMAAbortOnError>:
{
 80028f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80028f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80028fe:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002902:	f7ff ff1e 	bl	8002742 <HAL_UART_ErrorCallback>
 8002906:	bd08      	pop	{r3, pc}

08002908 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	b538      	push	{r3, r4, r5, lr}
 800290a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800290c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800290e:	69c3      	ldr	r3, [r0, #28]
 8002910:	6921      	ldr	r1, [r4, #16]
 8002912:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002914:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002916:	430a      	orrs	r2, r1
 8002918:	6961      	ldr	r1, [r4, #20]
 800291a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800291c:	4993      	ldr	r1, [pc, #588]	; (8002b6c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800291e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002920:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002922:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002924:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002926:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002928:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292a:	686a      	ldr	r2, [r5, #4]
 800292c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002930:	430a      	orrs	r2, r1
 8002932:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002934:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002936:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002938:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800293a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800293e:	430a      	orrs	r2, r1
 8002940:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002942:	4a8b      	ldr	r2, [pc, #556]	; (8002b70 <UART_SetConfig+0x268>)
 8002944:	4295      	cmp	r5, r2
 8002946:	d119      	bne.n	800297c <UART_SetConfig+0x74>
 8002948:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800294c:	4989      	ldr	r1, [pc, #548]	; (8002b74 <UART_SetConfig+0x26c>)
 800294e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002952:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800295a:	5c8a      	ldrb	r2, [r1, r2]
 800295c:	f040 80b3 	bne.w	8002ac6 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8002960:	2a08      	cmp	r2, #8
 8002962:	f200 80ad 	bhi.w	8002ac0 <UART_SetConfig+0x1b8>
 8002966:	e8df f012 	tbh	[pc, r2, lsl #1]
 800296a:	0026      	.short	0x0026
 800296c:	00e9007b 	.word	0x00e9007b
 8002970:	00f500ab 	.word	0x00f500ab
 8002974:	00ab00ab 	.word	0x00ab00ab
 8002978:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 800297c:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <UART_SetConfig+0x270>)
 800297e:	4295      	cmp	r5, r2
 8002980:	d107      	bne.n	8002992 <UART_SetConfig+0x8a>
 8002982:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002986:	497d      	ldr	r1, [pc, #500]	; (8002b7c <UART_SetConfig+0x274>)
 8002988:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800298c:	f002 020c 	and.w	r2, r2, #12
 8002990:	e7e1      	b.n	8002956 <UART_SetConfig+0x4e>
 8002992:	4a7b      	ldr	r2, [pc, #492]	; (8002b80 <UART_SetConfig+0x278>)
 8002994:	4295      	cmp	r5, r2
 8002996:	d12b      	bne.n	80029f0 <UART_SetConfig+0xe8>
 8002998:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 800299c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029a0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80029a4:	2a10      	cmp	r2, #16
 80029a6:	f000 80d2 	beq.w	8002b4e <UART_SetConfig+0x246>
 80029aa:	d816      	bhi.n	80029da <UART_SetConfig+0xd2>
 80029ac:	b9da      	cbnz	r2, 80029e6 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b2:	f040 809f 	bne.w	8002af4 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029b6:	f7fe ff07 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029ba:	6861      	ldr	r1, [r4, #4]
 80029bc:	084a      	lsrs	r2, r1, #1
 80029be:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c8:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80029ca:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ce:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80029d2:	6821      	ldr	r1, [r4, #0]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60cb      	str	r3, [r1, #12]
 80029d8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029da:	2a20      	cmp	r2, #32
 80029dc:	f000 80ab 	beq.w	8002b36 <UART_SetConfig+0x22e>
 80029e0:	2a30      	cmp	r2, #48	; 0x30
 80029e2:	f000 80ba 	beq.w	8002b5a <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ea:	d069      	beq.n	8002ac0 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029f0:	4a64      	ldr	r2, [pc, #400]	; (8002b84 <UART_SetConfig+0x27c>)
 80029f2:	4295      	cmp	r5, r2
 80029f4:	d10e      	bne.n	8002a14 <UART_SetConfig+0x10c>
 80029f6:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80029fa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029fe:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002a02:	2a40      	cmp	r2, #64	; 0x40
 8002a04:	f000 80a3 	beq.w	8002b4e <UART_SetConfig+0x246>
 8002a08:	d9d0      	bls.n	80029ac <UART_SetConfig+0xa4>
 8002a0a:	2a80      	cmp	r2, #128	; 0x80
 8002a0c:	f000 8093 	beq.w	8002b36 <UART_SetConfig+0x22e>
 8002a10:	2ac0      	cmp	r2, #192	; 0xc0
 8002a12:	e7e6      	b.n	80029e2 <UART_SetConfig+0xda>
 8002a14:	4a5c      	ldr	r2, [pc, #368]	; (8002b88 <UART_SetConfig+0x280>)
 8002a16:	4295      	cmp	r5, r2
 8002a18:	d110      	bne.n	8002a3c <UART_SetConfig+0x134>
 8002a1a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002a1e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a22:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a26:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002a2a:	f000 8090 	beq.w	8002b4e <UART_SetConfig+0x246>
 8002a2e:	d9bd      	bls.n	80029ac <UART_SetConfig+0xa4>
 8002a30:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002a34:	d07f      	beq.n	8002b36 <UART_SetConfig+0x22e>
 8002a36:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002a3a:	e7d2      	b.n	80029e2 <UART_SetConfig+0xda>
 8002a3c:	4a53      	ldr	r2, [pc, #332]	; (8002b8c <UART_SetConfig+0x284>)
 8002a3e:	4295      	cmp	r5, r2
 8002a40:	d117      	bne.n	8002a72 <UART_SetConfig+0x16a>
 8002a42:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002a46:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a4a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002a4e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002a52:	d07c      	beq.n	8002b4e <UART_SetConfig+0x246>
 8002a54:	d807      	bhi.n	8002a66 <UART_SetConfig+0x15e>
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d1c5      	bne.n	80029e6 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5e:	d154      	bne.n	8002b0a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a60:	f7fe fec2 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8002a64:	e7a9      	b.n	80029ba <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a66:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002a6a:	d064      	beq.n	8002b36 <UART_SetConfig+0x22e>
 8002a6c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002a70:	e7b7      	b.n	80029e2 <UART_SetConfig+0xda>
 8002a72:	4a47      	ldr	r2, [pc, #284]	; (8002b90 <UART_SetConfig+0x288>)
 8002a74:	4295      	cmp	r5, r2
 8002a76:	d10f      	bne.n	8002a98 <UART_SetConfig+0x190>
 8002a78:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002a7c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a80:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002a84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002a88:	d061      	beq.n	8002b4e <UART_SetConfig+0x246>
 8002a8a:	d98f      	bls.n	80029ac <UART_SetConfig+0xa4>
 8002a8c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002a90:	d051      	beq.n	8002b36 <UART_SetConfig+0x22e>
 8002a92:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002a96:	e7a4      	b.n	80029e2 <UART_SetConfig+0xda>
 8002a98:	4a3e      	ldr	r2, [pc, #248]	; (8002b94 <UART_SetConfig+0x28c>)
 8002a9a:	4295      	cmp	r5, r2
 8002a9c:	d1a3      	bne.n	80029e6 <UART_SetConfig+0xde>
 8002a9e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002aa2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002aa6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002aaa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002aae:	d04e      	beq.n	8002b4e <UART_SetConfig+0x246>
 8002ab0:	f67f af7c 	bls.w	80029ac <UART_SetConfig+0xa4>
 8002ab4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ab8:	d03d      	beq.n	8002b36 <UART_SetConfig+0x22e>
 8002aba:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002abe:	e790      	b.n	80029e2 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e781      	b.n	80029ca <UART_SetConfig+0xc2>
    switch (clocksource)
 8002ac6:	2a08      	cmp	r2, #8
 8002ac8:	d890      	bhi.n	80029ec <UART_SetConfig+0xe4>
 8002aca:	a301      	add	r3, pc, #4	; (adr r3, 8002ad0 <UART_SetConfig+0x1c8>)
 8002acc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002ad0:	08002af5 	.word	0x08002af5
 8002ad4:	08002b0b 	.word	0x08002b0b
 8002ad8:	08002b11 	.word	0x08002b11
 8002adc:	080029ed 	.word	0x080029ed
 8002ae0:	08002b27 	.word	0x08002b27
 8002ae4:	080029ed 	.word	0x080029ed
 8002ae8:	080029ed 	.word	0x080029ed
 8002aec:	080029ed 	.word	0x080029ed
 8002af0:	08002b2d 	.word	0x08002b2d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002af4:	f7fe fe68 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002afe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b02:	b280      	uxth	r0, r0
 8002b04:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b06:	2000      	movs	r0, #0
      break;
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b0a:	f7fe fe6d 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8002b0e:	e7f3      	b.n	8002af8 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b10:	6862      	ldr	r2, [r4, #4]
 8002b12:	0853      	lsrs	r3, r2, #1
 8002b14:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b18:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	60eb      	str	r3, [r5, #12]
 8002b24:	e7ef      	b.n	8002b06 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b26:	f7fe fd8f 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8002b2a:	e7e5      	b.n	8002af8 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b2c:	6862      	ldr	r2, [r4, #4]
 8002b2e:	0853      	lsrs	r3, r2, #1
 8002b30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b34:	e7f2      	b.n	8002b1c <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3a:	d1e9      	bne.n	8002b10 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b3c:	6860      	ldr	r0, [r4, #4]
 8002b3e:	0843      	lsrs	r3, r0, #1
 8002b40:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002b44:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b48:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b4c:	e73b      	b.n	80029c6 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b52:	d1e8      	bne.n	8002b26 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b54:	f7fe fd78 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8002b58:	e72f      	b.n	80029ba <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5e:	d1e5      	bne.n	8002b2c <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b60:	6860      	ldr	r0, [r4, #4]
 8002b62:	0843      	lsrs	r3, r0, #1
 8002b64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002b68:	e7ee      	b.n	8002b48 <UART_SetConfig+0x240>
 8002b6a:	bf00      	nop
 8002b6c:	efff69f3 	.word	0xefff69f3
 8002b70:	40011000 	.word	0x40011000
 8002b74:	080056b4 	.word	0x080056b4
 8002b78:	40004400 	.word	0x40004400
 8002b7c:	080056b8 	.word	0x080056b8
 8002b80:	40004800 	.word	0x40004800
 8002b84:	40004c00 	.word	0x40004c00
 8002b88:	40005000 	.word	0x40005000
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	40007800 	.word	0x40007800
 8002b94:	40007c00 	.word	0x40007c00

08002b98 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b9a:	07da      	lsls	r2, r3, #31
{
 8002b9c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b9e:	d506      	bpl.n	8002bae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ba0:	6801      	ldr	r1, [r0, #0]
 8002ba2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ba4:	684a      	ldr	r2, [r1, #4]
 8002ba6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002baa:	4322      	orrs	r2, r4
 8002bac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bae:	079c      	lsls	r4, r3, #30
 8002bb0:	d506      	bpl.n	8002bc0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bb2:	6801      	ldr	r1, [r0, #0]
 8002bb4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002bb6:	684a      	ldr	r2, [r1, #4]
 8002bb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bbc:	4322      	orrs	r2, r4
 8002bbe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc0:	0759      	lsls	r1, r3, #29
 8002bc2:	d506      	bpl.n	8002bd2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bc4:	6801      	ldr	r1, [r0, #0]
 8002bc6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002bc8:	684a      	ldr	r2, [r1, #4]
 8002bca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bce:	4322      	orrs	r2, r4
 8002bd0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bd2:	071a      	lsls	r2, r3, #28
 8002bd4:	d506      	bpl.n	8002be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bd6:	6801      	ldr	r1, [r0, #0]
 8002bd8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002bda:	684a      	ldr	r2, [r1, #4]
 8002bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be0:	4322      	orrs	r2, r4
 8002be2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be4:	06dc      	lsls	r4, r3, #27
 8002be6:	d506      	bpl.n	8002bf6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002be8:	6801      	ldr	r1, [r0, #0]
 8002bea:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002bec:	688a      	ldr	r2, [r1, #8]
 8002bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bf2:	4322      	orrs	r2, r4
 8002bf4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bf6:	0699      	lsls	r1, r3, #26
 8002bf8:	d506      	bpl.n	8002c08 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bfa:	6801      	ldr	r1, [r0, #0]
 8002bfc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002bfe:	688a      	ldr	r2, [r1, #8]
 8002c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c04:	4322      	orrs	r2, r4
 8002c06:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c08:	065a      	lsls	r2, r3, #25
 8002c0a:	d510      	bpl.n	8002c2e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c0c:	6801      	ldr	r1, [r0, #0]
 8002c0e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002c10:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c12:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c16:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002c1a:	ea42 0204 	orr.w	r2, r2, r4
 8002c1e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c20:	d105      	bne.n	8002c2e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c22:	684a      	ldr	r2, [r1, #4]
 8002c24:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c26:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002c2a:	4322      	orrs	r2, r4
 8002c2c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	d506      	bpl.n	8002c40 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c32:	6802      	ldr	r2, [r0, #0]
 8002c34:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002c36:	6853      	ldr	r3, [r2, #4]
 8002c38:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6053      	str	r3, [r2, #4]
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	2500      	movs	r5, #0
{
 8002c46:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c4a:	f7fd fb1d 	bl	8000288 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c4e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002c50:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	0712      	lsls	r2, r2, #28
 8002c56:	d409      	bmi.n	8002c6c <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002c58:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c5a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002c5c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002c60:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002c64:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002c68:	b003      	add	sp, #12
 8002c6a:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002c70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c74:	4620      	mov	r0, r4
 8002c76:	9200      	str	r2, [sp, #0]
 8002c78:	462a      	mov	r2, r5
 8002c7a:	f7ff fcb9 	bl	80025f0 <UART_WaitOnFlagUntilTimeout>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0ea      	beq.n	8002c58 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002c82:	2003      	movs	r0, #3
 8002c84:	e7f0      	b.n	8002c68 <UART_CheckIdleState+0x26>

08002c86 <HAL_UART_Init>:
{
 8002c86:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002c88:	4604      	mov	r4, r0
 8002c8a:	b360      	cbz	r0, 8002ce6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c8c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c94:	b91b      	cbnz	r3, 8002c9e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c96:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002c9a:	f001 fced 	bl	8004678 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c9e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ca0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002ca4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb0:	f7ff fe2a 	bl	8002908 <UART_SetConfig>
 8002cb4:	2801      	cmp	r0, #1
 8002cb6:	d016      	beq.n	8002ce6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cba:	b113      	cbz	r3, 8002cc2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff ff6b 	bl	8002b98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002cc4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ccc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
}
 8002cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002ce0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002ce2:	f7ff bfae 	b.w	8002c42 <UART_CheckIdleState>
}
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	bd10      	pop	{r4, pc}
	...

08002cec <HAL_Configuration_Reload>:

void HAL_Configuration_Reload(void)
{
	for(uint32_t index=0; index<CONFIGURATION_DATA_COUNT; ++index )
	{
		configuration_data[index] = _configuration_data_flash_address[index];
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_Configuration_Reload+0x18>)
 8002cee:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <HAL_Configuration_Reload+0x1c>)
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	18c1      	adds	r1, r0, r3
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	6809      	ldr	r1, [r1, #0]
	for(uint32_t index=0; index<CONFIGURATION_DATA_COUNT; ++index )
 8002cfa:	2b60      	cmp	r3, #96	; 0x60
		configuration_data[index] = _configuration_data_flash_address[index];
 8002cfc:	f842 1b04 	str.w	r1, [r2], #4
	for(uint32_t index=0; index<CONFIGURATION_DATA_COUNT; ++index )
 8002d00:	d1f8      	bne.n	8002cf4 <HAL_Configuration_Reload+0x8>
	}
}
 8002d02:	4770      	bx	lr
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20001d88 	.word	0x20001d88

08002d0c <HAL_Configuration_Save>:

void HAL_Configuration_Save(void)
{
 8002d0c:	b570      	push	{r4, r5, r6, lr}
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(&_configuration_data_flash_address[index]),*(uint32_t*)&configuration_data[index]);
	}
#endif
#ifdef STM32F767xx
	FLASH_EraseInitTypeDef erase = {FLASH_TYPEERASE_SECTORS,0,FLASH_SECTOR_7,1,FLASH_VOLTAGE_RANGE_3};
 8002d0e:	4d10      	ldr	r5, [pc, #64]	; (8002d50 <HAL_Configuration_Save+0x44>)
{
 8002d10:	b086      	sub	sp, #24
	HAL_FLASH_Unlock();
 8002d12:	f7fd fd6d 	bl	80007f0 <HAL_FLASH_Unlock>
	uint32_t error = 0;
	HAL_FLASHEx_Erase(&erase,&error);
	for(size_t index=0; index<CONFIGURATION_DATA_COUNT; ++index )
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(&_configuration_data_flash_address[index]),*(uint32_t*)&configuration_data[index]);
 8002d16:	4e0f      	ldr	r6, [pc, #60]	; (8002d54 <HAL_Configuration_Save+0x48>)
	FLASH_EraseInitTypeDef erase = {FLASH_TYPEERASE_SECTORS,0,FLASH_SECTOR_7,1,FLASH_VOLTAGE_RANGE_3};
 8002d18:	ac01      	add	r4, sp, #4
 8002d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d1e:	682b      	ldr	r3, [r5, #0]
	uint32_t error = 0;
 8002d20:	a906      	add	r1, sp, #24
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(&_configuration_data_flash_address[index]),*(uint32_t*)&configuration_data[index]);
 8002d22:	4d0d      	ldr	r5, [pc, #52]	; (8002d58 <HAL_Configuration_Save+0x4c>)
	HAL_FLASHEx_Erase(&erase,&error);
 8002d24:	a801      	add	r0, sp, #4
	FLASH_EraseInitTypeDef erase = {FLASH_TYPEERASE_SECTORS,0,FLASH_SECTOR_7,1,FLASH_VOLTAGE_RANGE_3};
 8002d26:	6023      	str	r3, [r4, #0]
	uint32_t error = 0;
 8002d28:	2400      	movs	r4, #0
 8002d2a:	f841 4d18 	str.w	r4, [r1, #-24]!
	HAL_FLASHEx_Erase(&erase,&error);
 8002d2e:	f7fd fe2f 	bl	8000990 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(&_configuration_data_flash_address[index]),*(uint32_t*)&configuration_data[index]);
 8002d32:	6829      	ldr	r1, [r5, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	5932      	ldr	r2, [r6, r4]
 8002d38:	2002      	movs	r0, #2
 8002d3a:	4421      	add	r1, r4
 8002d3c:	3404      	adds	r4, #4
 8002d3e:	f7fd fd9f 	bl	8000880 <HAL_FLASH_Program>
	for(size_t index=0; index<CONFIGURATION_DATA_COUNT; ++index )
 8002d42:	2c60      	cmp	r4, #96	; 0x60
 8002d44:	d1f5      	bne.n	8002d32 <HAL_Configuration_Save+0x26>
	}
#endif
	HAL_FLASH_Lock();
 8002d46:	f7fd fd65 	bl	8000814 <HAL_FLASH_Lock>
}
 8002d4a:	b006      	add	sp, #24
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	bf00      	nop
 8002d50:	08005698 	.word	0x08005698
 8002d54:	20001d88 	.word	0x20001d88
 8002d58:	20000000 	.word	0x20000000

08002d5c <protocol_encode>:
int protocol_encode(
    unsigned char * buffer,
    unsigned char command,
    unsigned char const * data,
    unsigned char length )
{
 8002d5c:	b530      	push	{r4, r5, lr}
    if(length==command_length[command])
 8002d5e:	4c0b      	ldr	r4, [pc, #44]	; (8002d8c <protocol_encode+0x30>)
 8002d60:	5c64      	ldrb	r4, [r4, r1]
 8002d62:	429c      	cmp	r4, r3
 8002d64:	d10f      	bne.n	8002d86 <protocol_encode+0x2a>
    {
        *buffer++=protocol_som;
 8002d66:	23a5      	movs	r3, #165	; 0xa5
 8002d68:	4605      	mov	r5, r0
 8002d6a:	f805 3b02 	strb.w	r3, [r5], #2
        *buffer++=command;
        for(unsigned int i=0; i<length;++i)
 8002d6e:	2300      	movs	r3, #0
        *buffer++=command;
 8002d70:	7041      	strb	r1, [r0, #1]
        for(unsigned int i=0; i<length;++i)
 8002d72:	42a3      	cmp	r3, r4
 8002d74:	d303      	bcc.n	8002d7e <protocol_encode+0x22>
            *buffer++=data[i];
        *buffer++=protocol_eom;
 8002d76:	235a      	movs	r3, #90	; 0x5a
        return length+3;
 8002d78:	1ce0      	adds	r0, r4, #3
        *buffer++=protocol_eom;
 8002d7a:	552b      	strb	r3, [r5, r4]
        return length+3;
 8002d7c:	bd30      	pop	{r4, r5, pc}
            *buffer++=data[i];
 8002d7e:	5cd1      	ldrb	r1, [r2, r3]
 8002d80:	54e9      	strb	r1, [r5, r3]
        for(unsigned int i=0; i<length;++i)
 8002d82:	3301      	adds	r3, #1
 8002d84:	e7f5      	b.n	8002d72 <protocol_encode+0x16>
    }
    else
        return 0;
 8002d86:	2000      	movs	r0, #0
}
 8002d88:	bd30      	pop	{r4, r5, pc}
 8002d8a:	bf00      	nop
 8002d8c:	080056c5 	.word	0x080056c5

08002d90 <protocol_decode_data>:
static unsigned char decoded_data_buffer[128];

unsigned char * protocol_decode_data()
{
    return decoded_data_buffer;
};
 8002d90:	4800      	ldr	r0, [pc, #0]	; (8002d94 <protocol_decode_data+0x4>)
 8002d92:	4770      	bx	lr
 8002d94:	200003b4 	.word	0x200003b4

08002d98 <protocol_decode>:
{
    static int state = PROTOCOL_DECODE_IDLE;
    static int current_cmd = 0;
    static int remaining_data_bytes = 0;
    static int current_data_byte = 0;
    switch(state)
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <protocol_decode+0x6c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
{
 8002d9c:	b510      	push	{r4, lr}
    switch(state)
 8002d9e:	2a03      	cmp	r2, #3
 8002da0:	d805      	bhi.n	8002dae <protocol_decode+0x16>
 8002da2:	e8df f002 	tbb	[pc, r2]
 8002da6:	0a02      	.short	0x0a02
 8002da8:	271c      	.short	0x271c
    {
    case PROTOCOL_DECODE_IDLE:
        {
            if(input==protocol_som)
 8002daa:	28a5      	cmp	r0, #165	; 0xa5
 8002dac:	d002      	beq.n	8002db4 <protocol_decode+0x1c>
                state = PROTOCOL_DECODE_IDLE;
            }
        }
        break;
    }
    return -1;
 8002dae:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002db2:	bd10      	pop	{r4, pc}
                state = PROTOCOL_DECODE_SOM_DECODED;
 8002db4:	2201      	movs	r2, #1
                state = PROTOCOL_DECODE_IDLE;
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e7f9      	b.n	8002dae <protocol_decode+0x16>
            if(input<CMD_COUNT)
 8002dba:	2814      	cmp	r0, #20
 8002dbc:	d80d      	bhi.n	8002dda <protocol_decode+0x42>
                current_cmd = input;
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <protocol_decode+0x70>)
                remaining_data_bytes = command_length[input];
 8002dc0:	4912      	ldr	r1, [pc, #72]	; (8002e0c <protocol_decode+0x74>)
                current_cmd = input;
 8002dc2:	6010      	str	r0, [r2, #0]
                remaining_data_bytes = command_length[input];
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <protocol_decode+0x78>)
 8002dc6:	5c12      	ldrb	r2, [r2, r0]
                current_data_byte = 0;
 8002dc8:	2000      	movs	r0, #0
                remaining_data_bytes = command_length[input];
 8002dca:	600a      	str	r2, [r1, #0]
                current_data_byte = 0;
 8002dcc:	4911      	ldr	r1, [pc, #68]	; (8002e14 <protocol_decode+0x7c>)
 8002dce:	6008      	str	r0, [r1, #0]
                if(remaining_data_bytes==0)
 8002dd0:	b90a      	cbnz	r2, 8002dd6 <protocol_decode+0x3e>
                    state = PROTOCOL_DECODE_DATA_DECODED;
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	e7ef      	b.n	8002db6 <protocol_decode+0x1e>
                    state = PROTOCOL_DECODE_CMD_DECODED;
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	e7ed      	b.n	8002db6 <protocol_decode+0x1e>
                state = PROTOCOL_DECODE_IDLE;
 8002dda:	2200      	movs	r2, #0
 8002ddc:	e7eb      	b.n	8002db6 <protocol_decode+0x1e>
            decoded_data_buffer[current_data_byte]=input;
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <protocol_decode+0x7c>)
 8002de0:	4c0d      	ldr	r4, [pc, #52]	; (8002e18 <protocol_decode+0x80>)
 8002de2:	680a      	ldr	r2, [r1, #0]
 8002de4:	54a0      	strb	r0, [r4, r2]
            ++current_data_byte;
 8002de6:	3201      	adds	r2, #1
 8002de8:	600a      	str	r2, [r1, #0]
            if(current_data_byte==remaining_data_bytes)
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <protocol_decode+0x74>)
 8002dec:	6809      	ldr	r1, [r1, #0]
 8002dee:	428a      	cmp	r2, r1
 8002df0:	d1dd      	bne.n	8002dae <protocol_decode+0x16>
 8002df2:	e7ee      	b.n	8002dd2 <protocol_decode+0x3a>
            if(input==protocol_eom)
 8002df4:	285a      	cmp	r0, #90	; 0x5a
 8002df6:	d1f0      	bne.n	8002dda <protocol_decode+0x42>
                state = PROTOCOL_DECODE_IDLE;
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
                return current_cmd;
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <protocol_decode+0x70>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	bf00      	nop
 8002e04:	20000438 	.word	0x20000438
 8002e08:	200003ac 	.word	0x200003ac
 8002e0c:	20000434 	.word	0x20000434
 8002e10:	080056c5 	.word	0x080056c5
 8002e14:	200003b0 	.word	0x200003b0
 8002e18:	200003b4 	.word	0x200003b4

08002e1c <APP_Protocol_Interpreter_Process>:
static float tx_data_buffer[32];
uint8_t tx_protocol_buffer[128];
HAL_Serial_Handler com;

void APP_Protocol_Interpreter_Process()
{
 8002e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	  int len = HAL_Serial_Available(&com);
 8002e20:	4834      	ldr	r0, [pc, #208]	; (8002ef4 <APP_Protocol_Interpreter_Process+0xd8>)
 8002e22:	f000 fbfd 	bl	8003620 <HAL_Serial_Available>
	  if(len>0)
 8002e26:	f1b0 0900 	subs.w	r9, r0, #0
 8002e2a:	dd25      	ble.n	8002e78 <APP_Protocol_Interpreter_Process+0x5c>
 8002e2c:	2600      	movs	r6, #0
	  {
		  for(int index=0;index<len;++index)
		  {
			  int command = protocol_decode(HAL_Serial_GetChar(&com));
 8002e2e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8002ef4 <APP_Protocol_Interpreter_Process+0xd8>
							HAL_Delay(1);
					  }
					  break;
				  case CMD_QUERY_CONFIGURATION:
					  {
						tx_data_buffer[0]=configuration_data[IMU_PITCH_REF];
 8002e32:	4d31      	ldr	r5, [pc, #196]	; (8002ef8 <APP_Protocol_Interpreter_Process+0xdc>)
 8002e34:	4c31      	ldr	r4, [pc, #196]	; (8002efc <APP_Protocol_Interpreter_Process+0xe0>)
			  int command = protocol_decode(HAL_Serial_GetChar(&com));
 8002e36:	482f      	ldr	r0, [pc, #188]	; (8002ef4 <APP_Protocol_Interpreter_Process+0xd8>)
 8002e38:	f000 fc05 	bl	8003646 <HAL_Serial_GetChar>
 8002e3c:	f7ff ffac 	bl	8002d98 <protocol_decode>
			  if(command>0)
 8002e40:	1e07      	subs	r7, r0, #0
 8002e42:	dd16      	ble.n	8002e72 <APP_Protocol_Interpreter_Process+0x56>
				  int32_t const * ptr_data = (int32_t *)protocol_decode_data();
 8002e44:	f7ff ffa4 	bl	8002d90 <protocol_decode_data>
				  switch(command)
 8002e48:	2f10      	cmp	r7, #16
 8002e4a:	d017      	beq.n	8002e7c <APP_Protocol_Interpreter_Process+0x60>
 8002e4c:	2f12      	cmp	r7, #18
 8002e4e:	d037      	beq.n	8002ec0 <APP_Protocol_Interpreter_Process+0xa4>
 8002e50:	2f01      	cmp	r7, #1
 8002e52:	d10e      	bne.n	8002e72 <APP_Protocol_Interpreter_Process+0x56>
							int enc_ret = protocol_encode(
 8002e54:	2300      	movs	r3, #0
 8002e56:	2102      	movs	r1, #2
 8002e58:	4829      	ldr	r0, [pc, #164]	; (8002f00 <APP_Protocol_Interpreter_Process+0xe4>)
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f7ff ff7e 	bl	8002d5c <protocol_encode>
							if(enc_ret>0)
 8002e60:	1e02      	subs	r2, r0, #0
 8002e62:	dd03      	ble.n	8002e6c <APP_Protocol_Interpreter_Process+0x50>
								HAL_Serial_Write(&com, tx_protocol_buffer, enc_ret );
 8002e64:	4926      	ldr	r1, [pc, #152]	; (8002f00 <APP_Protocol_Interpreter_Process+0xe4>)
 8002e66:	4640      	mov	r0, r8
 8002e68:	f000 fc0a 	bl	8003680 <HAL_Serial_Write>
							HAL_Delay(1);
 8002e6c:	2001      	movs	r0, #1
								CMD_CONFIGURATION,
								(uint8_t const*)tx_data_buffer,
								4*21 );
						if(enc_ret>0)
							HAL_Serial_Write(&com, tx_protocol_buffer, enc_ret );
						HAL_Delay(3);
 8002e6e:	f7fd fa11 	bl	8000294 <HAL_Delay>
		  for(int index=0;index<len;++index)
 8002e72:	3601      	adds	r6, #1
 8002e74:	45b1      	cmp	r9, r6
 8002e76:	d1de      	bne.n	8002e36 <APP_Protocol_Interpreter_Process+0x1a>
 8002e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						tx_data_buffer[0]=configuration_data[IMU_PITCH_REF];
 8002e7c:	6823      	ldr	r3, [r4, #0]
						int enc_ret = protocol_encode(
 8002e7e:	2111      	movs	r1, #17
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <APP_Protocol_Interpreter_Process+0xdc>)
						tx_data_buffer[0]=configuration_data[IMU_PITCH_REF];
 8002e82:	602b      	str	r3, [r5, #0]
						tx_data_buffer[1]=configuration_data[CTRL_PKP];
 8002e84:	6b23      	ldr	r3, [r4, #48]	; 0x30
						int enc_ret = protocol_encode(
 8002e86:	481e      	ldr	r0, [pc, #120]	; (8002f00 <APP_Protocol_Interpreter_Process+0xe4>)
						tx_data_buffer[1]=configuration_data[CTRL_PKP];
 8002e88:	606b      	str	r3, [r5, #4]
						tx_data_buffer[2]=configuration_data[CTRL_PKI];
 8002e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e8c:	60ab      	str	r3, [r5, #8]
						tx_data_buffer[3]=configuration_data[CTRL_PKD];
 8002e8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e90:	60eb      	str	r3, [r5, #12]
						tx_data_buffer[4]=configuration_data[CTRL_XKP];
 8002e92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e94:	612b      	str	r3, [r5, #16]
						tx_data_buffer[5]=configuration_data[CTRL_XKI];
 8002e96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e98:	616b      	str	r3, [r5, #20]
						tx_data_buffer[6]=configuration_data[CTRL_XKD];
 8002e9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e9c:	61ab      	str	r3, [r5, #24]
						tx_data_buffer[7]=configuration_data[M_FILTER];
 8002e9e:	6a23      	ldr	r3, [r4, #32]
 8002ea0:	61eb      	str	r3, [r5, #28]
						tx_data_buffer[8]=configuration_data[CTRL_XFILTER];
 8002ea2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ea4:	622b      	str	r3, [r5, #32]
						tx_data_buffer[9]=configuration_data[CTRL_YFILTER];
 8002ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea8:	626b      	str	r3, [r5, #36]	; 0x24
						int enc_ret = protocol_encode(
 8002eaa:	2354      	movs	r3, #84	; 0x54
 8002eac:	f7ff ff56 	bl	8002d5c <protocol_encode>
						if(enc_ret>0)
 8002eb0:	1e02      	subs	r2, r0, #0
 8002eb2:	dd03      	ble.n	8002ebc <APP_Protocol_Interpreter_Process+0xa0>
							HAL_Serial_Write(&com, tx_protocol_buffer, enc_ret );
 8002eb4:	4912      	ldr	r1, [pc, #72]	; (8002f00 <APP_Protocol_Interpreter_Process+0xe4>)
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	f000 fbe2 	bl	8003680 <HAL_Serial_Write>
						HAL_Delay(3);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	e7d6      	b.n	8002e6e <APP_Protocol_Interpreter_Process+0x52>
					  }
					  break;
				  case CMD_SET_CONFIGURATION:
					  {
						  float const * ptr_data_f = (float const *)ptr_data;
						  configuration_data[IMU_PITCH_REF] = ptr_data_f[0];
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	6023      	str	r3, [r4, #0]
						  configuration_data[CTRL_PKP] = ptr_data_f[1];
 8002ec4:	6843      	ldr	r3, [r0, #4]
 8002ec6:	6323      	str	r3, [r4, #48]	; 0x30
						  configuration_data[CTRL_PKI] = ptr_data_f[2];
 8002ec8:	6883      	ldr	r3, [r0, #8]
 8002eca:	6363      	str	r3, [r4, #52]	; 0x34
						  configuration_data[CTRL_PKD] = ptr_data_f[3];
 8002ecc:	68c3      	ldr	r3, [r0, #12]
 8002ece:	63a3      	str	r3, [r4, #56]	; 0x38
						  configuration_data[CTRL_XKP] = ptr_data_f[4];
 8002ed0:	6903      	ldr	r3, [r0, #16]
 8002ed2:	64a3      	str	r3, [r4, #72]	; 0x48
						  configuration_data[CTRL_XKI] = ptr_data_f[5];
 8002ed4:	6943      	ldr	r3, [r0, #20]
 8002ed6:	64e3      	str	r3, [r4, #76]	; 0x4c
						  configuration_data[CTRL_XKD] = ptr_data_f[6];
 8002ed8:	6983      	ldr	r3, [r0, #24]
 8002eda:	6523      	str	r3, [r4, #80]	; 0x50
						  configuration_data[M_FILTER] = ptr_data_f[7];
 8002edc:	69c3      	ldr	r3, [r0, #28]
 8002ede:	6223      	str	r3, [r4, #32]
						  configuration_data[CTRL_XFILTER] = ptr_data_f[8];
 8002ee0:	6a03      	ldr	r3, [r0, #32]
 8002ee2:	6563      	str	r3, [r4, #84]	; 0x54
						  configuration_data[CTRL_YFILTER] = ptr_data_f[9];
 8002ee4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ee6:	65a3      	str	r3, [r4, #88]	; 0x58

						  HAL_Configuration_Save();
 8002ee8:	f7ff ff10 	bl	8002d0c <HAL_Configuration_Save>
						  HAL_Configuration_Reload();
 8002eec:	f7ff fefe 	bl	8002cec <HAL_Configuration_Reload>

					  }
					  break;
 8002ef0:	e7bf      	b.n	8002e72 <APP_Protocol_Interpreter_Process+0x56>
 8002ef2:	bf00      	nop
 8002ef4:	20001e68 	.word	0x20001e68
 8002ef8:	2000043c 	.word	0x2000043c
 8002efc:	20001d88 	.word	0x20001d88
 8002f00:	20001de8 	.word	0x20001de8

08002f04 <fastAtan2>:

float fastAtan2( float y, float x)
{
  static float atan;
  static float z;
  if ( x == 0.0f )
 8002f04:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	d110      	bne.n	8002f30 <fastAtan2+0x2c>
  {
    if ( y > 0.0f ) return PIBY2_FLOAT;
 8002f0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	dc48      	bgt.n	8002faa <fastAtan2+0xa6>
    if ( y == 0.0f ) return 0.0f;
    return -PIBY2_FLOAT;
 8002f18:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002f1c:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002fb0 <fastAtan2+0xac>
 8002f20:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002fb4 <fastAtan2+0xb0>
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	bf18      	it	ne
 8002f2a:	eeb0 0a67 	vmovne.f32	s0, s15
 8002f2e:	4770      	bx	lr
  }
  z = y / x;
 8002f30:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <fastAtan2+0xb4>)
  if ( fabs( z ) < 1.0f )
 8002f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f3a:	eef0 7ac7 	vabs.f32	s15, s14
 8002f3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002f42:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002fbc <fastAtan2+0xb8>
 8002f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4a:	d519      	bpl.n	8002f80 <fastAtan2+0x7c>
  {
    atan = z/(1.0f + 0.28f*z*z);
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
    if ( x < 0.0f )
 8002f50:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    atan = z/(1.0f + 0.28f*z*z);
 8002f54:	eee7 6a27 	vfma.f32	s13, s14, s15
    if ( x < 0.0f )
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    atan = z/(1.0f + 0.28f*z*z);
 8002f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f60:	edc3 7a00 	vstr	s15, [r3]
    if ( x < 0.0f )
 8002f64:	d51e      	bpl.n	8002fa4 <fastAtan2+0xa0>
    {
      if ( y < 0.0f ) return atan - PI_FLOAT;
 8002f66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f6a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002fc0 <fastAtan2+0xbc>
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	d502      	bpl.n	8002f7a <fastAtan2+0x76>
    }
  }
  else
  {
    atan = PIBY2_FLOAT - z/(z*z + 0.28f);
    if ( y < 0.0f ) return atan - PI_FLOAT;
 8002f74:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002f78:	4770      	bx	lr
      return atan + PI_FLOAT;
 8002f7a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002f7e:	4770      	bx	lr
    atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 8002f80:	eee7 7a07 	vfma.f32	s15, s14, s14
    if ( y < 0.0f ) return atan - PI_FLOAT;
 8002f84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 8002f8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f90:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002fc4 <fastAtan2+0xc0>
 8002f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f98:	edc3 7a00 	vstr	s15, [r3]
    if ( y < 0.0f ) return atan - PI_FLOAT;
 8002f9c:	d502      	bpl.n	8002fa4 <fastAtan2+0xa0>
 8002f9e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002fc0 <fastAtan2+0xbc>
 8002fa2:	e7e7      	b.n	8002f74 <fastAtan2+0x70>
  }
  return atan;
 8002fa4:	ed93 0a00 	vldr	s0, [r3]
 8002fa8:	4770      	bx	lr
    if ( y > 0.0f ) return PIBY2_FLOAT;
 8002faa:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002fc4 <fastAtan2+0xc0>
}
 8002fae:	4770      	bx	lr
 8002fb0:	bfc90fda 	.word	0xbfc90fda
 8002fb4:	00000000 	.word	0x00000000
 8002fb8:	200004bc 	.word	0x200004bc
 8002fbc:	3e8f5c29 	.word	0x3e8f5c29
 8002fc0:	40490fdb 	.word	0x40490fdb
 8002fc4:	3fc90fda 	.word	0x3fc90fda

08002fc8 <HAL_Imu_Angle>:
	return yaw;
}

float HAL_Imu_Angle(int angle)
{
	switch(angle)
 8002fc8:	2801      	cmp	r0, #1
 8002fca:	d006      	beq.n	8002fda <HAL_Imu_Angle+0x12>
 8002fcc:	2802      	cmp	r0, #2
 8002fce:	d006      	beq.n	8002fde <HAL_Imu_Angle+0x16>
 8002fd0:	b938      	cbnz	r0, 8002fe2 <HAL_Imu_Angle+0x1a>
	{
	case IMU_ANGLE_PITCH:
		return pitch;
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_Imu_Angle+0x20>)
	case IMU_ANGLE_ROLL:
		return roll;
	case IMU_ANGLE_YAW:
		return yaw;
 8002fd4:	ed93 0a00 	vldr	s0, [r3]
 8002fd8:	4770      	bx	lr
		return roll;
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_Imu_Angle+0x24>)
 8002fdc:	e7fa      	b.n	8002fd4 <HAL_Imu_Angle+0xc>
		return yaw;
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_Imu_Angle+0x28>)
 8002fe0:	e7f8      	b.n	8002fd4 <HAL_Imu_Angle+0xc>

	}
	return 0.0;
 8002fe2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002ff4 <HAL_Imu_Angle+0x2c>
}
 8002fe6:	4770      	bx	lr
 8002fe8:	200004c4 	.word	0x200004c4
 8002fec:	20001c4c 	.word	0x20001c4c
 8002ff0:	20001c78 	.word	0x20001c78
 8002ff4:	00000000 	.word	0x00000000

08002ff8 <HAL_Imu_Scaled_Sensor_Data>:
static float scaled_sensor_data[SENSOR_COUNT];

float * HAL_Imu_Scaled_Sensor_Data(void)
{
	return scaled_sensor_data;
}
 8002ff8:	4800      	ldr	r0, [pc, #0]	; (8002ffc <HAL_Imu_Scaled_Sensor_Data+0x4>)
 8002ffa:	4770      	bx	lr
 8002ffc:	20001c50 	.word	0x20001c50

08003000 <scale>:
};
static const float  sensor_sign[SENSOR_COUNT] = {1,1,1,1,1,1,1,1,1};
static const int  sensor_order[SENSOR_COUNT] = {0,1,2,3,4,5,6,7,8};

void scale(void)
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	4812      	ldr	r0, [pc, #72]	; (800304c <scale+0x4c>)
 8003004:	2200      	movs	r2, #0
 8003006:	4c12      	ldr	r4, [pc, #72]	; (8003050 <scale+0x50>)
	for(short index=0;index<SENSOR_COUNT;++index)
	{
		scaled_sensor_data[sensor_order[index]]=(float)(raw_sensor_data[index]-raw_sensor_data_offset[index])*sensor_scale_factor[index]*sensor_sign[index];
 8003008:	f8df e050 	ldr.w	lr, [pc, #80]	; 800305c <scale+0x5c>
 800300c:	f8df c050 	ldr.w	ip, [pc, #80]	; 8003060 <scale+0x60>
 8003010:	4f10      	ldr	r7, [pc, #64]	; (8003054 <scale+0x54>)
 8003012:	4e11      	ldr	r6, [pc, #68]	; (8003058 <scale+0x58>)
 8003014:	f85c 3022 	ldr.w	r3, [ip, r2, lsl #2]
 8003018:	f936 5012 	ldrsh.w	r5, [r6, r2, lsl #1]
 800301c:	eb0e 0183 	add.w	r1, lr, r3, lsl #2
 8003020:	f937 3012 	ldrsh.w	r3, [r7, r2, lsl #1]
 8003024:	ecf4 6a01 	vldmia	r4!, {s13}
 8003028:	3201      	adds	r2, #1
 800302a:	1b5b      	subs	r3, r3, r5
 800302c:	ecb0 7a01 	vldmia	r0!, {s14}
	for(short index=0;index<SENSOR_COUNT;++index)
 8003030:	2a09      	cmp	r2, #9
		scaled_sensor_data[sensor_order[index]]=(float)(raw_sensor_data[index]-raw_sensor_data_offset[index])*sensor_scale_factor[index]*sensor_sign[index];
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800303e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003042:	edc1 7a00 	vstr	s15, [r1]
	for(short index=0;index<SENSOR_COUNT;++index)
 8003046:	d1e5      	bne.n	8003014 <scale+0x14>
	}
}
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304a:	bf00      	nop
 800304c:	08005724 	.word	0x08005724
 8003050:	08005700 	.word	0x08005700
 8003054:	200004c8 	.word	0x200004c8
 8003058:	20000094 	.word	0x20000094
 800305c:	20001c50 	.word	0x20001c50
 8003060:	080056dc 	.word	0x080056dc

08003064 <HAL_Imu_Do_Gyr_Calibration>:

void HAL_Imu_Do_Gyr_Calibration(void)
{
	for(short index=0;index<3;++index)
	{
		raw_sensor_data_record[calibration_iteration][index]=raw_sensor_data[GYR_X+index];
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_Imu_Do_Gyr_Calibration+0x20>)
 8003066:	4808      	ldr	r0, [pc, #32]	; (8003088 <HAL_Imu_Do_Gyr_Calibration+0x24>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2306      	movs	r3, #6
 800306c:	4353      	muls	r3, r2
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_Imu_Do_Gyr_Calibration+0x28>)
{
 8003070:	b510      	push	{r4, lr}
		raw_sensor_data_record[calibration_iteration][index]=raw_sensor_data[GYR_X+index];
 8003072:	8814      	ldrh	r4, [r2, #0]
 8003074:	18c1      	adds	r1, r0, r3
 8003076:	52c4      	strh	r4, [r0, r3]
 8003078:	8853      	ldrh	r3, [r2, #2]
 800307a:	804b      	strh	r3, [r1, #2]
 800307c:	8893      	ldrh	r3, [r2, #4]
 800307e:	808b      	strh	r3, [r1, #4]
 8003080:	bd10      	pop	{r4, pc}
 8003082:	bf00      	nop
 8003084:	200004c0 	.word	0x200004c0
 8003088:	200004da 	.word	0x200004da
 800308c:	200004c8 	.word	0x200004c8

08003090 <HAL_Imu_End_Gyr_Calibration>:
	}
}

void HAL_Imu_End_Gyr_Calibration(void)
{
 8003090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	float mean[3] = {0.0,0.0,0.0};
 8003092:	2300      	movs	r3, #0
 8003094:	a901      	add	r1, sp, #4
	for(short index=0;index<3;++index)
	{
		for(short iteration=0;iteration<CALIBRATION_ITERATION_MAX;++iteration)
		{
			mean[index] = mean[index] + (float)raw_sensor_data_record[iteration][index];
 8003096:	4816      	ldr	r0, [pc, #88]	; (80030f0 <HAL_Imu_End_Gyr_Calibration+0x60>)
 8003098:	2406      	movs	r4, #6
	float mean[3] = {0.0,0.0,0.0};
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	9302      	str	r3, [sp, #8]
 800309e:	9303      	str	r3, [sp, #12]
 80030a0:	2300      	movs	r3, #0
		}
		raw_sensor_data_offset[GYR_X+index]= (int32_t)(mean[index]/1000.0);
 80030a2:	4d14      	ldr	r5, [pc, #80]	; (80030f4 <HAL_Imu_End_Gyr_Calibration+0x64>)
 80030a4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80030e8 <HAL_Imu_End_Gyr_Calibration+0x58>
 80030a8:	ed91 7a00 	vldr	s14, [r1]
{
 80030ac:	2200      	movs	r2, #0
			mean[index] = mean[index] + (float)raw_sensor_data_record[iteration][index];
 80030ae:	fb04 0602 	mla	r6, r4, r2, r0
 80030b2:	3201      	adds	r2, #1
 80030b4:	5ef6      	ldrsh	r6, [r6, r3]
		for(short iteration=0;iteration<CALIBRATION_ITERATION_MAX;++iteration)
 80030b6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
			mean[index] = mean[index] + (float)raw_sensor_data_record[iteration][index];
 80030ba:	ee07 6a90 	vmov	s15, r6
 80030be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c2:	ee37 7a27 	vadd.f32	s14, s14, s15
		for(short iteration=0;iteration<CALIBRATION_ITERATION_MAX;++iteration)
 80030c6:	d1f2      	bne.n	80030ae <HAL_Imu_End_Gyr_Calibration+0x1e>
 80030c8:	eca1 7a01 	vstmia	r1!, {s14}
		raw_sensor_data_offset[GYR_X+index]= (int32_t)(mean[index]/1000.0);
 80030cc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80030d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80030d4:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 80030d8:	ee17 2a90 	vmov	r2, s15
 80030dc:	535a      	strh	r2, [r3, r5]
 80030de:	3302      	adds	r3, #2
	for(short index=0;index<3;++index)
 80030e0:	2b06      	cmp	r3, #6
 80030e2:	d1e1      	bne.n	80030a8 <HAL_Imu_End_Gyr_Calibration+0x18>
	}
}
 80030e4:	b004      	add	sp, #16
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
 80030e8:	00000000 	.word	0x00000000
 80030ec:	408f4000 	.word	0x408f4000
 80030f0:	200004da 	.word	0x200004da
 80030f4:	20000094 	.word	0x20000094

080030f8 <HAL_Imu_Begin_Mag_Calibration>:

void HAL_Imu_Begin_Mag_Calibration()
{
	for(short index=0;index<3;++index)
	{
		raw_sensor_data_min[MAG_X+index]=calibration_default_value;
 80030f8:	4906      	ldr	r1, [pc, #24]	; (8003114 <HAL_Imu_Begin_Mag_Calibration+0x1c>)
 80030fa:	f642 60e0 	movw	r0, #12000	; 0x2ee0
		raw_sensor_data_max[MAG_X+index]=-calibration_default_value;
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_Imu_Begin_Mag_Calibration+0x20>)
 8003100:	f24d 1220 	movw	r2, #53536	; 0xd120
		raw_sensor_data_min[MAG_X+index]=calibration_default_value;
 8003104:	8188      	strh	r0, [r1, #12]
		raw_sensor_data_max[MAG_X+index]=-calibration_default_value;
 8003106:	819a      	strh	r2, [r3, #12]
		raw_sensor_data_min[MAG_X+index]=calibration_default_value;
 8003108:	81c8      	strh	r0, [r1, #14]
		raw_sensor_data_max[MAG_X+index]=-calibration_default_value;
 800310a:	81da      	strh	r2, [r3, #14]
		raw_sensor_data_min[MAG_X+index]=calibration_default_value;
 800310c:	8208      	strh	r0, [r1, #16]
		raw_sensor_data_max[MAG_X+index]=-calibration_default_value;
 800310e:	821a      	strh	r2, [r3, #16]
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000082 	.word	0x20000082
 8003118:	20000070 	.word	0x20000070

0800311c <HAL_Imu_Do_Mag_Calibration>:
	}
}

void HAL_Imu_Do_Mag_Calibration(void)
{
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	480b      	ldr	r0, [pc, #44]	; (800314c <HAL_Imu_Do_Mag_Calibration+0x30>)
 8003120:	230c      	movs	r3, #12
 8003122:	4a0b      	ldr	r2, [pc, #44]	; (8003150 <HAL_Imu_Do_Mag_Calibration+0x34>)
	for(short index=0;index<3;++index)
	{
		raw_sensor_data_min[MAG_X+index]= MIN(raw_sensor_data_min[MAG_X+index],raw_sensor_data[MAG_X+index]);
 8003124:	4e0b      	ldr	r6, [pc, #44]	; (8003154 <HAL_Imu_Do_Mag_Calibration+0x38>)
 8003126:	5f9d      	ldrsh	r5, [r3, r6]
 8003128:	3302      	adds	r3, #2
 800312a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
		raw_sensor_data_max[MAG_X+index]= MAX(raw_sensor_data_max[MAG_X+index],raw_sensor_data[MAG_X+index]);
 800312e:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
		raw_sensor_data_min[MAG_X+index]= MIN(raw_sensor_data_min[MAG_X+index],raw_sensor_data[MAG_X+index]);
 8003132:	42ac      	cmp	r4, r5
 8003134:	bfa8      	it	ge
 8003136:	462c      	movge	r4, r5
		raw_sensor_data_max[MAG_X+index]= MAX(raw_sensor_data_max[MAG_X+index],raw_sensor_data[MAG_X+index]);
 8003138:	42a9      	cmp	r1, r5
 800313a:	bfb8      	it	lt
 800313c:	4629      	movlt	r1, r5
	for(short index=0;index<3;++index)
 800313e:	2b12      	cmp	r3, #18
		raw_sensor_data_min[MAG_X+index]= MIN(raw_sensor_data_min[MAG_X+index],raw_sensor_data[MAG_X+index]);
 8003140:	f820 4f02 	strh.w	r4, [r0, #2]!
		raw_sensor_data_max[MAG_X+index]= MAX(raw_sensor_data_max[MAG_X+index],raw_sensor_data[MAG_X+index]);
 8003144:	f822 1f02 	strh.w	r1, [r2, #2]!
	for(short index=0;index<3;++index)
 8003148:	d1ed      	bne.n	8003126 <HAL_Imu_Do_Mag_Calibration+0xa>
	}
}
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	2000008c 	.word	0x2000008c
 8003150:	2000007a 	.word	0x2000007a
 8003154:	200004c8 	.word	0x200004c8

08003158 <HAL_Imu_End_Mag_Calibration>:

void HAL_Imu_End_Mag_Calibration(void)
{
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	230c      	movs	r3, #12
	for(short index=0;index<3;++index)
	{
		raw_sensor_data_offset[MAG_X+index]= (raw_sensor_data_max[MAG_X+index]+raw_sensor_data_min[MAG_X+index])/2;
 800315c:	4906      	ldr	r1, [pc, #24]	; (8003178 <HAL_Imu_End_Mag_Calibration+0x20>)
 800315e:	4e07      	ldr	r6, [pc, #28]	; (800317c <HAL_Imu_End_Mag_Calibration+0x24>)
 8003160:	2002      	movs	r0, #2
 8003162:	4d07      	ldr	r5, [pc, #28]	; (8003180 <HAL_Imu_End_Mag_Calibration+0x28>)
 8003164:	5f9a      	ldrsh	r2, [r3, r6]
 8003166:	5f5c      	ldrsh	r4, [r3, r5]
 8003168:	4422      	add	r2, r4
 800316a:	fb92 f2f0 	sdiv	r2, r2, r0
 800316e:	525a      	strh	r2, [r3, r1]
 8003170:	3302      	adds	r3, #2
	for(short index=0;index<3;++index)
 8003172:	2b12      	cmp	r3, #18
 8003174:	d1f6      	bne.n	8003164 <HAL_Imu_End_Mag_Calibration+0xc>
	}
}
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	20000094 	.word	0x20000094
 800317c:	20000070 	.word	0x20000070
 8003180:	20000082 	.word	0x20000082

08003184 <HAL_Imu_Read_Sensors>:
{
	while(1);
}

void HAL_Imu_Read_Sensors(void)
{
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	b086      	sub	sp, #24
	HAL_StatusTypeDef result = HAL_OK;
	uint8_t donnee = 0x5A;
 8003188:	235a      	movs	r3, #90	; 0x5a

	/// query GYR and ACC
	result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 10);
 800318a:	2501      	movs	r5, #1
 800318c:	260a      	movs	r6, #10
	uint8_t donnee = 0x5A;
 800318e:	ac06      	add	r4, sp, #24
	result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 10);
 8003190:	221e      	movs	r2, #30
 8003192:	21d6      	movs	r1, #214	; 0xd6
 8003194:	4827      	ldr	r0, [pc, #156]	; (8003234 <HAL_Imu_Read_Sensors+0xb0>)
	uint8_t donnee = 0x5A;
 8003196:	f804 3d01 	strb.w	r3, [r4, #-1]!
	result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 10);
 800319a:	462b      	mov	r3, r5
 800319c:	9602      	str	r6, [sp, #8]
 800319e:	e88d 0030 	stmia.w	sp, {r4, r5}
 80031a2:	f7fd ff7b 	bl	800109c <HAL_I2C_Mem_Read>
	if(result!=HAL_OK)
 80031a6:	b100      	cbz	r0, 80031aa <HAL_Imu_Read_Sensors+0x26>
 80031a8:	e7fe      	b.n	80031a8 <HAL_Imu_Read_Sensors+0x24>
//		if(result!=HAL_OK)
//		{
//			HAL_Imu_Process_Failure();
//		}
//	}
	if((donnee&0x02)!=0) // GYR: X, Y, Z -axis new data set available.
 80031aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80031ae:	0799      	lsls	r1, r3, #30
 80031b0:	d50c      	bpl.n	80031cc <HAL_Imu_Read_Sensors+0x48>
	{
		result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_OUTX_L_G , I2C_MEMADD_SIZE_8BIT, (uint8_t*)&raw_sensor_data[GYR_X], 6, 10);
 80031b2:	2306      	movs	r3, #6
 80031b4:	9602      	str	r6, [sp, #8]
 80031b6:	2222      	movs	r2, #34	; 0x22
 80031b8:	21d6      	movs	r1, #214	; 0xd6
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_Imu_Read_Sensors+0xb4>)
 80031be:	481d      	ldr	r0, [pc, #116]	; (8003234 <HAL_Imu_Read_Sensors+0xb0>)
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	462b      	mov	r3, r5
 80031c4:	f7fd ff6a 	bl	800109c <HAL_I2C_Mem_Read>
		if(result!=HAL_OK)
 80031c8:	b100      	cbz	r0, 80031cc <HAL_Imu_Read_Sensors+0x48>
 80031ca:	e7fe      	b.n	80031ca <HAL_Imu_Read_Sensors+0x46>
		{
			HAL_Imu_Process_Failure();
		}
	}
	if((donnee&0x01)!=0) // ACC: X, Y, Z -axis new data set available.
 80031cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80031d0:	07da      	lsls	r2, r3, #31
 80031d2:	d50d      	bpl.n	80031f0 <HAL_Imu_Read_Sensors+0x6c>
	{
		result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_OUTX_L_XL , I2C_MEMADD_SIZE_8BIT, (uint8_t*)&raw_sensor_data[ACC_X], 6, 10);
 80031d4:	230a      	movs	r3, #10
 80031d6:	2228      	movs	r2, #40	; 0x28
 80031d8:	21d6      	movs	r1, #214	; 0xd6
 80031da:	4816      	ldr	r0, [pc, #88]	; (8003234 <HAL_Imu_Read_Sensors+0xb0>)
 80031dc:	9302      	str	r3, [sp, #8]
 80031de:	2306      	movs	r3, #6
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_Imu_Read_Sensors+0xb8>)
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2301      	movs	r3, #1
 80031e8:	f7fd ff58 	bl	800109c <HAL_I2C_Mem_Read>
		if(result!=HAL_OK)
 80031ec:	b100      	cbz	r0, 80031f0 <HAL_Imu_Read_Sensors+0x6c>
 80031ee:	e7fe      	b.n	80031ee <HAL_Imu_Read_Sensors+0x6a>
		{
			HAL_Imu_Process_Failure();
		}
	}
	/// query MAG
	result = HAL_I2C_Mem_Read(&hi2c1, IMU_LIS3MDL_ADDR, IMU_LIS3MDL_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 10);
 80031f0:	2501      	movs	r5, #1
 80031f2:	260a      	movs	r6, #10
 80031f4:	2227      	movs	r2, #39	; 0x27
 80031f6:	213c      	movs	r1, #60	; 0x3c
 80031f8:	9602      	str	r6, [sp, #8]
 80031fa:	462b      	mov	r3, r5
 80031fc:	480d      	ldr	r0, [pc, #52]	; (8003234 <HAL_Imu_Read_Sensors+0xb0>)
 80031fe:	e88d 0030 	stmia.w	sp, {r4, r5}
 8003202:	f7fd ff4b 	bl	800109c <HAL_I2C_Mem_Read>
	if(result!=HAL_OK)
 8003206:	b100      	cbz	r0, 800320a <HAL_Imu_Read_Sensors+0x86>
 8003208:	e7fe      	b.n	8003208 <HAL_Imu_Read_Sensors+0x84>
	{
		HAL_Imu_Process_Failure();
	}
	if((donnee&0x08)!=0) // MAG: X, Y, Z -axis new data set available.
 800320a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800320e:	071b      	lsls	r3, r3, #28
 8003210:	d50c      	bpl.n	800322c <HAL_Imu_Read_Sensors+0xa8>
	{
		result = HAL_I2C_Mem_Read(&hi2c1, IMU_LIS3MDL_ADDR, IMU_LIS3MDL_REGISTER_OUT_X_L | (1<<7), I2C_MEMADD_SIZE_8BIT, (uint8_t*)&raw_sensor_data[MAG_X], 6, 10);
 8003212:	2306      	movs	r3, #6
 8003214:	9602      	str	r6, [sp, #8]
 8003216:	22a8      	movs	r2, #168	; 0xa8
 8003218:	213c      	movs	r1, #60	; 0x3c
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_Imu_Read_Sensors+0xbc>)
 800321e:	4805      	ldr	r0, [pc, #20]	; (8003234 <HAL_Imu_Read_Sensors+0xb0>)
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	462b      	mov	r3, r5
 8003224:	f7fd ff3a 	bl	800109c <HAL_I2C_Mem_Read>
		if(result!=HAL_OK)
 8003228:	b100      	cbz	r0, 800322c <HAL_Imu_Read_Sensors+0xa8>
 800322a:	e7fe      	b.n	800322a <HAL_Imu_Read_Sensors+0xa6>
		{
			HAL_Imu_Process_Failure();
		}
	}
	scale();
 800322c:	f7ff fee8 	bl	8003000 <scale>
}
 8003230:	b006      	add	sp, #24
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	200026f4 	.word	0x200026f4
 8003238:	200004c8 	.word	0x200004c8
 800323c:	200004ce 	.word	0x200004ce
 8003240:	200004d4 	.word	0x200004d4
 8003244:	00000000 	.word	0x00000000

08003248 <HAL_Imu_Init>:
}

/*****************************************************************************/

void HAL_Imu_Init(void)
{
 8003248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800324c:	ed2d 8b10 	vpush	{d8-d15}
 8003250:	b087      	sub	sp, #28
	HAL_StatusTypeDef result = HAL_OK;
	uint8_t donnee = 0x5A;
 8003252:	235a      	movs	r3, #90	; 0x5a

	// wait for IMU boot and check presence/identification
	HAL_Delay(50);
 8003254:	2032      	movs	r0, #50	; 0x32
	result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
 8003256:	2564      	movs	r5, #100	; 0x64
	uint8_t donnee = 0x5A;
 8003258:	ac06      	add	r4, sp, #24
 800325a:	f804 3d01 	strb.w	r3, [r4, #-1]!
	HAL_Delay(50);
 800325e:	f7fd f819 	bl	8000294 <HAL_Delay>
	result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
 8003262:	2301      	movs	r3, #1
 8003264:	9502      	str	r5, [sp, #8]
 8003266:	9400      	str	r4, [sp, #0]
 8003268:	220f      	movs	r2, #15
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	21d6      	movs	r1, #214	; 0xd6
 800326e:	488c      	ldr	r0, [pc, #560]	; (80034a0 <HAL_Imu_Init+0x258>)
 8003270:	f7fd ff14 	bl	800109c <HAL_I2C_Mem_Read>
	if(result!=HAL_OK)
 8003274:	bb88      	cbnz	r0, 80032da <HAL_Imu_Init+0x92>
			HAL_Delay(500);
			result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
		}
		while(result!=HAL_OK);
	}
	if(donnee!=IMU_LSM6DS33_WHO_AM_I)
 8003276:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800327a:	2b69      	cmp	r3, #105	; 0x69
 800327c:	d13e      	bne.n	80032fc <HAL_Imu_Init+0xb4>
		while(1);
	result = HAL_I2C_Mem_Read(&hi2c1, IMU_LIS3MDL_ADDR, IMU_LIS3MDL_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 10);
 800327e:	230a      	movs	r3, #10
 8003280:	9400      	str	r4, [sp, #0]
 8003282:	220f      	movs	r2, #15
 8003284:	213c      	movs	r1, #60	; 0x3c
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	2301      	movs	r3, #1
 800328a:	4885      	ldr	r0, [pc, #532]	; (80034a0 <HAL_Imu_Init+0x258>)
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	f7fd ff05 	bl	800109c <HAL_I2C_Mem_Read>
	if(result!=HAL_OK)
 8003292:	2800      	cmp	r0, #0
 8003294:	d133      	bne.n	80032fe <HAL_Imu_Init+0xb6>
			HAL_Delay(500);
			result = HAL_I2C_Mem_Read(&hi2c1, IMU_LIS3MDL_ADDR, IMU_LIS3MDL_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
		}
		while(result!=HAL_OK);
	}
	if(donnee!=IMU_LIS3MDL_WHO_AM_I)
 8003296:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800329a:	2b3d      	cmp	r3, #61	; 0x3d
 800329c:	d141      	bne.n	8003322 <HAL_Imu_Init+0xda>
 800329e:	4d81      	ldr	r5, [pc, #516]	; (80034a4 <HAL_Imu_Init+0x25c>)

	/// configure
	int index = 0;
	for(index=0;index<sizeof(imu_config)/sizeof(struct t_imu_config_element);++index)
	{
		result = HAL_I2C_Mem_Write(&hi2c1, imu_config[index].addr, imu_config[index].reg, I2C_MEMADD_SIZE_8BIT, &imu_config[index].value, 1, 100);
 80032a0:	2764      	movs	r7, #100	; 0x64
 80032a2:	f04f 0801 	mov.w	r8, #1
 80032a6:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80034a0 <HAL_Imu_Init+0x258>
 80032aa:	f105 066c 	add.w	r6, r5, #108	; 0x6c
	for(index=0;index<sizeof(imu_config)/sizeof(struct t_imu_config_element);++index)
 80032ae:	42b5      	cmp	r5, r6
 80032b0:	d138      	bne.n	8003324 <HAL_Imu_Init+0xdc>
 80032b2:	2500      	movs	r5, #0
 80032b4:	4e7c      	ldr	r6, [pc, #496]	; (80034a8 <HAL_Imu_Init+0x260>)
		if(result!=HAL_OK)
			while(1);
	}
	for(index=0;index<sizeof(imu_config)/sizeof(struct t_imu_config_element);++index)
	{
		result = HAL_I2C_Mem_Read(&hi2c1, imu_config[index].addr, imu_config[index].reg, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
 80032b6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80032ba:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80034a0 <HAL_Imu_Init+0x258>
 80032be:	1977      	adds	r7, r6, r5
 80032c0:	2301      	movs	r3, #1
 80032c2:	5b71      	ldrh	r1, [r6, r5]
 80032c4:	4648      	mov	r0, r9
 80032c6:	88ba      	ldrh	r2, [r7, #4]
 80032c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	9400      	str	r4, [sp, #0]
 80032d0:	f7fd fee4 	bl	800109c <HAL_I2C_Mem_Read>
		if(result!=HAL_OK)
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d034      	beq.n	8003342 <HAL_Imu_Init+0xfa>
 80032d8:	e7fe      	b.n	80032d8 <HAL_Imu_Init+0x90>
			result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
 80032da:	4e71      	ldr	r6, [pc, #452]	; (80034a0 <HAL_Imu_Init+0x258>)
			HAL_Delay(500);
 80032dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032e0:	f7fc ffd8 	bl	8000294 <HAL_Delay>
			result = HAL_I2C_Mem_Read(&hi2c1, IMU_LSM6DS33_ADDR, IMU_LSM6DS33_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
 80032e4:	2301      	movs	r3, #1
 80032e6:	9502      	str	r5, [sp, #8]
 80032e8:	220f      	movs	r2, #15
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	21d6      	movs	r1, #214	; 0xd6
 80032ee:	9400      	str	r4, [sp, #0]
 80032f0:	4630      	mov	r0, r6
 80032f2:	f7fd fed3 	bl	800109c <HAL_I2C_Mem_Read>
		while(result!=HAL_OK);
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_Imu_Init+0x94>
 80032fa:	e7bc      	b.n	8003276 <HAL_Imu_Init+0x2e>
 80032fc:	e7fe      	b.n	80032fc <HAL_Imu_Init+0xb4>
			result = HAL_I2C_Mem_Read(&hi2c1, IMU_LIS3MDL_ADDR, IMU_LIS3MDL_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
 80032fe:	2664      	movs	r6, #100	; 0x64
 8003300:	4d67      	ldr	r5, [pc, #412]	; (80034a0 <HAL_Imu_Init+0x258>)
			HAL_Delay(500);
 8003302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003306:	f7fc ffc5 	bl	8000294 <HAL_Delay>
			result = HAL_I2C_Mem_Read(&hi2c1, IMU_LIS3MDL_ADDR, IMU_LIS3MDL_REGISTER_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &donnee, 1, 100);
 800330a:	2301      	movs	r3, #1
 800330c:	9602      	str	r6, [sp, #8]
 800330e:	220f      	movs	r2, #15
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	213c      	movs	r1, #60	; 0x3c
 8003314:	9400      	str	r4, [sp, #0]
 8003316:	4628      	mov	r0, r5
 8003318:	f7fd fec0 	bl	800109c <HAL_I2C_Mem_Read>
		while(result!=HAL_OK);
 800331c:	2800      	cmp	r0, #0
 800331e:	d1f0      	bne.n	8003302 <HAL_Imu_Init+0xba>
 8003320:	e7b9      	b.n	8003296 <HAL_Imu_Init+0x4e>
 8003322:	e7fe      	b.n	8003322 <HAL_Imu_Init+0xda>
		result = HAL_I2C_Mem_Write(&hi2c1, imu_config[index].addr, imu_config[index].reg, I2C_MEMADD_SIZE_8BIT, &imu_config[index].value, 1, 100);
 8003324:	f835 2c04 	ldrh.w	r2, [r5, #-4]
 8003328:	2301      	movs	r3, #1
 800332a:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 800332e:	4648      	mov	r0, r9
 8003330:	9702      	str	r7, [sp, #8]
 8003332:	e88d 0120 	stmia.w	sp, {r5, r8}
 8003336:	f7fd fdf9 	bl	8000f2c <HAL_I2C_Mem_Write>
 800333a:	350c      	adds	r5, #12
		if(result!=HAL_OK)
 800333c:	2800      	cmp	r0, #0
 800333e:	d0b6      	beq.n	80032ae <HAL_Imu_Init+0x66>
 8003340:	e7fe      	b.n	8003340 <HAL_Imu_Init+0xf8>
			while(1);
		if(donnee != imu_config[index].value)
 8003342:	7a3a      	ldrb	r2, [r7, #8]
 8003344:	350c      	adds	r5, #12
 8003346:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800334a:	429a      	cmp	r2, r3
 800334c:	d000      	beq.n	8003350 <HAL_Imu_Init+0x108>
 800334e:	e7fe      	b.n	800334e <HAL_Imu_Init+0x106>
	for(index=0;index<sizeof(imu_config)/sizeof(struct t_imu_config_element);++index)
 8003350:	2d6c      	cmp	r5, #108	; 0x6c
 8003352:	d1b4      	bne.n	80032be <HAL_Imu_Init+0x76>

	//calculate the initial quaternion
	HAL_Imu_Read_Sensors();
	//these are rough values. This calibration works a lot better if the device is kept as flat as possible
	//find the initial pitch and roll
	pitch = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 8003354:	4c55      	ldr	r4, [pc, #340]	; (80034ac <HAL_Imu_Init+0x264>)
	HAL_Imu_Read_Sensors();
 8003356:	f7ff ff15 	bl	8003184 <HAL_Imu_Read_Sensors>
	pitch = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 800335a:	ed94 0a05 	vldr	s0, [r4, #20]
 800335e:	edd4 7a04 	vldr	s15, [r4, #16]
 8003362:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003366:	ed94 8a03 	vldr	s16, [r4, #12]
 800336a:	ed9f 9b49 	vldr	d9, [pc, #292]	; 8003490 <HAL_Imu_Init+0x248>
 800336e:	eea7 0aa7 	vfma.f32	s0, s15, s15

	float floatMagX = scaled_sensor_data[MAG_X];
	float floatMagY = scaled_sensor_data[MAG_Y];
	float floatMagZ = scaled_sensor_data[MAG_Z];
	//tilt compensate the compass
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 8003372:	ed9f fb49 	vldr	d15, [pc, #292]	; 8003498 <HAL_Imu_Init+0x250>
	pitch = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 8003376:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800337a:	f001 fb05 	bl	8004988 <sqrt>
 800337e:	eef7 0bc0 	vcvt.f32.f64	s1, d0
 8003382:	eeb0 0a48 	vmov.f32	s0, s16
 8003386:	f7ff fdbd 	bl	8002f04 <fastAtan2>
 800338a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 800338e:	edd4 7a03 	vldr	s15, [r4, #12]
 8003392:	edd4 8a04 	vldr	s17, [r4, #16]
	pitch = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 8003396:	ee20 0b09 	vmul.f64	d0, d0, d9
 800339a:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <HAL_Imu_Init+0x268>)
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 800339c:	eef1 8a68 	vneg.f32	s17, s17
	pitch = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 80033a0:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 80033a4:	ed94 0a05 	vldr	s0, [r4, #20]
 80033a8:	ee20 0a00 	vmul.f32	s0, s0, s0
	pitch = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 80033ac:	eeb1 8a48 	vneg.f32	s16, s16
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 80033b0:	eea7 0aa7 	vfma.f32	s0, s15, s15
	pitch = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 80033b4:	ed83 8a00 	vstr	s16, [r3]
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 80033b8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80033bc:	f001 fae4 	bl	8004988 <sqrt>
 80033c0:	eef7 0bc0 	vcvt.f32.f64	s1, d0
 80033c4:	eeb0 0a68 	vmov.f32	s0, s17
 80033c8:	f7ff fd9c 	bl	8002f04 <fastAtan2>
 80033cc:	eeb7 eac0 	vcvt.f64.f32	d14, s0
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 80033d0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 80033d4:	4b37      	ldr	r3, [pc, #220]	; (80034b4 <HAL_Imu_Init+0x26c>)
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 80033d6:	ed94 ba06 	vldr	s22, [r4, #24]
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 80033da:	ee2e eb09 	vmul.f64	d14, d14, d9
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 80033de:	ee28 8b0f 	vmul.f64	d8, d8, d15
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 80033e2:	eeb7 ebce 	vcvt.f32.f64	s28, d14
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 80033e6:	eeb7 bacb 	vcvt.f64.f32	d11, s22
	roll = ToDeg(fastAtan2(-1*scaled_sensor_data[ACC_Y],sqrt(scaled_sensor_data[ACC_X] * scaled_sensor_data[ACC_X] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z])));
 80033ea:	ed83 ea00 	vstr	s28, [r3]
	float yMag = -1 * ((floatMagX * sin(ToRad(roll))  * sin(ToRad(pitch))) + (floatMagY * cos(ToRad(roll))) - (floatMagZ * sin(ToRad(roll)) * cos(ToRad(pitch))));
 80033ee:	eeb7 eace 	vcvt.f64.f32	d14, s28
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 80033f2:	eeb0 0b48 	vmov.f64	d0, d8
 80033f6:	f001 fa4f 	bl	8004898 <cos>
 80033fa:	ed94 aa08 	vldr	s20, [r4, #32]
	float yMag = -1 * ((floatMagX * sin(ToRad(roll))  * sin(ToRad(pitch))) + (floatMagY * cos(ToRad(roll))) - (floatMagZ * sin(ToRad(roll)) * cos(ToRad(pitch))));
 80033fe:	ee2e eb0f 	vmul.f64	d14, d14, d15
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 8003402:	eeb0 cb40 	vmov.f64	d12, d0
 8003406:	eeb0 0b48 	vmov.f64	d0, d8
 800340a:	f001 fa81 	bl	8004910 <sin>
 800340e:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 8003412:	eeb0 db40 	vmov.f64	d13, d0
	float yMag = -1 * ((floatMagX * sin(ToRad(roll))  * sin(ToRad(pitch))) + (floatMagY * cos(ToRad(roll))) - (floatMagZ * sin(ToRad(roll)) * cos(ToRad(pitch))));
 8003416:	eeb0 0b4e 	vmov.f64	d0, d14
 800341a:	f001 fa79 	bl	8004910 <sin>
 800341e:	eeb0 8b40 	vmov.f64	d8, d0
 8003422:	eeb0 0b4e 	vmov.f64	d0, d14
 8003426:	f001 fa37 	bl	8004898 <cos>
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 800342a:	ee2a 6b0d 	vmul.f64	d6, d10, d13
	float yMag = -1 * ((floatMagX * sin(ToRad(roll))  * sin(ToRad(pitch))) + (floatMagY * cos(ToRad(roll))) - (floatMagZ * sin(ToRad(roll)) * cos(ToRad(pitch))));
 800342e:	ed94 7a07 	vldr	s14, [r4, #28]
 8003432:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003436:	ee2a ab08 	vmul.f64	d10, d10, d8
	float xMag = (floatMagX * cos(ToRad(pitch))) + (floatMagZ * sin(ToRad(pitch)));
 800343a:	eeab 6b0c 	vfma.f64	d6, d11, d12
	float yMag = -1 * ((floatMagX * sin(ToRad(roll))  * sin(ToRad(pitch))) + (floatMagY * cos(ToRad(roll))) - (floatMagZ * sin(ToRad(roll)) * cos(ToRad(pitch))));
 800343e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8003442:	ee2b bb08 	vmul.f64	d11, d11, d8
 8003446:	eead 0b0b 	vfma.f64	d0, d13, d11
 800344a:	eeac 0b4a 	vfms.f64	d0, d12, d10
 800344e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	yaw = ToDeg(fastAtan2(yMag,xMag));
 8003452:	eef7 0bc6 	vcvt.f32.f64	s1, d6
 8003456:	eeb1 0a40 	vneg.f32	s0, s0
 800345a:	f7ff fd53 	bl	8002f04 <fastAtan2>
 800345e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_Imu_Init+0x270>)
 8003464:	ee20 9b09 	vmul.f64	d9, d0, d9
 8003468:	eeb7 9bc9 	vcvt.f32.f64	s18, d9

	if(yaw < 0)
 800346c:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
	yaw = ToDeg(fastAtan2(yMag,xMag));
 8003470:	ed83 9a00 	vstr	s18, [r3]
	if(yaw < 0)
 8003474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		yaw += 360;
 8003478:	bf42      	ittt	mi
 800347a:	ed9f 0a10 	vldrmi	s0, [pc, #64]	; 80034bc <HAL_Imu_Init+0x274>
 800347e:	ee39 9a00 	vaddmi.f32	s18, s18, s0
 8003482:	ed83 9a00 	vstrmi	s18, [r3]
	}
}
 8003486:	b007      	add	sp, #28
 8003488:	ecbd 8b10 	vpop	{d8-d15}
 800348c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003490:	1a63cbb0 	.word	0x1a63cbb0
 8003494:	404ca5dc 	.word	0x404ca5dc
 8003498:	a252dd11 	.word	0xa252dd11
 800349c:	3f91df46 	.word	0x3f91df46
 80034a0:	200026f4 	.word	0x200026f4
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	20000004 	.word	0x20000004
 80034ac:	20001c50 	.word	0x20001c50
 80034b0:	200004c4 	.word	0x200004c4
 80034b4:	20001c4c 	.word	0x20001c4c
 80034b8:	20001c78 	.word	0x20001c78
 80034bc:	43b40000 	.word	0x43b40000

080034c0 <HAL_Imu_Process>:

void HAL_Imu_Process(void)
{
 80034c0:	b510      	push	{r4, lr}
	//static uint32_t last_time = 0;
	//uint32_t current_time = HAL_GetTick();
	//if(current_time>=last_time+5) // 200Hz
	{
		//last_time = current_time;
		switch(state)
 80034c2:	4c45      	ldr	r4, [pc, #276]	; (80035d8 <HAL_Imu_Process+0x118>)
{
 80034c4:	ed2d 8b02 	vpush	{d8}
	HAL_Imu_Read_Sensors();
 80034c8:	f7ff fe5c 	bl	8003184 <HAL_Imu_Read_Sensors>
		switch(state)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d844      	bhi.n	800355c <HAL_Imu_Process+0x9c>
 80034d2:	e8df f003 	tbb	[pc, r3]
 80034d6:	4603      	.short	0x4603
 80034d8:	594c      	.short	0x594c
 80034da:	60          	.byte	0x60
 80034db:	00          	.byte	0x00
		{
		case STATE_IMU_NORMAL:
			{
				static float const pitch_complementary_filter_alpha = 0.006; // 1/200Hz = 0.005
				float pitch_from_acc = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 80034dc:	4c3f      	ldr	r4, [pc, #252]	; (80035dc <HAL_Imu_Process+0x11c>)
 80034de:	ed94 0a05 	vldr	s0, [r4, #20]
 80034e2:	edd4 7a04 	vldr	s15, [r4, #16]
 80034e6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80034ea:	ed94 8a03 	vldr	s16, [r4, #12]
 80034ee:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80034f2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80034f6:	f001 fa47 	bl	8004988 <sqrt>
 80034fa:	eef7 0bc0 	vcvt.f32.f64	s1, d0
 80034fe:	eeb0 0a48 	vmov.f32	s0, s16
 8003502:	f7ff fcff 	bl	8002f04 <fastAtan2>
				pitch = (1.0-pitch_complementary_filter_alpha)*(pitch+HAL_Imu_Scaled_Sensor_Data()[GYR_Y]*180.0/M_PI*0.005) + pitch_complementary_filter_alpha*pitch_from_acc;
 8003506:	ed94 7a01 	vldr	s14, [r4, #4]
 800350a:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <HAL_Imu_Process+0x120>)
				float pitch_from_acc = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 800350c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
				pitch = (1.0-pitch_complementary_filter_alpha)*(pitch+HAL_Imu_Scaled_Sensor_Data()[GYR_Y]*180.0/M_PI*0.005) + pitch_complementary_filter_alpha*pitch_from_acc;
 8003510:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003514:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80035b0 <HAL_Imu_Process+0xf0>
 8003518:	ee27 7b06 	vmul.f64	d7, d7, d6
 800351c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80035b8 <HAL_Imu_Process+0xf8>
 8003520:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003524:	ed93 6a00 	vldr	s12, [r3]
 8003528:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800352c:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80035c0 <HAL_Imu_Process+0x100>
 8003530:	eea5 6b07 	vfma.f64	d6, d5, d7
				float pitch_from_acc = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 8003534:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80035c8 <HAL_Imu_Process+0x108>
				pitch = (1.0-pitch_complementary_filter_alpha)*(pitch+HAL_Imu_Scaled_Sensor_Data()[GYR_Y]*180.0/M_PI*0.005) + pitch_complementary_filter_alpha*pitch_from_acc;
 8003538:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80035d0 <HAL_Imu_Process+0x110>
				float pitch_from_acc = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 800353c:	ee20 7b07 	vmul.f64	d7, d0, d7
				pitch = (1.0-pitch_complementary_filter_alpha)*(pitch+HAL_Imu_Scaled_Sensor_Data()[GYR_Y]*180.0/M_PI*0.005) + pitch_complementary_filter_alpha*pitch_from_acc;
 8003540:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80035e4 <HAL_Imu_Process+0x124>
				float pitch_from_acc = -ToDeg(fastAtan2(scaled_sensor_data[ACC_X],sqrt(scaled_sensor_data[ACC_Y] * scaled_sensor_data[ACC_Y] + scaled_sensor_data[ACC_Z] * scaled_sensor_data[ACC_Z]))); // Note : added - for themis ACC positioning
 8003544:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
				pitch = (1.0-pitch_complementary_filter_alpha)*(pitch+HAL_Imu_Scaled_Sensor_Data()[GYR_Y]*180.0/M_PI*0.005) + pitch_complementary_filter_alpha*pitch_from_acc;
 8003548:	ee27 7a40 	vnmul.f32	s14, s14, s0
 800354c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003550:	eea6 7b05 	vfma.f64	d7, d6, d5
 8003554:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003558:	ed83 7a00 	vstr	s14, [r3]
				}
			}
			break;
		}
	}
}
 800355c:	ecbd 8b02 	vpop	{d8}
 8003560:	bd10      	pop	{r4, pc}
				calibration_iteration = 0;
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_Imu_Process+0x128>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
				state = STATE_IMU_GYR_DRIFT_CALIBRATION;
 8003568:	2302      	movs	r3, #2
					state = STATE_IMU_NORMAL;
 800356a:	6023      	str	r3, [r4, #0]
}
 800356c:	e7f6      	b.n	800355c <HAL_Imu_Process+0x9c>
				HAL_Imu_Do_Gyr_Calibration();
 800356e:	f7ff fd79 	bl	8003064 <HAL_Imu_Do_Gyr_Calibration>
				++calibration_iteration;
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_Imu_Process+0x128>)
 8003574:	6813      	ldr	r3, [r2, #0]
 8003576:	3301      	adds	r3, #1
				if(calibration_iteration>=CALIBRATION_ITERATION_MAX)
 8003578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
				++calibration_iteration;
 800357c:	6013      	str	r3, [r2, #0]
				if(calibration_iteration>=CALIBRATION_ITERATION_MAX)
 800357e:	d3ed      	bcc.n	800355c <HAL_Imu_Process+0x9c>
					HAL_Imu_End_Gyr_Calibration();
 8003580:	f7ff fd86 	bl	8003090 <HAL_Imu_End_Gyr_Calibration>
					state = STATE_IMU_NORMAL;
 8003584:	2300      	movs	r3, #0
 8003586:	e7f0      	b.n	800356a <HAL_Imu_Process+0xaa>
				HAL_Imu_Begin_Mag_Calibration();
 8003588:	f7ff fdb6 	bl	80030f8 <HAL_Imu_Begin_Mag_Calibration>
				calibration_iteration = 0;
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_Imu_Process+0x128>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
				state = STATE_IMU_MAG_CALIBRATION;
 8003592:	2304      	movs	r3, #4
 8003594:	e7e9      	b.n	800356a <HAL_Imu_Process+0xaa>
				HAL_Imu_Do_Mag_Calibration();
 8003596:	f7ff fdc1 	bl	800311c <HAL_Imu_Do_Mag_Calibration>
				++calibration_iteration;
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_Imu_Process+0x128>)
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	3301      	adds	r3, #1
				if(calibration_iteration>=16000)
 80035a0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
				++calibration_iteration;
 80035a4:	6013      	str	r3, [r2, #0]
				if(calibration_iteration>=16000)
 80035a6:	d3d9      	bcc.n	800355c <HAL_Imu_Process+0x9c>
					HAL_Imu_End_Mag_Calibration();
 80035a8:	f7ff fdd6 	bl	8003158 <HAL_Imu_End_Mag_Calibration>
 80035ac:	e7ea      	b.n	8003584 <HAL_Imu_Process+0xc4>
 80035ae:	bf00      	nop
 80035b0:	00000000 	.word	0x00000000
 80035b4:	40668000 	.word	0x40668000
 80035b8:	54442d18 	.word	0x54442d18
 80035bc:	400921fb 	.word	0x400921fb
 80035c0:	47ae147b 	.word	0x47ae147b
 80035c4:	3f747ae1 	.word	0x3f747ae1
 80035c8:	1a63cbb0 	.word	0x1a63cbb0
 80035cc:	404ca5dc 	.word	0x404ca5dc
 80035d0:	16800000 	.word	0x16800000
 80035d4:	3fefced9 	.word	0x3fefced9
 80035d8:	20001c74 	.word	0x20001c74
 80035dc:	20001c50 	.word	0x20001c50
 80035e0:	200004c4 	.word	0x200004c4
 80035e4:	3bc49ba6 	.word	0x3bc49ba6
 80035e8:	200004c0 	.word	0x200004c0

080035ec <HAL_Serial_Init>:
uint32_t serial_counter = 0;



void HAL_Serial_Init(UART_HandleTypeDef * huart, HAL_Serial_Handler * hserial)
{
 80035ec:	b430      	push	{r4, r5}
    hserial->huart = huart;
	hserial->tx_dma = 0;
 80035ee:	2200      	movs	r2, #0
    hserial->rx_tail_ptr = hserial->rx_circular_buffer;
	hserial_table[serial_counter++]=hserial;
 80035f0:	4c09      	ldr	r4, [pc, #36]	; (8003618 <HAL_Serial_Init+0x2c>)
    hserial->huart = huart;
 80035f2:	6008      	str	r0, [r1, #0]
{
 80035f4:	460b      	mov	r3, r1
	hserial->tx_dma = 0;
 80035f6:	f8c1 2808 	str.w	r2, [r1, #2056]	; 0x808
    hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 80035fa:	f201 4104 	addw	r1, r1, #1028	; 0x404
	hserial_table[serial_counter++]=hserial;
 80035fe:	6822      	ldr	r2, [r4, #0]
    hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8003600:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
	hserial_table[serial_counter++]=hserial;
 8003604:	1c55      	adds	r5, r2, #1
 8003606:	6025      	str	r5, [r4, #0]
 8003608:	4c04      	ldr	r4, [pc, #16]	; (800361c <HAL_Serial_Init+0x30>)
 800360a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 800360e:	f44f 6280 	mov.w	r2, #1024	; 0x400
}
 8003612:	bc30      	pop	{r4, r5}
    HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8003614:	f7fe bfa8 	b.w	8002568 <HAL_UART_Receive_DMA>
 8003618:	20001c90 	.word	0x20001c90
 800361c:	20001c7c 	.word	0x20001c7c

08003620 <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
    if(hserial->huart == 0)
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	b173      	cbz	r3, 8003642 <HAL_Serial_Available+0x22>
        return 0;
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	1ac3      	subs	r3, r0, r3
    uint8_t const * tail = hserial->rx_tail_ptr;
 800362c:	f8d0 0804 	ldr.w	r0, [r0, #2052]	; 0x804
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003630:	f603 0304 	addw	r3, r3, #2052	; 0x804
    if( head>=tail )
 8003634:	4283      	cmp	r3, r0
 8003636:	eba3 0000 	sub.w	r0, r3, r0
 800363a:	d203      	bcs.n	8003644 <HAL_Serial_Available+0x24>
        return head-tail;
    else
        return head-tail+size_of_rx_circular_buffer;
 800363c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003640:	4770      	bx	lr
        return 0;
 8003642:	4618      	mov	r0, r3
}
 8003644:	4770      	bx	lr

08003646 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8003646:	4602      	mov	r2, r0
    if(hserial->huart == 0)
 8003648:	6800      	ldr	r0, [r0, #0]
{
 800364a:	b510      	push	{r4, lr}
    if(hserial->huart == 0)
 800364c:	b1b8      	cbz	r0, 800367e <HAL_Serial_GetChar+0x38>
        return 0;
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 800364e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003654:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003658:	1a51      	subs	r1, r2, r1
 800365a:	f601 0104 	addw	r1, r1, #2052	; 0x804
    if(head!=tail)
 800365e:	428b      	cmp	r3, r1
 8003660:	d00c      	beq.n	800367c <HAL_Serial_GetChar+0x36>
    {
        char c =  *hserial->rx_tail_ptr++;
 8003662:	1c59      	adds	r1, r3, #1
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8003664:	f602 0404 	addw	r4, r2, #2052	; 0x804
 8003668:	42a1      	cmp	r1, r4
        char c =  *hserial->rx_tail_ptr++;
 800366a:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 800366e:	7818      	ldrb	r0, [r3, #0]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8003670:	d305      	bcc.n	800367e <HAL_Serial_GetChar+0x38>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8003672:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003676:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 800367a:	bd10      	pop	{r4, pc}
        return 0;
 800367c:	2000      	movs	r0, #0
        return c;
    }
    else
        return 0;
}
 800367e:	bd10      	pop	{r4, pc}

08003680 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4614      	mov	r4, r2
    if(hserial->huart == 0)
 8003684:	6802      	ldr	r2, [r0, #0]
{
 8003686:	460b      	mov	r3, r1
    if(hserial->huart == 0)
 8003688:	b1d2      	cbz	r2, 80036c0 <HAL_Serial_Write+0x40>
        return 0;
    while(hserial->tx_dma!=0);
 800368a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800368e:	2a00      	cmp	r2, #0
 8003690:	d1fb      	bne.n	800368a <HAL_Serial_Write+0xa>
    hserial->tx_dma=1;
 8003692:	2201      	movs	r2, #1
    // copy user buffer to serial internal tx buffer
    uint8_t const * ptr_end = ptr + len;
 8003694:	191d      	adds	r5, r3, r4
    uint8_t * dst = hserial->tx_buffer;
 8003696:	1d01      	adds	r1, r0, #4
    hserial->tx_dma=1;
 8003698:	f8c0 2808 	str.w	r2, [r0, #2056]	; 0x808
 800369c:	1cc2      	adds	r2, r0, #3
    while( ptr < ptr_end )
 800369e:	429d      	cmp	r5, r3
 80036a0:	d809      	bhi.n	80036b6 <HAL_Serial_Write+0x36>
    {
        *dst++=*ptr++;
    }
    // transmit serial internal tx buffer using DMA if no DMA running
    HAL_StatusTypeDef result = HAL_UART_Transmit_DMA(hserial->huart, hserial->tx_buffer,len);
 80036a2:	b2a2      	uxth	r2, r4
 80036a4:	6800      	ldr	r0, [r0, #0]
 80036a6:	f7fe ff23 	bl	80024f0 <HAL_UART_Transmit_DMA>
    if(result!=HAL_OK)
 80036aa:	b110      	cbz	r0, 80036b2 <HAL_Serial_Write+0x32>
    {
    	HAL_Delay(100);
 80036ac:	2064      	movs	r0, #100	; 0x64
 80036ae:	f7fc fdf1 	bl	8000294 <HAL_Delay>
    }
    //HAL_UART_Transmit(hserial->huart, hserial->tx_buffer,len,100);
    return len;
}
 80036b2:	4620      	mov	r0, r4
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
        *dst++=*ptr++;
 80036b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80036ba:	f802 6f01 	strb.w	r6, [r2, #1]!
 80036be:	e7ee      	b.n	800369e <HAL_Serial_Write+0x1e>
        return 0;
 80036c0:	4614      	mov	r4, r2
 80036c2:	e7f6      	b.n	80036b2 <HAL_Serial_Write+0x32>

080036c4 <HAL_UART_TxCpltCallback>:
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 80036c4:	2300      	movs	r3, #0
 80036c6:	490f      	ldr	r1, [pc, #60]	; (8003704 <HAL_UART_TxCpltCallback+0x40>)
 80036c8:	4a0f      	ldr	r2, [pc, #60]	; (8003708 <HAL_UART_TxCpltCallback+0x44>)
{
 80036ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    for(id=0;id!=serial_counter;++id)
 80036cc:	680d      	ldr	r5, [r1, #0]
 80036ce:	4619      	mov	r1, r3
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 80036d0:	4e0e      	ldr	r6, [pc, #56]	; (800370c <HAL_UART_TxCpltCallback+0x48>)
    for(id=0;id!=serial_counter;++id)
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	429d      	cmp	r5, r3
 80036d6:	d102      	bne.n	80036de <HAL_UART_TxCpltCallback+0x1a>
 80036d8:	b101      	cbz	r1, 80036dc <HAL_UART_TxCpltCallback+0x18>
 80036da:	6015      	str	r5, [r2, #0]
 80036dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 80036de:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
 80036e2:	6827      	ldr	r7, [r4, #0]
 80036e4:	4287      	cmp	r7, r0
 80036e6:	d109      	bne.n	80036fc <HAL_UART_TxCpltCallback+0x38>
 80036e8:	f8d4 7808 	ldr.w	r7, [r4, #2056]	; 0x808
 80036ec:	2f01      	cmp	r7, #1
 80036ee:	d105      	bne.n	80036fc <HAL_UART_TxCpltCallback+0x38>
 80036f0:	b101      	cbz	r1, 80036f4 <HAL_UART_TxCpltCallback+0x30>
 80036f2:	6013      	str	r3, [r2, #0]
        {
    	   hserial_table[id]->tx_dma = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
           break;
 80036fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036fc:	3301      	adds	r3, #1
 80036fe:	2101      	movs	r1, #1
 8003700:	e7e8      	b.n	80036d4 <HAL_UART_TxCpltCallback+0x10>
 8003702:	bf00      	nop
 8003704:	20001c90 	.word	0x20001c90
 8003708:	20001c8c 	.word	0x20001c8c
 800370c:	20001c7c 	.word	0x20001c7c

08003710 <speed_to_period>:
/* Provate functions ----------------------------------------------------------*/

// from speed (step/s) to period (ticks)
uint32_t speed_to_period(uint32_t speed)
{
	uint32_t period = (uint32_t)(TICK_FREQUENCY / ((float)(speed)+1.0) );
 8003710:	ee07 0a90 	vmov	s15, r0
		return TICK_PERIOD_MAX;
	else if(period<TICK_PERIOD_MIN)
		return TICK_PERIOD_MIN;
	else
		return period;
}
 8003714:	480e      	ldr	r0, [pc, #56]	; (8003750 <speed_to_period+0x40>)
	uint32_t period = (uint32_t)(TICK_FREQUENCY / ((float)(speed)+1.0) );
 8003716:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800371a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800371e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003722:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8003748 <speed_to_period+0x38>
 8003726:	ee36 6b07 	vadd.f64	d6, d6, d7
 800372a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800372e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003732:	ee17 3a90 	vmov	r3, s15
 8003736:	2b05      	cmp	r3, #5
 8003738:	bf38      	it	cc
 800373a:	2305      	movcc	r3, #5
}
 800373c:	4298      	cmp	r0, r3
 800373e:	bf28      	it	cs
 8003740:	4618      	movcs	r0, r3
 8003742:	4770      	bx	lr
 8003744:	f3af 8000 	nop.w
 8003748:	00000000 	.word	0x00000000
 800374c:	410e8480 	.word	0x410e8480
 8003750:	0007a120 	.word	0x0007a120

08003754 <HAL_Stepper_Motor_Init>:

void HAL_Stepper_Motor_Init(
	TIM_HandleTypeDef *htim
)
{
	stepper_htim = htim;
 8003754:	4b01      	ldr	r3, [pc, #4]	; (800375c <HAL_Stepper_Motor_Init+0x8>)
 8003756:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Start_IT(stepper_htim);
 8003758:	f7fe bb7c 	b.w	8001e54 <HAL_TIM_Base_Start_IT>
 800375c:	20001ca8 	.word	0x20001ca8

08003760 <HAL_Stepper_Motor_Add>:
		GPIO_TypeDef* STEP_GPIOx,
		uint16_t STEP_GPIO_Pin,
		GPIO_TypeDef* DIR_GPIOx,
		uint16_t DIR_GPIO_Pin
)
{
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	4604      	mov	r4, r0
	hstep->position = 0;

	// finalize STEPPER handle

	// register STEPPER handle
	HAL_Stepper_Motor_handles[HAL_Stepper_Motor_handles_count++]=hstep;
 8003764:	4e0f      	ldr	r6, [pc, #60]	; (80037a4 <HAL_Stepper_Motor_Add+0x44>)
{
 8003766:	4608      	mov	r0, r1
 8003768:	4611      	mov	r1, r2
	hstep->DIR_GPIOx = DIR_GPIOx;
 800376a:	60a3      	str	r3, [r4, #8]
	hstep->speed = 0U;
 800376c:	2500      	movs	r5, #0
{
 800376e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	hstep->period = TICK_PERIOD_MAX; 		// just reset to the lowest speed
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_Stepper_Motor_Add+0x48>)
	hstep->DIR_GPIO_Pin = DIR_GPIO_Pin;
 8003774:	81a2      	strh	r2, [r4, #12]
	hstep->rotation = HAL_Stepper_Motor_CW;
 8003776:	2201      	movs	r2, #1
	hstep->period = TICK_PERIOD_MAX; 		// just reset to the lowest speed
 8003778:	61a3      	str	r3, [r4, #24]
	HAL_Stepper_Motor_handles[HAL_Stepper_Motor_handles_count++]=hstep;
 800377a:	6833      	ldr	r3, [r6, #0]
	hstep->STEP_GPIOx = STEP_GPIOx;
 800377c:	6020      	str	r0, [r4, #0]
	HAL_Stepper_Motor_handles[HAL_Stepper_Motor_handles_count++]=hstep;
 800377e:	189f      	adds	r7, r3, r2
	hstep->STEP_GPIO_Pin = STEP_GPIO_Pin;
 8003780:	80a1      	strh	r1, [r4, #4]
	hstep->rotation = HAL_Stepper_Motor_CW;
 8003782:	7522      	strb	r2, [r4, #20]
	HAL_Stepper_Motor_handles[HAL_Stepper_Motor_handles_count++]=hstep;
 8003784:	6037      	str	r7, [r6, #0]
 8003786:	4e09      	ldr	r6, [pc, #36]	; (80037ac <HAL_Stepper_Motor_Add+0x4c>)
	hstep->speed = 0U;
 8003788:	6125      	str	r5, [r4, #16]
	hstep->counter = 0U;
 800378a:	61e5      	str	r5, [r4, #28]
	hstep->position = 0;
 800378c:	6225      	str	r5, [r4, #32]
	HAL_Stepper_Motor_handles[HAL_Stepper_Motor_handles_count++]=hstep;
 800378e:	f846 4023 	str.w	r4, [r6, r3, lsl #2]

	// configure DIR & STEP
	HAL_GPIO_WritePin(hstep->STEP_GPIOx,hstep->STEP_GPIO_Pin,GPIO_PIN_SET); // PullUp on Big Easy Driver
 8003792:	f7fd fa37 	bl	8000c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hstep->DIR_GPIOx,hstep->DIR_GPIO_Pin,GPIO_PIN_RESET); // PullUp on Big Easy Driver
 8003796:	462a      	mov	r2, r5
 8003798:	89a1      	ldrh	r1, [r4, #12]
 800379a:	68a0      	ldr	r0, [r4, #8]

}
 800379c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(hstep->DIR_GPIOx,hstep->DIR_GPIO_Pin,GPIO_PIN_RESET); // PullUp on Big Easy Driver
 80037a0:	f7fd ba30 	b.w	8000c04 <HAL_GPIO_WritePin>
 80037a4:	20001ca4 	.word	0x20001ca4
 80037a8:	0007a120 	.word	0x0007a120
 80037ac:	20001c94 	.word	0x20001c94

080037b0 <HAL_Stepper_Motor_Set_Speed>:
void HAL_Stepper_Motor_Set_Speed(
		StepperMotor_HandleTypeDef * hstep,
		int32_t speed
)
{
	if(speed >= 0)
 80037b0:	2900      	cmp	r1, #0
{
 80037b2:	4602      	mov	r2, r0
 80037b4:	b508      	push	{r3, lr}
		hstep->speed = speed;
		hstep->rotation = HAL_Stepper_Motor_CW;
	}
	else
	{
		hstep->speed = -speed;
 80037b6:	bfb5      	itete	lt
 80037b8:	4249      	neglt	r1, r1
		hstep->rotation = HAL_Stepper_Motor_CW;
 80037ba:	2301      	movge	r3, #1
		hstep->rotation = HAL_Stepper_Motor_CCW;
 80037bc:	2300      	movlt	r3, #0
		hstep->speed = speed;
 80037be:	6101      	strge	r1, [r0, #16]
		hstep->speed = -speed;
 80037c0:	bfb8      	it	lt
 80037c2:	6101      	strlt	r1, [r0, #16]
		hstep->rotation = HAL_Stepper_Motor_CCW;
 80037c4:	7503      	strb	r3, [r0, #20]
	}
	// THEN, prepare TIMER
	hstep->period = speed_to_period(hstep->speed);
 80037c6:	6900      	ldr	r0, [r0, #16]
 80037c8:	f7ff ffa2 	bl	8003710 <speed_to_period>
 80037cc:	6190      	str	r0, [r2, #24]
 80037ce:	bd08      	pop	{r3, pc}

080037d0 <HAL_Stepper_Motor_Get_Position>:
int32_t HAL_Stepper_Motor_Get_Position(
		StepperMotor_HandleTypeDef * hstep
)
{
	return hstep->position;
}
 80037d0:	6a00      	ldr	r0, [r0, #32]
 80037d2:	4770      	bx	lr

080037d4 <HAL_Stepper_Motor_Reset_Position>:

void HAL_Stepper_Motor_Reset_Position(
		StepperMotor_HandleTypeDef * hstep
)
{
	hstep->position = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	6203      	str	r3, [r0, #32]
 80037d8:	4770      	bx	lr

080037da <process>:

void process(StepperMotor_HandleTypeDef * hstep)
{
	// Rising EDGE of STEP
	// End of period ?
	if(hstep->counter>=hstep->period)
 80037da:	69c3      	ldr	r3, [r0, #28]
 80037dc:	6982      	ldr	r2, [r0, #24]
 80037de:	4293      	cmp	r3, r2
{
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
	if(hstep->counter>=hstep->period)
 80037e4:	d312      	bcc.n	800380c <process+0x32>
	{
		// Reset counter
		hstep->counter=0;
 80037e6:	2300      	movs	r3, #0
		// Rise
		HAL_GPIO_WritePin(hstep->STEP_GPIOx,hstep->STEP_GPIO_Pin,GPIO_PIN_SET); // PullUp on Big Easy Driver
 80037e8:	8881      	ldrh	r1, [r0, #4]
 80037ea:	2201      	movs	r2, #1
		hstep->counter=0;
 80037ec:	61c3      	str	r3, [r0, #28]
		HAL_GPIO_WritePin(hstep->STEP_GPIOx,hstep->STEP_GPIO_Pin,GPIO_PIN_SET); // PullUp on Big Easy Driver
 80037ee:	6800      	ldr	r0, [r0, #0]
 80037f0:	f7fd fa08 	bl	8000c04 <HAL_GPIO_WritePin>
		// Update position
		if(hstep->rotation == HAL_Stepper_Motor_CW)
 80037f4:	7d23      	ldrb	r3, [r4, #20]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	6a23      	ldr	r3, [r4, #32]
			++hstep->position;
 80037fa:	bf0c      	ite	eq
 80037fc:	3301      	addeq	r3, #1
		else
			--hstep->position;
 80037fe:	f103 33ff 	addne.w	r3, r3, #4294967295
 8003802:	6223      	str	r3, [r4, #32]
		HAL_GPIO_WritePin(hstep->STEP_GPIOx,hstep->STEP_GPIO_Pin,GPIO_PIN_RESET); // PullUp on Big Easy Driver
		// update DIR
		HAL_GPIO_WritePin(hstep->DIR_GPIOx,hstep->DIR_GPIO_Pin,hstep->rotation); // PullUp on Big Easy Driver
	}
	// INC counter
	++hstep->counter;
 8003804:	69e3      	ldr	r3, [r4, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61e3      	str	r3, [r4, #28]
 800380a:	bd10      	pop	{r4, pc}
	else if(hstep->counter==1)
 800380c:	2b01      	cmp	r3, #1
 800380e:	d1f9      	bne.n	8003804 <process+0x2a>
		HAL_GPIO_WritePin(hstep->STEP_GPIOx,hstep->STEP_GPIO_Pin,GPIO_PIN_RESET); // PullUp on Big Easy Driver
 8003810:	8881      	ldrh	r1, [r0, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	6800      	ldr	r0, [r0, #0]
 8003816:	f7fd f9f5 	bl	8000c04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hstep->DIR_GPIOx,hstep->DIR_GPIO_Pin,hstep->rotation); // PullUp on Big Easy Driver
 800381a:	7d22      	ldrb	r2, [r4, #20]
 800381c:	89a1      	ldrh	r1, [r4, #12]
 800381e:	68a0      	ldr	r0, [r4, #8]
 8003820:	f7fd f9f0 	bl	8000c04 <HAL_GPIO_WritePin>
 8003824:	e7ee      	b.n	8003804 <process+0x2a>
	...

08003828 <HAL_TIM_PeriodElapsedCallback>:
// float target speed
// HAL_Stepper_Motor_RotationTypeDef target rotation

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(stepper_htim == htim)
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4283      	cmp	r3, r0
{
 800382e:	b570      	push	{r4, r5, r6, lr}
	if(stepper_htim == htim)
 8003830:	d105      	bne.n	800383e <HAL_TIM_PeriodElapsedCallback+0x16>
 8003832:	2400      	movs	r4, #0
	{
		// look for Stepper Motor Handle
		for(uint32_t index=0; index<HAL_Stepper_Motor_handles_count;++index)
 8003834:	4d06      	ldr	r5, [pc, #24]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x28>)
		{
			StepperMotor_HandleTypeDef * hstep = HAL_Stepper_Motor_handles[index];
 8003836:	4e07      	ldr	r6, [pc, #28]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2c>)
		for(uint32_t index=0; index<HAL_Stepper_Motor_handles_count;++index)
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	429c      	cmp	r4, r3
 800383c:	d300      	bcc.n	8003840 <HAL_TIM_PeriodElapsedCallback+0x18>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
			process(hstep);
 8003840:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
		for(uint32_t index=0; index<HAL_Stepper_Motor_handles_count;++index)
 8003844:	3401      	adds	r4, #1
			process(hstep);
 8003846:	f7ff ffc8 	bl	80037da <process>
 800384a:	e7f5      	b.n	8003838 <HAL_TIM_PeriodElapsedCallback+0x10>
 800384c:	20001ca8 	.word	0x20001ca8
 8003850:	20001ca4 	.word	0x20001ca4
 8003854:	20001c94 	.word	0x20001c94

08003858 <reset_ewma>:

#include "ewma.h"

void reset_ewma( ewma_handler * handler )
{
    handler->mean = 0.0;
 8003858:	2300      	movs	r3, #0
 800385a:	6043      	str	r3, [r0, #4]
 800385c:	4770      	bx	lr

0800385e <process_ewma>:
    //handler->mean = 0.0;
}

float process_ewma( ewma_handler * handler, float data )
{
	handler->mean = data**handler->alpha+(1-*handler->alpha)*handler->mean;
 800385e:	6803      	ldr	r3, [r0, #0]
 8003860:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003864:	edd0 6a01 	vldr	s13, [r0, #4]
 8003868:	ed93 7a00 	vldr	s14, [r3]
 800386c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003870:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003874:	eee7 7a00 	vfma.f32	s15, s14, s0
 8003878:	eeb0 0a67 	vmov.f32	s0, s15
 800387c:	edc0 7a01 	vstr	s15, [r0, #4]
    return handler->mean;
}
 8003880:	4770      	bx	lr

08003882 <fconstrain>:
        return x;
}

float fconstrain(float x, float min, float max)
{
    if(x<min)
 8003882:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388a:	d408      	bmi.n	800389e <fconstrain+0x1c>
        return min;
    else if(x>max)
 800388c:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return max;
    else
        return x;
 8003894:	bfd4      	ite	le
 8003896:	eef0 0a40 	vmovle.f32	s1, s0
 800389a:	eef0 0a41 	vmovgt.f32	s1, s2
}
 800389e:	eeb0 0a60 	vmov.f32	s0, s1
 80038a2:	4770      	bx	lr

080038a4 <reset_pid>:
#include "mymath.h"
#include "stdbool.h"

void reset_pid( pid_handler * handler )
{
    handler->old_error = 0.0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	6183      	str	r3, [r0, #24]
    handler->old_dterm = 0.0;
 80038a8:	61c3      	str	r3, [r0, #28]
    handler->integral_error = 0.0;
 80038aa:	6203      	str	r3, [r0, #32]
    handler->condition = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	6243      	str	r3, [r0, #36]	; 0x24
 80038b0:	4770      	bx	lr

080038b2 <process_pid>:
}

float process_pid( pid_handler * handler, float error )
{
 80038b2:	b510      	push	{r4, lr}
 80038b4:	ed2d 8b02 	vpush	{d8}
 80038b8:	eef0 8a40 	vmov.f32	s17, s0
    // calculate every terms
    float pterm = error**handler->kp;
    float iterm = handler->integral_error; // do not integrate right now, update of integration depends on new condition
    //float dterm = (error-handler->old_error)**handler->kd;
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80038bc:	ed90 0a06 	vldr	s0, [r0, #24]
 80038c0:	edd0 7a05 	vldr	s15, [r0, #20]
 80038c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80038c8:	6883      	ldr	r3, [r0, #8]
{
 80038ca:	4604      	mov	r4, r0
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80038cc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80038d0:	ed90 7a07 	vldr	s14, [r0, #28]
 80038d4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
	// sum up every terms and clamp the output
    float output = pterm + iterm + dterm;
 80038d8:	ed90 8a08 	vldr	s16, [r0, #32]
	float output_clamped =  fconstrain(output,handler->min,handler->max);
 80038dc:	ed90 1a04 	vldr	s2, [r0, #16]
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80038e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ee36 6b45 	vsub.f64	d6, d6, d5
    float pterm = error**handler->kp;
 80038ec:	6803      	ldr	r3, [r0, #0]
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80038ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80038f2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80038f6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80038fa:	eea6 0b07 	vfma.f64	d0, d6, d7
    float output = pterm + iterm + dterm;
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	eea7 8aa8 	vfma.f32	s16, s15, s17
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 8003906:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	float output_clamped =  fconstrain(output,handler->min,handler->max);
 800390a:	edd0 0a03 	vldr	s1, [r0, #12]
    float output = pterm + iterm + dterm;
 800390e:	ee30 8a08 	vadd.f32	s16, s0, s16
	float output_clamped =  fconstrain(output,handler->min,handler->max);
 8003912:	eeb0 0a48 	vmov.f32	s0, s16
 8003916:	f7ff ffb4 	bl	8003882 <fconstrain>
    // detect actuator saturation
	bool actuator_staturation = (output!=output_clamped);
	// detect error and output signs
	bool same_error_output_sign = ((output*error) > 0.0);
 800391a:	ee68 7a88 	vmul.f32	s15, s17, s16
	// update this PID & calculate new condition
	handler->old_error = error;
 800391e:	edc4 8a06 	vstr	s17, [r4, #24]
	if(same_error_output_sign && actuator_staturation)
 8003922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392a:	dd09      	ble.n	8003940 <process_pid+0x8e>
 800392c:	eeb4 8a40 	vcmp.f32	s16, s0
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	d004      	beq.n	8003940 <process_pid+0x8e>
	{
		handler->condition = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	6263      	str	r3, [r4, #36]	; 0x24
		// update this PID according new condition
		handler->integral_error += (error**handler->ki);
	}
  	// end up the process without actuator saturation
   	return output_clamped;
}
 800393a:	ecbd 8b02 	vpop	{d8}
 800393e:	bd10      	pop	{r4, pc}
		handler->condition = 0;
 8003940:	2300      	movs	r3, #0
		handler->integral_error += (error**handler->ki);
 8003942:	edd4 7a08 	vldr	s15, [r4, #32]
		handler->condition = 0;
 8003946:	6263      	str	r3, [r4, #36]	; 0x24
		handler->integral_error += (error**handler->ki);
 8003948:	6863      	ldr	r3, [r4, #4]
 800394a:	ed93 7a00 	vldr	s14, [r3]
 800394e:	eee8 7a87 	vfma.f32	s15, s17, s14
 8003952:	edc4 7a08 	vstr	s15, [r4, #32]
   	return output_clamped;
 8003956:	e7f0      	b.n	800393a <process_pid+0x88>

08003958 <reset_pid_win>:

void reset_pid_win( pid_win_handler * handler )
{
    handler->old_error = 0.0;
 8003958:	2300      	movs	r3, #0
 800395a:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800395e:	f500 7109 	add.w	r1, r0, #548	; 0x224
 8003962:	61c3      	str	r3, [r0, #28]
    handler->old_dterm = 0.0;
 8003964:	6203      	str	r3, [r0, #32]
    for(int index=0;index<PID_WIN_SIZE;++index)
    	handler->integral_window[index] = 0.0;
 8003966:	f842 3b04 	str.w	r3, [r2], #4
    for(int index=0;index<PID_WIN_SIZE;++index)
 800396a:	428a      	cmp	r2, r1
 800396c:	d1fb      	bne.n	8003966 <reset_pid_win+0xe>
    handler->integral_window_index = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 8003974:	4770      	bx	lr
	...

08003978 <process_pid_win>:
}

float process_pid_win( pid_win_handler * handler, float error )
{
 8003978:	b510      	push	{r4, lr}
 800397a:	ed2d 8b02 	vpush	{d8}
 800397e:	eef0 8a40 	vmov.f32	s17, s0
    // calculate every terms
    float pterm = error**handler->kp;
    //float dterm = (error-handler->old_error)**handler->kd;
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 8003982:	ed90 7a07 	vldr	s14, [r0, #28]
    float pterm = error**handler->kp;
 8003986:	6803      	ldr	r3, [r0, #0]
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 8003988:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800398c:	edd0 7a06 	vldr	s15, [r0, #24]
{
 8003990:	4604      	mov	r4, r0
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 8003992:	ee38 7ac7 	vsub.f32	s14, s17, s14
    float pterm = error**handler->kp;
 8003996:	ed93 0a00 	vldr	s0, [r3]
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 800399a:	6883      	ldr	r3, [r0, #8]
 800399c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    float pterm = error**handler->kp;
 80039a0:	ee28 0a80 	vmul.f32	s0, s17, s0
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80039a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	ee35 5b46 	vsub.f64	d5, d5, d6
 80039b0:	ed90 6a08 	vldr	s12, [r0, #32]
    // window integral
    handler->integral_window[handler->integral_window_index] = error;
 80039b4:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80039b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039bc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    handler->integral_window[handler->integral_window_index] = error;
 80039c0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    ++handler->integral_window_index;
 80039c4:	3301      	adds	r3, #1
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80039c6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    handler->integral_window[handler->integral_window_index] = error;
 80039ca:	edc2 8a09 	vstr	s17, [r2, #36]	; 0x24
    if(handler->integral_window_index > handler->integral_window_size)
 80039ce:	6942      	ldr	r2, [r0, #20]
    ++handler->integral_window_index;
 80039d0:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80039d4:	eea5 7b06 	vfma.f64	d7, d5, d6
    if(handler->integral_window_index > handler->integral_window_size)
 80039d8:	4293      	cmp	r3, r2
 80039da:	f500 7209 	add.w	r2, r0, #548	; 0x224
    	handler->integral_window_index = 0;
 80039de:	bf84      	itt	hi
 80039e0:	2300      	movhi	r3, #0
 80039e2:	f8c0 3224 	strhi.w	r3, [r0, #548]	; 0x224
 80039e6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    float dterm = (1.0-handler->alpha)*handler->old_dterm + handler->alpha*(error-handler->old_error)**handler->kd;
 80039ea:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
    float iterm = 0.0;
 80039ee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003a28 <process_pid_win+0xb0>
    for(int index=0;index<PID_WIN_SIZE;++index)
    	iterm+=handler->integral_window[index];
 80039f2:	ecb3 7a01 	vldmia	r3!, {s14}
    for(int index=0;index<PID_WIN_SIZE;++index)
 80039f6:	4293      	cmp	r3, r2
    	iterm+=handler->integral_window[index];
 80039f8:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(int index=0;index<PID_WIN_SIZE;++index)
 80039fc:	d1f9      	bne.n	80039f2 <process_pid_win+0x7a>
    iterm *= *handler->ki;
 80039fe:	6863      	ldr	r3, [r4, #4]
    // sum up every terms and clamp the output
    float output = pterm + iterm + dterm;
	float output_clamped =  fconstrain(output,handler->min,handler->max);
 8003a00:	ed94 1a04 	vldr	s2, [r4, #16]
    float output = pterm + iterm + dterm;
 8003a04:	ed93 7a00 	vldr	s14, [r3]
	float output_clamped =  fconstrain(output,handler->min,handler->max);
 8003a08:	edd4 0a03 	vldr	s1, [r4, #12]
    float output = pterm + iterm + dterm;
 8003a0c:	eea7 0a87 	vfma.f32	s0, s15, s14
	float output_clamped =  fconstrain(output,handler->min,handler->max);
 8003a10:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003a14:	f7ff ff35 	bl	8003882 <fconstrain>
	// update this PID & calculate new condition
	handler->old_error = error;
 8003a18:	edc4 8a07 	vstr	s17, [r4, #28]
	handler->old_dterm = dterm;
 8003a1c:	ed84 8a08 	vstr	s16, [r4, #32]
  	// end up the process without actuator saturation
   	return output_clamped;
}
 8003a20:	ecbd 8b02 	vpop	{d8}
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	bf00      	nop
 8003a28:	00000000 	.word	0x00000000

08003a2c <HAL_SYSTICK_Callback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_SYSTICK_Callback(void)
{
 8003a2c:	4770      	bx	lr
	...

08003a30 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a30:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <SystemClock_Config+0xb8>)
 8003a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8003a38:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
{
 8003a3c:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a40:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a42:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a4c:	4b27      	ldr	r3, [pc, #156]	; (8003aec <SystemClock_Config+0xbc>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a58:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a5e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a60:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a66:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a68:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a6a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a70:	2300      	movs	r3, #0
 8003a72:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a74:	2308      	movs	r3, #8
 8003a76:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003a78:	23d8      	movs	r3, #216	; 0xd8
 8003a7a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a7c:	f7fd fc50 	bl	8001320 <HAL_RCC_OscConfig>
 8003a80:	b100      	cbz	r0, 8003a84 <SystemClock_Config+0x54>
 8003a82:	e7fe      	b.n	8003a82 <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a84:	f7fd fc14 	bl	80012b0 <HAL_PWREx_EnableOverDrive>
 8003a88:	b100      	cbz	r0, 8003a8c <SystemClock_Config+0x5c>
 8003a8a:	e7fe      	b.n	8003a8a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a8c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a8e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003a90:	2107      	movs	r1, #7
 8003a92:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a94:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a9a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a9c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003aa4:	f7fd fdfa 	bl	800169c <HAL_RCC_ClockConfig>
 8003aa8:	b100      	cbz	r0, 8003aac <SystemClock_Config+0x7c>
 8003aaa:	e7fe      	b.n	8003aaa <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1;
 8003aac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8003ab0:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ab2:	902d      	str	r0, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ab4:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1;
 8003ab6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ab8:	f7fd fea6 	bl	8001808 <HAL_RCCEx_PeriphCLKConfig>
 8003abc:	4604      	mov	r4, r0
 8003abe:	b100      	cbz	r0, 8003ac2 <SystemClock_Config+0x92>
 8003ac0:	e7fe      	b.n	8003ac0 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003ac2:	f7fd fe7b 	bl	80017bc <HAL_RCC_GetHCLKFreq>
 8003ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aca:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ace:	f7fc fc45 	bl	800035c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003ad2:	2004      	movs	r0, #4
 8003ad4:	f7fc fc58 	bl	8000388 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003ad8:	4622      	mov	r2, r4
 8003ada:	4621      	mov	r1, r4
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	f7fc fbf8 	bl	80002d4 <HAL_NVIC_SetPriority>
}
 8003ae4:	b038      	add	sp, #224	; 0xe0
 8003ae6:	bd10      	pop	{r4, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000

08003af0 <main>:
{
 8003af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af4:	4d9c      	ldr	r5, [pc, #624]	; (8003d68 <main+0x278>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_nRESET_GPIO_Port, SPI_nRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L6470_nBusy_Pin L6470_nFlag_Pin */
  GPIO_InitStruct.Pin = L6470_nBusy_Pin|L6470_nFlag_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af6:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : SPI1_nCS_Pin */
  GPIO_InitStruct.Pin = SPI1_nCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af8:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003afa:	2711      	movs	r7, #17
{
 8003afc:	ed2d 8b06 	vpush	{d8-d10}
 8003b00:	b0b7      	sub	sp, #220	; 0xdc
  HAL_Init();
 8003b02:	f7fc fbad 	bl	8000260 <HAL_Init>
  SystemClock_Config();
 8003b06:	f7ff ff93 	bl	8003a30 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, SPI1_nCS_Pin|M1_STEP_Pin|M2_STEP_Pin, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 7144 	mov.w	r1, #784	; 0x310
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	f043 0304 	orr.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOA, SPI1_nCS_Pin|M1_STEP_Pin|M2_STEP_Pin, GPIO_PIN_RESET);
 8003b16:	4895      	ldr	r0, [pc, #596]	; (8003d6c <main+0x27c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b18:	632b      	str	r3, [r5, #48]	; 0x30
 8003b1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	9306      	str	r3, [sp, #24]
 8003b22:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	632b      	str	r3, [r5, #48]	; 0x30
 8003b2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	9307      	str	r3, [sp, #28]
 8003b34:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b38:	f043 0308 	orr.w	r3, r3, #8
 8003b3c:	632b      	str	r3, [r5, #48]	; 0x30
 8003b3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	9308      	str	r3, [sp, #32]
 8003b46:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b4a:	f043 0302 	orr.w	r3, r3, #2
 8003b4e:	632b      	str	r3, [r5, #48]	; 0x30
 8003b50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	9309      	str	r3, [sp, #36]	; 0x24
 8003b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b5c:	f043 0310 	orr.w	r3, r3, #16
 8003b60:	632b      	str	r3, [r5, #48]	; 0x30
 8003b62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	930a      	str	r3, [sp, #40]	; 0x28
 8003b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOA, SPI1_nCS_Pin|M1_STEP_Pin|M2_STEP_Pin, GPIO_PIN_RESET);
 8003b6c:	f7fd f84a 	bl	8000c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M2_DIR_Pin|M1_DIR_Pin|M2_ENABLE_Pin, GPIO_PIN_RESET);
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003b76:	487e      	ldr	r0, [pc, #504]	; (8003d70 <main+0x280>)
 8003b78:	f7fd f844 	bl	8000c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_ENABLE_GPIO_Port, M1_ENABLE_Pin, GPIO_PIN_RESET);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2101      	movs	r1, #1
 8003b80:	487c      	ldr	r0, [pc, #496]	; (8003d74 <main+0x284>)
 8003b82:	f7fd f83f 	bl	8000c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_nRESET_GPIO_Port, SPI_nRESET_Pin, GPIO_PIN_RESET);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2120      	movs	r1, #32
 8003b8a:	487b      	ldr	r0, [pc, #492]	; (8003d78 <main+0x288>)
 8003b8c:	f7fd f83a 	bl	8000c04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = L6470_nBusy_Pin|L6470_nFlag_Pin;
 8003b90:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b92:	a916      	add	r1, sp, #88	; 0x58
 8003b94:	4876      	ldr	r0, [pc, #472]	; (8003d70 <main+0x280>)
  GPIO_InitStruct.Pin = L6470_nBusy_Pin|L6470_nFlag_Pin;
 8003b96:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b98:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b9c:	f7fc ff48 	bl	8000a30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_nCS_Pin;
 8003ba0:	2310      	movs	r3, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_nCS_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	a916      	add	r1, sp, #88	; 0x58
 8003ba4:	4871      	ldr	r0, [pc, #452]	; (8003d6c <main+0x27c>)
  GPIO_InitStruct.Pin = SPI1_nCS_Pin;
 8003ba6:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003ba8:	9717      	str	r7, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003baa:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(SPI1_nCS_GPIO_Port, &GPIO_InitStruct);
 8003bae:	f7fc ff3f 	bl	8000a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_STEP_Pin M2_STEP_Pin */
  GPIO_InitStruct.Pin = M1_STEP_Pin|M2_STEP_Pin;
 8003bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb6:	a916      	add	r1, sp, #88	; 0x58
 8003bb8:	486c      	ldr	r0, [pc, #432]	; (8003d6c <main+0x27c>)
  GPIO_InitStruct.Pin = M1_STEP_Pin|M2_STEP_Pin;
 8003bba:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbc:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc0:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f7fc ff35 	bl	8000a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_DIR_Pin M1_DIR_Pin M2_ENABLE_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin|M1_DIR_Pin|M2_ENABLE_Pin;
 8003bc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bca:	a916      	add	r1, sp, #88	; 0x58
 8003bcc:	4868      	ldr	r0, [pc, #416]	; (8003d70 <main+0x280>)
  GPIO_InitStruct.Pin = M2_DIR_Pin|M1_DIR_Pin|M2_ENABLE_Pin;
 8003bce:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd0:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd6:	f7fc ff2b 	bl	8000a30 <HAL_GPIO_Init>
  /*Configure GPIO pin : M1_ENABLE_Pin */
  GPIO_InitStruct.Pin = M1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(M1_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003bda:	a916      	add	r1, sp, #88	; 0x58
 8003bdc:	4865      	ldr	r0, [pc, #404]	; (8003d74 <main+0x284>)
  GPIO_InitStruct.Pin = M1_ENABLE_Pin;
 8003bde:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be0:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be4:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(M1_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003be6:	f7fc ff23 	bl	8000a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_nRESET_Pin */
  GPIO_InitStruct.Pin = SPI_nRESET_Pin;
 8003bea:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_nRESET_GPIO_Port, &GPIO_InitStruct);
 8003bec:	a916      	add	r1, sp, #88	; 0x58
 8003bee:	4862      	ldr	r0, [pc, #392]	; (8003d78 <main+0x288>)
  GPIO_InitStruct.Pin = SPI_nRESET_Pin;
 8003bf0:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003bf2:	9717      	str	r7, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf4:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(SPI_nRESET_GPIO_Port, &GPIO_InitStruct);
 8003bf8:	f7fc ff1a 	bl	8000a30 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bfc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003bfe:	4622      	mov	r2, r4
 8003c00:	4621      	mov	r1, r4
 8003c02:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c08:	632b      	str	r3, [r5, #48]	; 0x30
 8003c0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2c1.Instance = I2C1;
 8003c0c:	4d5b      	ldr	r5, [pc, #364]	; (8003d7c <main+0x28c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c12:	9305      	str	r3, [sp, #20]
 8003c14:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003c16:	f7fc fb5d 	bl	80002d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c1a:	200b      	movs	r0, #11
 8003c1c:	f7fc fb92 	bl	8000344 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003c20:	4621      	mov	r1, r4
 8003c22:	4622      	mov	r2, r4
 8003c24:	4638      	mov	r0, r7
 8003c26:	f7fc fb55 	bl	80002d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f7fc fb8a 	bl	8000344 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.Timing = 0x6000030D;
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <main+0x290>)
 8003c32:	f8df c168 	ldr.w	ip, [pc, #360]	; 8003d9c <main+0x2ac>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c36:	4628      	mov	r0, r5
  hi2c1.Init.OwnAddress1 = 0;
 8003c38:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c3a:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c3c:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c3e:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c40:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c42:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c44:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x6000030D;
 8003c46:	e885 1008 	stmia.w	r5, {r3, ip}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c4a:	f7fd f91e 	bl	8000e8a <HAL_I2C_Init>
 8003c4e:	4601      	mov	r1, r0
 8003c50:	b100      	cbz	r0, 8003c54 <main+0x164>
 8003c52:	e7fe      	b.n	8003c52 <main+0x162>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c54:	4628      	mov	r0, r5
 8003c56:	f7fd fadf 	bl	8001218 <HAL_I2CEx_ConfigAnalogFilter>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	b100      	cbz	r0, 8003c60 <main+0x170>
 8003c5e:	e7fe      	b.n	8003c5e <main+0x16e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c60:	4628      	mov	r0, r5
 8003c62:	f7fd faff 	bl	8001264 <HAL_I2CEx_ConfigDigitalFilter>
 8003c66:	b100      	cbz	r0, 8003c6a <main+0x17a>
 8003c68:	e7fe      	b.n	8003c68 <main+0x178>
  hspi1.Instance = SPI1;
 8003c6a:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <main+0x294>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c6c:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8003c70:	4a45      	ldr	r2, [pc, #276]	; (8003d88 <main+0x298>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c72:	6098      	str	r0, [r3, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c74:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c76:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c78:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c7a:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7c:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c7e:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c80:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c82:	e883 4004 	stmia.w	r3, {r2, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003c92:	2228      	movs	r2, #40	; 0x28
 8003c94:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 7;
 8003c96:	2207      	movs	r2, #7
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c9e:	f7fe f861 	bl	8001d64 <HAL_SPI_Init>
 8003ca2:	b100      	cbz	r0, 8003ca6 <main+0x1b6>
 8003ca4:	e7fe      	b.n	8003ca4 <main+0x1b4>
  huart8.Instance = UART8;
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <main+0x29c>)
  huart8.Init.BaudRate = 115200;
 8003ca8:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8003cac:	4a38      	ldr	r2, [pc, #224]	; (8003d90 <main+0x2a0>)
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003cae:	6098      	str	r0, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003cb0:	60d8      	str	r0, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003cb2:	6118      	str	r0, [r3, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cb4:	6198      	str	r0, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb6:	61d8      	str	r0, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cb8:	6218      	str	r0, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cba:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003cbc:	4618      	mov	r0, r3
  huart8.Init.BaudRate = 115200;
 8003cbe:	e883 0084 	stmia.w	r3, {r2, r7}
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003cc6:	f7fe ffde 	bl	8002c86 <HAL_UART_Init>
 8003cca:	b100      	cbz	r0, 8003cce <main+0x1de>
 8003ccc:	e7fe      	b.n	8003ccc <main+0x1dc>
  htim8.Instance = TIM8;
 8003cce:	4c31      	ldr	r4, [pc, #196]	; (8003d94 <main+0x2a4>)
  htim8.Init.Prescaler = 215;
 8003cd0:	25d7      	movs	r5, #215	; 0xd7
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <main+0x2a8>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cd4:	60a0      	str	r0, [r4, #8]
 8003cd6:	46a1      	mov	r9, r4
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd8:	6120      	str	r0, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 8003cda:	6160      	str	r0, [r4, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cdc:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003cde:	4620      	mov	r0, r4
  htim8.Init.Prescaler = 215;
 8003ce0:	e884 0028 	stmia.w	r4, {r3, r5}
  htim8.Init.Period = 0xffff;
 8003ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ce8:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003cea:	f7fe f9db 	bl	80020a4 <HAL_TIM_Base_Init>
 8003cee:	b100      	cbz	r0, 8003cf2 <main+0x202>
 8003cf0:	e7fe      	b.n	8003cf0 <main+0x200>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf2:	ad36      	add	r5, sp, #216	; 0xd8
 8003cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003cf8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cfa:	f845 3da0 	str.w	r3, [r5, #-160]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f7fe fad0 	bl	80022a4 <HAL_TIM_ConfigClockSource>
 8003d04:	b100      	cbz	r0, 8003d08 <main+0x218>
 8003d06:	e7fe      	b.n	8003d06 <main+0x216>
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7fe f9e5 	bl	80020d8 <HAL_TIM_IC_Init>
 8003d0e:	b100      	cbz	r0, 8003d12 <main+0x222>
 8003d10:	e7fe      	b.n	8003d10 <main+0x220>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003d12:	2304      	movs	r3, #4
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d14:	9018      	str	r0, [sp, #96]	; 0x60
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003d16:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchronization(&htim8, &sSlaveConfig) != HAL_OK)
 8003d18:	a916      	add	r1, sp, #88	; 0x58
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003d1a:	9316      	str	r3, [sp, #88]	; 0x58
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003d1c:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 8003d1e:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_SlaveConfigSynchronization(&htim8, &sSlaveConfig) != HAL_OK)
 8003d20:	4620      	mov	r0, r4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003d22:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_SlaveConfigSynchronization(&htim8, &sSlaveConfig) != HAL_OK)
 8003d24:	f7fe fb4c 	bl	80023c0 <HAL_TIM_SlaveConfigSynchronization>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	b100      	cbz	r0, 8003d2e <main+0x23e>
 8003d2c:	e7fe      	b.n	8003d2c <main+0x23c>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d2e:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003d30:	a912      	add	r1, sp, #72	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003d32:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigIC.ICFilter = 0;
 8003d34:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003d36:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003d38:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003d3a:	f7fe fa21 	bl	8002180 <HAL_TIM_IC_ConfigChannel>
 8003d3e:	b100      	cbz	r0, 8003d42 <main+0x252>
 8003d40:	e7fe      	b.n	8003d40 <main+0x250>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003d42:	2702      	movs	r7, #2
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003d44:	2204      	movs	r2, #4
 8003d46:	a912      	add	r1, sp, #72	; 0x48
 8003d48:	4812      	ldr	r0, [pc, #72]	; (8003d94 <main+0x2a4>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003d4a:	9712      	str	r7, [sp, #72]	; 0x48
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003d4c:	9713      	str	r7, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003d4e:	f7fe fa17 	bl	8002180 <HAL_TIM_IC_ConfigChannel>
 8003d52:	b100      	cbz	r0, 8003d56 <main+0x266>
 8003d54:	e7fe      	b.n	8003d54 <main+0x264>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d56:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d58:	a90b      	add	r1, sp, #44	; 0x2c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d5a:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d5c:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d5e:	480d      	ldr	r0, [pc, #52]	; (8003d94 <main+0x2a4>)
 8003d60:	f7fe fb90 	bl	8002484 <HAL_TIMEx_MasterConfigSynchronization>
 8003d64:	b1e0      	cbz	r0, 8003da0 <main+0x2b0>
 8003d66:	e7fe      	b.n	8003d66 <main+0x276>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020800 	.word	0x40020800
 8003d74:	40020c00 	.word	0x40020c00
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	200026f4 	.word	0x200026f4
 8003d80:	40005400 	.word	0x40005400
 8003d84:	200028b8 	.word	0x200028b8
 8003d88:	40013000 	.word	0x40013000
 8003d8c:	20002824 	.word	0x20002824
 8003d90:	40007c00 	.word	0x40007c00
 8003d94:	20002674 	.word	0x20002674
 8003d98:	40010400 	.word	0x40010400
 8003d9c:	6000030d 	.word	0x6000030d
  htim4.Instance = TIM4;
 8003da0:	4c34      	ldr	r4, [pc, #208]	; (8003e74 <main+0x384>)
  htim4.Init.Prescaler = 107;
 8003da2:	266b      	movs	r6, #107	; 0x6b
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <main+0x388>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da6:	60a0      	str	r0, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da8:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003daa:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003dac:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 107;
 8003dae:	e884 0048 	stmia.w	r4, {r3, r6}
  htim4.Init.Period = 0xffff;
 8003db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db6:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003db8:	f7fe f974 	bl	80020a4 <HAL_TIM_Base_Init>
 8003dbc:	b100      	cbz	r0, 8003dc0 <main+0x2d0>
 8003dbe:	e7fe      	b.n	8003dbe <main+0x2ce>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003dca:	f7fe fa6b 	bl	80022a4 <HAL_TIM_ConfigClockSource>
 8003dce:	b100      	cbz	r0, 8003dd2 <main+0x2e2>
 8003dd0:	e7fe      	b.n	8003dd0 <main+0x2e0>
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f7fe f980 	bl	80020d8 <HAL_TIM_IC_Init>
 8003dd8:	b100      	cbz	r0, 8003ddc <main+0x2ec>
 8003dda:	e7fe      	b.n	8003dda <main+0x2ea>
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003ddc:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003dde:	2504      	movs	r5, #4
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003de0:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchronization(&htim4, &sSlaveConfig) != HAL_OK)
 8003de2:	a916      	add	r1, sp, #88	; 0x58
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003de4:	9019      	str	r0, [sp, #100]	; 0x64
  sSlaveConfig.TriggerFilter = 0;
 8003de6:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_SlaveConfigSynchronization(&htim4, &sSlaveConfig) != HAL_OK)
 8003de8:	4620      	mov	r0, r4
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003dea:	9516      	str	r5, [sp, #88]	; 0x58
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003dec:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_SlaveConfigSynchronization(&htim4, &sSlaveConfig) != HAL_OK)
 8003dee:	f7fe fae7 	bl	80023c0 <HAL_TIM_SlaveConfigSynchronization>
 8003df2:	4602      	mov	r2, r0
 8003df4:	b100      	cbz	r0, 8003df8 <main+0x308>
 8003df6:	e7fe      	b.n	8003df6 <main+0x306>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003df8:	2301      	movs	r3, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003dfa:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003dfc:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003dfe:	a912      	add	r1, sp, #72	; 0x48
  sConfigIC.ICFilter = 0;
 8003e00:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e02:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e04:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e06:	f7fe f9bb 	bl	8002180 <HAL_TIM_IC_ConfigChannel>
 8003e0a:	b100      	cbz	r0, 8003e0e <main+0x31e>
 8003e0c:	e7fe      	b.n	8003e0c <main+0x31c>
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003e0e:	462a      	mov	r2, r5
 8003e10:	a912      	add	r1, sp, #72	; 0x48
 8003e12:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003e14:	9712      	str	r7, [sp, #72]	; 0x48
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003e16:	9713      	str	r7, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003e18:	f7fe f9b2 	bl	8002180 <HAL_TIM_IC_ConfigChannel>
 8003e1c:	b100      	cbz	r0, 8003e20 <main+0x330>
 8003e1e:	e7fe      	b.n	8003e1e <main+0x32e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e20:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e22:	a90b      	add	r1, sp, #44	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e24:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7fe fb2c 	bl	8002484 <HAL_TIMEx_MasterConfigSynchronization>
 8003e2c:	b100      	cbz	r0, 8003e30 <main+0x340>
 8003e2e:	e7fe      	b.n	8003e2e <main+0x33e>
  htim2.Instance = TIM2;
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <main+0x38c>)
  htim2.Init.Prescaler = 3;
 8003e32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e36:	2203      	movs	r2, #3
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e38:	6098      	str	r0, [r3, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e3a:	6118      	str	r0, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3c:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e3e:	4618      	mov	r0, r3
  htim2.Init.Period = 107;
 8003e40:	60de      	str	r6, [r3, #12]
  htim2.Init.Prescaler = 3;
 8003e42:	e883 0006 	stmia.w	r3, {r1, r2}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e46:	f7fe f92d 	bl	80020a4 <HAL_TIM_Base_Init>
 8003e4a:	b100      	cbz	r0, 8003e4e <main+0x35e>
 8003e4c:	e7fe      	b.n	8003e4c <main+0x35c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e4e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e52:	a916      	add	r1, sp, #88	; 0x58
 8003e54:	4809      	ldr	r0, [pc, #36]	; (8003e7c <main+0x38c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e56:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e58:	f7fe fa24 	bl	80022a4 <HAL_TIM_ConfigClockSource>
 8003e5c:	b100      	cbz	r0, 8003e60 <main+0x370>
 8003e5e:	e7fe      	b.n	8003e5e <main+0x36e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e60:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e62:	a912      	add	r1, sp, #72	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e64:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e66:	4805      	ldr	r0, [pc, #20]	; (8003e7c <main+0x38c>)
 8003e68:	f7fe fb0c 	bl	8002484 <HAL_TIMEx_MasterConfigSynchronization>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	b138      	cbz	r0, 8003e80 <main+0x390>
 8003e70:	e7fe      	b.n	8003e70 <main+0x380>
 8003e72:	bf00      	nop
 8003e74:	200026b4 	.word	0x200026b4
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	2000291c 	.word	0x2000291c
	HAL_TIM_IC_Start(&htim8,TIM_CHANNEL_1); // Rx1
 8003e80:	4601      	mov	r1, r0
 8003e82:	48bb      	ldr	r0, [pc, #748]	; (8004170 <main+0x680>)
 8003e84:	f7fe faf1 	bl	800246a <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim8,TIM_CHANNEL_2);
 8003e88:	2104      	movs	r1, #4
 8003e8a:	48b9      	ldr	r0, [pc, #740]	; (8004170 <main+0x680>)
 8003e8c:	f7fe faed 	bl	800246a <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1); // Rx2
 8003e90:	4621      	mov	r1, r4
 8003e92:	48b8      	ldr	r0, [pc, #736]	; (8004174 <main+0x684>)
 8003e94:	f7fe fae9 	bl	800246a <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_2);
 8003e98:	2104      	movs	r1, #4
 8003e9a:	48b6      	ldr	r0, [pc, #728]	; (8004174 <main+0x684>)
 8003e9c:	f7fe fae5 	bl	800246a <HAL_TIM_IC_Start>
	HAL_Configuration_Reload();
 8003ea0:	f7fe ff24 	bl	8002cec <HAL_Configuration_Reload>
	HAL_Imu_Init();
 8003ea4:	f7ff f9d0 	bl	8003248 <HAL_Imu_Init>
	HAL_Imu_Process();
 8003ea8:	f7ff fb0a 	bl	80034c0 <HAL_Imu_Process>
	HAL_Stepper_Motor_Add(
 8003eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb4:	49b0      	ldr	r1, [pc, #704]	; (8004178 <main+0x688>)
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ebc:	48af      	ldr	r0, [pc, #700]	; (800417c <main+0x68c>)
 8003ebe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003ec2:	f7ff fc4d 	bl	8003760 <HAL_Stepper_Motor_Add>
	HAL_Stepper_Motor_Add(
 8003ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ece:	49aa      	ldr	r1, [pc, #680]	; (8004178 <main+0x688>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ed6:	48aa      	ldr	r0, [pc, #680]	; (8004180 <main+0x690>)
 8003ed8:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8003edc:	f7ff fc40 	bl	8003760 <HAL_Stepper_Motor_Add>
	HAL_Stepper_Motor_Init(&htim2);
 8003ee0:	48a8      	ldr	r0, [pc, #672]	; (8004184 <main+0x694>)
 8003ee2:	f7ff fc37 	bl	8003754 <HAL_Stepper_Motor_Init>
	HAL_Stepper_Motor_Set_Speed(&m1,0);
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	48a4      	ldr	r0, [pc, #656]	; (800417c <main+0x68c>)
 8003eea:	f7ff fc61 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
	HAL_Stepper_Motor_Set_Speed(&m2,0);
 8003eee:	4621      	mov	r1, r4
 8003ef0:	48a3      	ldr	r0, [pc, #652]	; (8004180 <main+0x690>)
 8003ef2:	f7ff fc5d 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
	HAL_GPIO_WritePin(M1_ENABLE_GPIO_Port,M1_ENABLE_Pin,GPIO_PIN_SET); //! RESET to run
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	48a3      	ldr	r0, [pc, #652]	; (8004188 <main+0x698>)
 8003efa:	4611      	mov	r1, r2
		tx_data_buffer[0]=configuration_data[IMU_PITCH_REF];
 8003efc:	4ca3      	ldr	r4, [pc, #652]	; (800418c <main+0x69c>)
	HAL_GPIO_WritePin(M1_ENABLE_GPIO_Port,M1_ENABLE_Pin,GPIO_PIN_SET); //! RESET to run
 8003efe:	f7fc fe81 	bl	8000c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_ENABLE_GPIO_Port,M2_ENABLE_Pin,GPIO_PIN_SET);
 8003f02:	2201      	movs	r2, #1
 8003f04:	4629      	mov	r1, r5
 8003f06:	48a2      	ldr	r0, [pc, #648]	; (8004190 <main+0x6a0>)
 8003f08:	f7fc fe7c 	bl	8000c04 <HAL_GPIO_WritePin>
	HAL_Serial_Init(&huart8,&com);
 8003f0c:	49a1      	ldr	r1, [pc, #644]	; (8004194 <main+0x6a4>)
 8003f0e:	48a2      	ldr	r0, [pc, #648]	; (8004198 <main+0x6a8>)
 8003f10:	f7ff fb6c 	bl	80035ec <HAL_Serial_Init>
		tx_data_buffer[0]=configuration_data[IMU_PITCH_REF];
 8003f14:	6823      	ldr	r3, [r4, #0]
		int enc_ret = protocol_encode(
 8003f16:	aa16      	add	r2, sp, #88	; 0x58
 8003f18:	2111      	movs	r1, #17
		tx_data_buffer[0]=configuration_data[IMU_PITCH_REF];
 8003f1a:	9316      	str	r3, [sp, #88]	; 0x58
		tx_data_buffer[1]=configuration_data[CTRL_PKP];
 8003f1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		int enc_ret = protocol_encode(
 8003f1e:	489f      	ldr	r0, [pc, #636]	; (800419c <main+0x6ac>)
		tx_data_buffer[1]=configuration_data[CTRL_PKP];
 8003f20:	9317      	str	r3, [sp, #92]	; 0x5c
		tx_data_buffer[2]=configuration_data[CTRL_PKI];
 8003f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f24:	9318      	str	r3, [sp, #96]	; 0x60
		tx_data_buffer[3]=configuration_data[CTRL_PKD];
 8003f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f28:	9319      	str	r3, [sp, #100]	; 0x64
		tx_data_buffer[4]=configuration_data[CTRL_XKP];
 8003f2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f2c:	931a      	str	r3, [sp, #104]	; 0x68
		tx_data_buffer[5]=configuration_data[CTRL_XKI];
 8003f2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f30:	931b      	str	r3, [sp, #108]	; 0x6c
		tx_data_buffer[6]=configuration_data[CTRL_XKD];
 8003f32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f34:	931c      	str	r3, [sp, #112]	; 0x70
		tx_data_buffer[7]=configuration_data[CTRL_XFILTER];
 8003f36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f38:	931d      	str	r3, [sp, #116]	; 0x74
		tx_data_buffer[8]=configuration_data[CTRL_YFILTER];
 8003f3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f3c:	931e      	str	r3, [sp, #120]	; 0x78
		tx_data_buffer[9]=configuration_data[CTRL_PFILTER];
 8003f3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f40:	931f      	str	r3, [sp, #124]	; 0x7c
		int enc_ret = protocol_encode(
 8003f42:	2354      	movs	r3, #84	; 0x54
 8003f44:	f7fe ff0a 	bl	8002d5c <protocol_encode>
		if(enc_ret>0)
 8003f48:	1e02      	subs	r2, r0, #0
 8003f4a:	9403      	str	r4, [sp, #12]
 8003f4c:	dd03      	ble.n	8003f56 <main+0x466>
		HAL_Serial_Write(&com, tx_protocol_buffer, enc_ret );
 8003f4e:	4993      	ldr	r1, [pc, #588]	; (800419c <main+0x6ac>)
 8003f50:	4890      	ldr	r0, [pc, #576]	; (8004194 <main+0x6a4>)
 8003f52:	f7ff fb95 	bl	8003680 <HAL_Serial_Write>
		HAL_Delay(3);
 8003f56:	2003      	movs	r0, #3
	  armed = false;
 8003f58:	4c91      	ldr	r4, [pc, #580]	; (80041a0 <main+0x6b0>)
		HAL_Delay(3);
 8003f5a:	f7fc f99b 	bl	8000294 <HAL_Delay>
	reset_pid_win(&pid_pitch);
 8003f5e:	4891      	ldr	r0, [pc, #580]	; (80041a4 <main+0x6b4>)
 8003f60:	f7ff fcfa 	bl	8003958 <reset_pid_win>
	reset_pid(&pid_x);
 8003f64:	4890      	ldr	r0, [pc, #576]	; (80041a8 <main+0x6b8>)
 8003f66:	f7ff fc9d 	bl	80038a4 <reset_pid>
	reset_ewma( &m1_ewma );
 8003f6a:	4890      	ldr	r0, [pc, #576]	; (80041ac <main+0x6bc>)
 8003f6c:	f7ff fc74 	bl	8003858 <reset_ewma>
	reset_ewma( &m2_ewma );
 8003f70:	488f      	ldr	r0, [pc, #572]	; (80041b0 <main+0x6c0>)
 8003f72:	f7ff fc71 	bl	8003858 <reset_ewma>
	reset_ewma( &xspeed_ewma );
 8003f76:	488f      	ldr	r0, [pc, #572]	; (80041b4 <main+0x6c4>)
 8003f78:	f7ff fc6e 	bl	8003858 <reset_ewma>
	reset_ewma( &wspeed_ewma );
 8003f7c:	488e      	ldr	r0, [pc, #568]	; (80041b8 <main+0x6c8>)
 8003f7e:	f7ff fc6b 	bl	8003858 <reset_ewma>
	reset_ewma( &e_ptich_correction );
 8003f82:	488e      	ldr	r0, [pc, #568]	; (80041bc <main+0x6cc>)
 8003f84:	f7ff fc68 	bl	8003858 <reset_ewma>
				pid_x_output = 0.0;
 8003f88:	4d8d      	ldr	r5, [pc, #564]	; (80041c0 <main+0x6d0>)
	  armed = false;
 8003f8a:	2300      	movs	r3, #0
			distance = (float)(abs_pos)*(M_PI*0.1/(400.0*16.0))+distance_CoG*sin(HAL_Imu_Angle(IMU_ANGLE_PITCH)*M_PI/180); // m
 8003f8c:	ed9f 8b6a 	vldr	d8, [pc, #424]	; 8004138 <main+0x648>
	  armed = false;
 8003f90:	7023      	strb	r3, [r4, #0]
	uint32_t last_time = HAL_GetTick();
 8003f92:	f7fc f979 	bl	8000288 <HAL_GetTick>
 8003f96:	eeb0 9b48 	vmov.f64	d9, d8
	  if(current_time>=last_time+5)
 8003f9a:	1d46      	adds	r6, r0, #5
	  APP_Protocol_Interpreter_Process();
 8003f9c:	f7fe ff3e 	bl	8002e1c <APP_Protocol_Interpreter_Process>
	  uint32_t current_time = HAL_GetTick();
 8003fa0:	f7fc f972 	bl	8000288 <HAL_GetTick>
	  if(current_time>=last_time+5)
 8003fa4:	42b0      	cmp	r0, r6
	  uint32_t current_time = HAL_GetTick();
 8003fa6:	4680      	mov	r8, r0
	  if(current_time>=last_time+5)
 8003fa8:	d3f8      	bcc.n	8003f9c <main+0x4ac>
			abs_pos_0 = HAL_Stepper_Motor_Get_Position(&m1);
 8003faa:	4e86      	ldr	r6, [pc, #536]	; (80041c4 <main+0x6d4>)
			HAL_Imu_Process();
 8003fac:	f7ff fa88 	bl	80034c0 <HAL_Imu_Process>
			abs_pos_0 = HAL_Stepper_Motor_Get_Position(&m1);
 8003fb0:	4872      	ldr	r0, [pc, #456]	; (800417c <main+0x68c>)
 8003fb2:	f7ff fc0d 	bl	80037d0 <HAL_Stepper_Motor_Get_Position>
 8003fb6:	6030      	str	r0, [r6, #0]
			abs_pos_1 = HAL_Stepper_Motor_Get_Position(&m2);
 8003fb8:	4871      	ldr	r0, [pc, #452]	; (8004180 <main+0x690>)
 8003fba:	f7ff fc09 	bl	80037d0 <HAL_Stepper_Motor_Get_Position>
			abs_pos_last = abs_pos;
 8003fbe:	4f82      	ldr	r7, [pc, #520]	; (80041c8 <main+0x6d8>)
			abs_pos_1 = HAL_Stepper_Motor_Get_Position(&m2);
 8003fc0:	4b82      	ldr	r3, [pc, #520]	; (80041cc <main+0x6dc>)
			abs_pos = (abs_pos_1-abs_pos_0)/2;
 8003fc2:	6832      	ldr	r2, [r6, #0]
			abs_pos_1 = HAL_Stepper_Motor_Get_Position(&m2);
 8003fc4:	6018      	str	r0, [r3, #0]
			abs_pos_last = abs_pos;
 8003fc6:	f8df b220 	ldr.w	fp, [pc, #544]	; 80041e8 <main+0x6f8>
			abs_pos = (abs_pos_1-abs_pos_0)/2;
 8003fca:	1a86      	subs	r6, r0, r2
			abs_pos_last = abs_pos;
 8003fcc:	683b      	ldr	r3, [r7, #0]
			delta_pos = (abs_pos_1+abs_pos_0)/2;
 8003fce:	4410      	add	r0, r2
			abs_pos_last = abs_pos;
 8003fd0:	f8cb 3000 	str.w	r3, [fp]
			abs_pos = (abs_pos_1-abs_pos_0)/2;
 8003fd4:	2302      	movs	r3, #2
			delta_pos = (abs_pos_1+abs_pos_0)/2;
 8003fd6:	fb90 f0f3 	sdiv	r0, r0, r3
			abs_pos = (abs_pos_1-abs_pos_0)/2;
 8003fda:	fb96 f6f3 	sdiv	r6, r6, r3
			delta_pos = (abs_pos_1+abs_pos_0)/2;
 8003fde:	4b7c      	ldr	r3, [pc, #496]	; (80041d0 <main+0x6e0>)
			abs_pos = (abs_pos_1-abs_pos_0)/2;
 8003fe0:	603e      	str	r6, [r7, #0]
			delta_pos = (abs_pos_1+abs_pos_0)/2;
 8003fe2:	6018      	str	r0, [r3, #0]
			distance = (float)(abs_pos)*(M_PI*0.1/(400.0*16.0))+distance_CoG*sin(HAL_Imu_Angle(IMU_ANGLE_PITCH)*M_PI/180); // m
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f7fe ffef 	bl	8002fc8 <HAL_Imu_Angle>
 8003fea:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003fee:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8004140 <main+0x650>
 8003ff2:	ee20 6b07 	vmul.f64	d6, d0, d7
 8003ff6:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8004148 <main+0x658>
 8003ffa:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8003ffe:	f000 fc87 	bl	8004910 <sin>
 8004002:	ee07 6a90 	vmov	s15, r6
 8004006:	4b73      	ldr	r3, [pc, #460]	; (80041d4 <main+0x6e4>)
 8004008:	4e73      	ldr	r6, [pc, #460]	; (80041d8 <main+0x6e8>)
 800400a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8004150 <main+0x660>
 8004012:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004016:	ee20 0b06 	vmul.f64	d0, d0, d6
 800401a:	eea7 0b08 	vfma.f64	d0, d7, d8
 800401e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004022:	ed83 0a00 	vstr	s0, [r3]
			if( armed && ( (HAL_Imu_Angle(IMU_ANGLE_PITCH)>10.0) || (HAL_Imu_Angle(IMU_ANGLE_PITCH)<-10.0) ) )
 8004026:	7823      	ldrb	r3, [r4, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80ea 	beq.w	8004202 <main+0x712>
 800402e:	2000      	movs	r0, #0
 8004030:	f7fe ffca 	bl	8002fc8 <HAL_Imu_Angle>
 8004034:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004038:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004040:	f340 80d4 	ble.w	80041ec <main+0x6fc>
				armed = false;
 8004044:	2700      	movs	r7, #0
				HAL_Stepper_Motor_Set_Speed(&m1,0);
 8004046:	484d      	ldr	r0, [pc, #308]	; (800417c <main+0x68c>)
 8004048:	4639      	mov	r1, r7
				armed = false;
 800404a:	7027      	strb	r7, [r4, #0]
				HAL_Stepper_Motor_Set_Speed(&m1,0);
 800404c:	f7ff fbb0 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
				HAL_Stepper_Motor_Set_Speed(&m2,0);
 8004050:	4639      	mov	r1, r7
 8004052:	484b      	ldr	r0, [pc, #300]	; (8004180 <main+0x690>)
 8004054:	f7ff fbac 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
				HAL_GPIO_WritePin(M1_ENABLE_GPIO_Port,M1_ENABLE_Pin,GPIO_PIN_SET); //! RESET to run
 8004058:	2201      	movs	r2, #1
 800405a:	484b      	ldr	r0, [pc, #300]	; (8004188 <main+0x698>)
 800405c:	4611      	mov	r1, r2
 800405e:	f7fc fdd1 	bl	8000c04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M2_ENABLE_GPIO_Port,M2_ENABLE_Pin,GPIO_PIN_SET);
 8004062:	2201      	movs	r2, #1
 8004064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004068:	4849      	ldr	r0, [pc, #292]	; (8004190 <main+0x6a0>)
 800406a:	f7fc fdcb 	bl	8000c04 <HAL_GPIO_WritePin>
				tx_data_buffer_int[0]=(int32_t)(HAL_Imu_Scaled_Sensor_Data()[1]*180/3.1415*10.0);
 800406e:	f7fe ffc3 	bl	8002ff8 <HAL_Imu_Scaled_Sensor_Data>
 8004072:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80041dc <main+0x6ec>
 8004076:	ed90 6a01 	vldr	s12, [r0, #4]
 800407a:	eeb2 ab04 	vmov.f64	d10, #36	; 0x41200000  10.0
 800407e:	4f58      	ldr	r7, [pc, #352]	; (80041e0 <main+0x6f0>)
				tx_data_buffer_int[1]=(int32_t)(HAL_Imu_Angle(IMU_ANGLE_PITCH)*10.0);
 8004080:	2000      	movs	r0, #0
				tx_data_buffer_int[0]=(int32_t)(HAL_Imu_Scaled_Sensor_Data()[1]*180/3.1415*10.0);
 8004082:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004086:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8004158 <main+0x668>
 800408a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800408e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004092:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8004096:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800409a:	ed87 7a00 	vstr	s14, [r7]
				tx_data_buffer_int[1]=(int32_t)(HAL_Imu_Angle(IMU_ANGLE_PITCH)*10.0);
 800409e:	f7fe ff93 	bl	8002fc8 <HAL_Imu_Angle>
				tx_data_buffer_int[2]=(int32_t)(distance*1000.0);
 80040a2:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <main+0x6e4>)
				tx_data_buffer_int[1]=(int32_t)(HAL_Imu_Angle(IMU_ANGLE_PITCH)*10.0);
 80040a4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
				tx_data_buffer_int[3]=(int32_t)(pid_x_output*10.0);
 80040a8:	ed95 6a00 	vldr	s12, [r5]
				int enc_ret = protocol_encode(
 80040ac:	463a      	mov	r2, r7
				tx_data_buffer_int[2]=(int32_t)(distance*1000.0);
 80040ae:	ed93 7a00 	vldr	s14, [r3]
				int enc_ret = protocol_encode(
 80040b2:	2113      	movs	r1, #19
				tx_data_buffer_int[3]=(int32_t)(pid_x_output*10.0);
 80040b4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
				tx_data_buffer_int[4]=(int32_t)pid_pitch_output;
 80040b8:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <main+0x6f4>)
				tx_data_buffer_int[2]=(int32_t)(distance*1000.0);
 80040ba:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
				int enc_ret = protocol_encode(
 80040be:	4837      	ldr	r0, [pc, #220]	; (800419c <main+0x6ac>)
				tx_data_buffer_int[4]=(int32_t)pid_pitch_output;
 80040c0:	681b      	ldr	r3, [r3, #0]
				tx_data_buffer_int[1]=(int32_t)(HAL_Imu_Angle(IMU_ANGLE_PITCH)*10.0);
 80040c2:	ee20 0b0a 	vmul.f64	d0, d0, d10
				tx_data_buffer_int[4]=(int32_t)pid_pitch_output;
 80040c6:	613b      	str	r3, [r7, #16]
				tx_data_buffer_int[3]=(int32_t)(pid_x_output*10.0);
 80040c8:	ee26 6b0a 	vmul.f64	d6, d6, d10
				tx_data_buffer_int[5]=(int32_t)(e_ptich_correction.mean*100.0);
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <main+0x6cc>)
				tx_data_buffer_int[1]=(int32_t)(HAL_Imu_Angle(IMU_ANGLE_PITCH)*10.0);
 80040ce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
				tx_data_buffer_int[2]=(int32_t)(distance*1000.0);
 80040d2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8004160 <main+0x670>
				tx_data_buffer_int[3]=(int32_t)(pid_x_output*10.0);
 80040d6:	eebd 6bc6 	vcvt.s32.f64	s12, d6
				tx_data_buffer_int[1]=(int32_t)(HAL_Imu_Angle(IMU_ANGLE_PITCH)*10.0);
 80040da:	ed87 0a01 	vstr	s0, [r7, #4]
				tx_data_buffer_int[2]=(int32_t)(distance*1000.0);
 80040de:	ee27 7b05 	vmul.f64	d7, d7, d5
				tx_data_buffer_int[3]=(int32_t)(pid_x_output*10.0);
 80040e2:	ed87 6a03 	vstr	s12, [r7, #12]
				tx_data_buffer_int[5]=(int32_t)(e_ptich_correction.mean*100.0);
 80040e6:	ed93 6a01 	vldr	s12, [r3, #4]
				tx_data_buffer_int[7]=0;
 80040ea:	2300      	movs	r3, #0
				tx_data_buffer_int[5]=(int32_t)(e_ptich_correction.mean*100.0);
 80040ec:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
				tx_data_buffer_int[7]=0;
 80040f0:	61fb      	str	r3, [r7, #28]
				int enc_ret = protocol_encode(
 80040f2:	231c      	movs	r3, #28
				tx_data_buffer_int[2]=(int32_t)(distance*1000.0);
 80040f4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80040f8:	ed87 7a02 	vstr	s14, [r7, #8]
				tx_data_buffer_int[5]=(int32_t)(e_ptich_correction.mean*100.0);
 80040fc:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8004168 <main+0x678>
 8004100:	ee26 6b07 	vmul.f64	d6, d6, d7
				tx_data_buffer_int[6]=(int32_t)(actual_xspeed*1000.0);
 8004104:	ed96 7a00 	vldr	s14, [r6]
 8004108:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800410c:	ee27 7b05 	vmul.f64	d7, d7, d5
				tx_data_buffer_int[5]=(int32_t)(e_ptich_correction.mean*100.0);
 8004110:	eebd 6bc6 	vcvt.s32.f64	s12, d6
				tx_data_buffer_int[6]=(int32_t)(actual_xspeed*1000.0);
 8004114:	eebd 7bc7 	vcvt.s32.f64	s14, d7
				tx_data_buffer_int[5]=(int32_t)(e_ptich_correction.mean*100.0);
 8004118:	ed87 6a05 	vstr	s12, [r7, #20]
				tx_data_buffer_int[6]=(int32_t)(actual_xspeed*1000.0);
 800411c:	ed87 7a06 	vstr	s14, [r7, #24]
				int enc_ret = protocol_encode(
 8004120:	f7fe fe1c 	bl	8002d5c <protocol_encode>
				if(enc_ret>0)
 8004124:	1e02      	subs	r2, r0, #0
 8004126:	dd03      	ble.n	8004130 <main+0x640>
					HAL_Serial_Write(&com, tx_protocol_buffer, enc_ret );
 8004128:	491c      	ldr	r1, [pc, #112]	; (800419c <main+0x6ac>)
 800412a:	481a      	ldr	r0, [pc, #104]	; (8004194 <main+0x6a4>)
 800412c:	f7ff faa8 	bl	8003680 <HAL_Serial_Write>
	  uint32_t current_time = HAL_GetTick();
 8004130:	4640      	mov	r0, r8
 8004132:	e732      	b.n	8003f9a <main+0x4aa>
 8004134:	f3af 8000 	nop.w
 8004138:	b68b71c3 	.word	0xb68b71c3
 800413c:	3f09bc65 	.word	0x3f09bc65
 8004140:	54442d18 	.word	0x54442d18
 8004144:	400921fb 	.word	0x400921fb
 8004148:	00000000 	.word	0x00000000
 800414c:	40668000 	.word	0x40668000
 8004150:	00000000 	.word	0x00000000
 8004154:	3fc0a3d7 	.word	0x3fc0a3d7
 8004158:	c083126f 	.word	0xc083126f
 800415c:	400921ca 	.word	0x400921ca
 8004160:	00000000 	.word	0x00000000
 8004164:	408f4000 	.word	0x408f4000
 8004168:	00000000 	.word	0x00000000
 800416c:	40590000 	.word	0x40590000
 8004170:	20002674 	.word	0x20002674
 8004174:	200026b4 	.word	0x200026b4
 8004178:	40020000 	.word	0x40020000
 800417c:	20002894 	.word	0x20002894
 8004180:	20002740 	.word	0x20002740
 8004184:	2000291c 	.word	0x2000291c
 8004188:	40020c00 	.word	0x40020c00
 800418c:	20001d88 	.word	0x20001d88
 8004190:	40020800 	.word	0x40020800
 8004194:	20001e68 	.word	0x20001e68
 8004198:	20002824 	.word	0x20002824
 800419c:	20001de8 	.word	0x20001de8
 80041a0:	20001cc4 	.word	0x20001cc4
 80041a4:	200000c4 	.word	0x200000c4
 80041a8:	200002ec 	.word	0x200002ec
 80041ac:	200000b4 	.word	0x200000b4
 80041b0:	200000bc 	.word	0x200000bc
 80041b4:	2000031c 	.word	0x2000031c
 80041b8:	20000314 	.word	0x20000314
 80041bc:	200000ac 	.word	0x200000ac
 80041c0:	20001cdc 	.word	0x20001cdc
 80041c4:	20001cb0 	.word	0x20001cb0
 80041c8:	20001cac 	.word	0x20001cac
 80041cc:	20001cb4 	.word	0x20001cb4
 80041d0:	20001cc8 	.word	0x20001cc8
 80041d4:	20001ccc 	.word	0x20001ccc
 80041d8:	20001cc0 	.word	0x20001cc0
 80041dc:	43340000 	.word	0x43340000
 80041e0:	20001ce8 	.word	0x20001ce8
 80041e4:	20001cd8 	.word	0x20001cd8
 80041e8:	20001cb8 	.word	0x20001cb8
			if( armed && ( (HAL_Imu_Angle(IMU_ANGLE_PITCH)>10.0) || (HAL_Imu_Angle(IMU_ANGLE_PITCH)<-10.0) ) )
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7fe feeb 	bl	8002fc8 <HAL_Imu_Angle>
 80041f2:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80041f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	f53f af21 	bmi.w	8004044 <main+0x554>
			else if(armed)
 8004202:	f894 a000 	ldrb.w	sl, [r4]
 8004206:	f1ba 0f00 	cmp.w	sl, #0
 800420a:	f000 80ce 	beq.w	80043aa <main+0x8ba>
				uint32_t period1 = htim8.Instance->CCR1; // 1000 .. 2000 Rx1
 800420e:	f8d9 2000 	ldr.w	r2, [r9]
				uint32_t period2 = htim4.Instance->CCR1; // 1000 .. 2000 Rx2
 8004212:	4b91      	ldr	r3, [pc, #580]	; (8004458 <main+0x968>)
				uint32_t period1 = htim8.Instance->CCR1; // 1000 .. 2000 Rx1
 8004214:	6b50      	ldr	r0, [r2, #52]	; 0x34
				uint32_t period2 = htim4.Instance->CCR1; // 1000 .. 2000 Rx2
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b59      	ldr	r1, [r3, #52]	; 0x34
				uint32_t width1 = htim8.Instance->CCR2; // 1000 .. 2000
 800421a:	6b92      	ldr	r2, [r2, #56]	; 0x38
				uint32_t width2 = htim4.Instance->CCR2; // 1000 .. 2000
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				if(period1>0 && period2>0 && width1>0 && width2>0)
 800421e:	2800      	cmp	r0, #0
 8004220:	f000 80bd 	beq.w	800439e <main+0x8ae>
 8004224:	2900      	cmp	r1, #0
 8004226:	f000 80ba 	beq.w	800439e <main+0x8ae>
 800422a:	2a00      	cmp	r2, #0
 800422c:	f000 80b7 	beq.w	800439e <main+0x8ae>
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80b4 	beq.w	800439e <main+0x8ae>
					if((1450<width1)&&(width1<1550)) width1 = 1500; // deadzone
 8004236:	f2a2 50ab 	subw	r0, r2, #1451	; 0x5ab
 800423a:	f240 51dc 	movw	r1, #1500	; 0x5dc
					reference_xspeed = (float)((int32_t)(width1)-1500)/1000.0; // m/s ... 0.5m/s max
 800423e:	eddf 6a87 	vldr	s13, [pc, #540]	; 800445c <main+0x96c>
					if((1450<width1)&&(width1<1550)) width1 = 1500; // deadzone
 8004242:	2862      	cmp	r0, #98	; 0x62
 8004244:	bf98      	it	ls
 8004246:	460a      	movls	r2, r1
					if((1450<width2)&&(width2<1550)) width2 = 1500; // deadzone
 8004248:	f2a3 50ab 	subw	r0, r3, #1451	; 0x5ab
					reference_xspeed = (float)((int32_t)(width1)-1500)/1000.0; // m/s ... 0.5m/s max
 800424c:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
					if((1450<width2)&&(width2<1550)) width2 = 1500; // deadzone
 8004250:	2862      	cmp	r0, #98	; 0x62
 8004252:	bf98      	it	ls
 8004254:	460b      	movls	r3, r1
					reference_xspeed = (float)((int32_t)(width1)-1500)/1000.0; // m/s ... 0.5m/s max
 8004256:	ee07 2a90 	vmov	s15, r2
					reference_wspeed = (float)((int32_t)(width2)-1500)*10.0; // deg/s ... 10 dps max
 800425a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
					reference_xspeed = (float)((int32_t)(width1)-1500)/1000.0; // m/s ... 0.5m/s max
 800425e:	4a80      	ldr	r2, [pc, #512]	; (8004460 <main+0x970>)
 8004260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004264:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					reference_wspeed = (float)((int32_t)(width2)-1500)*10.0; // deg/s ... 10 dps max
 8004268:	ee07 3a90 	vmov	s15, r3
 800426c:	4b7d      	ldr	r3, [pc, #500]	; (8004464 <main+0x974>)
 800426e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					reference_xspeed = (float)((int32_t)(width1)-1500)/1000.0; // m/s ... 0.5m/s max
 8004272:	ed82 7a00 	vstr	s14, [r2]
					reference_wspeed = (float)((int32_t)(width2)-1500)*10.0; // deg/s ... 10 dps max
 8004276:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800427a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800427e:	edc3 7a00 	vstr	s15, [r3]
				actual_xspeed = process_ewma(&xspeed_ewma,(float)(abs_pos-abs_pos_last)*(M_PI*0.1/(400.0*16.0))*200.0); //+distance_CoG*sin(HAL_Imu_Angle(IMU_ANGLE_PITCH)*M_PI/180); // m/s
 8004282:	f8db 2000 	ldr.w	r2, [fp]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	4877      	ldr	r0, [pc, #476]	; (8004468 <main+0x978>)
 800428a:	1a9b      	subs	r3, r3, r2
				pid_pitch_output = process_pid_win(&pid_pitch,HAL_Imu_Angle(IMU_ANGLE_PITCH) - pid_x_output + *pitch_ref );
 800428c:	f8df b214 	ldr.w	fp, [pc, #532]	; 80044a4 <main+0x9b4>
				m1_speed = process_ewma(&m1_ewma,pid_pitch_output-reference_wspeed);
 8004290:	4f74      	ldr	r7, [pc, #464]	; (8004464 <main+0x974>)
				actual_xspeed = process_ewma(&xspeed_ewma,(float)(abs_pos-abs_pos_last)*(M_PI*0.1/(400.0*16.0))*200.0); //+distance_CoG*sin(HAL_Imu_Angle(IMU_ANGLE_PITCH)*M_PI/180); // m/s
 8004292:	ee00 3a10 	vmov	s0, r3
				m1_speed = process_ewma(&m1_ewma,pid_pitch_output-reference_wspeed);
 8004296:	f8df a210 	ldr.w	sl, [pc, #528]	; 80044a8 <main+0x9b8>
				actual_xspeed = process_ewma(&xspeed_ewma,(float)(abs_pos-abs_pos_last)*(M_PI*0.1/(400.0*16.0))*200.0); //+distance_CoG*sin(HAL_Imu_Angle(IMU_ANGLE_PITCH)*M_PI/180); // m/s
 800429a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800429e:	ed9f ab6a 	vldr	d10, [pc, #424]	; 8004448 <main+0x958>
 80042a2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80042a6:	ee20 0b09 	vmul.f64	d0, d0, d9
 80042aa:	ee20 0b0a 	vmul.f64	d0, d0, d10
 80042ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80042b2:	f7ff fad4 	bl	800385e <process_ewma>
				actual_wspeed = process_ewma(&wspeed_ewma,200.0*ToDeg(fastAtan2((float)(delta_pos)*(M_PI*0.1/(400.0*16.0)),wheel_distance)));
 80042b6:	4b6d      	ldr	r3, [pc, #436]	; (800446c <main+0x97c>)
				actual_xspeed = process_ewma(&xspeed_ewma,(float)(abs_pos-abs_pos_last)*(M_PI*0.1/(400.0*16.0))*200.0); //+distance_CoG*sin(HAL_Imu_Angle(IMU_ANGLE_PITCH)*M_PI/180); // m/s
 80042b8:	ed86 0a00 	vstr	s0, [r6]
				actual_wspeed = process_ewma(&wspeed_ewma,200.0*ToDeg(fastAtan2((float)(delta_pos)*(M_PI*0.1/(400.0*16.0)),wheel_distance)));
 80042bc:	ed93 7a00 	vldr	s14, [r3]
 80042c0:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8004470 <main+0x980>
 80042c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80042c8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80042cc:	ee27 7b09 	vmul.f64	d7, d7, d9
 80042d0:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 80042d4:	f7fe fe16 	bl	8002f04 <fastAtan2>
 80042d8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80042dc:	4865      	ldr	r0, [pc, #404]	; (8004474 <main+0x984>)
 80042de:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8004450 <main+0x960>
 80042e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80042e6:	ee20 0b0a 	vmul.f64	d0, d0, d10
 80042ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80042ee:	f7ff fab6 	bl	800385e <process_ewma>
 80042f2:	4b61      	ldr	r3, [pc, #388]	; (8004478 <main+0x988>)
				pid_x_output = process_pid(&pid_x,reference_xspeed-actual_xspeed);
 80042f4:	edd6 7a00 	vldr	s15, [r6]
				actual_wspeed = process_ewma(&wspeed_ewma,200.0*ToDeg(fastAtan2((float)(delta_pos)*(M_PI*0.1/(400.0*16.0)),wheel_distance)));
 80042f8:	ed83 0a00 	vstr	s0, [r3]
				pid_x_output = process_pid(&pid_x,reference_xspeed-actual_xspeed);
 80042fc:	4b58      	ldr	r3, [pc, #352]	; (8004460 <main+0x970>)
 80042fe:	485f      	ldr	r0, [pc, #380]	; (800447c <main+0x98c>)
 8004300:	ed93 0a00 	vldr	s0, [r3]
 8004304:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004308:	f7ff fad3 	bl	80038b2 <process_pid>
				pid_pitch_output = process_pid_win(&pid_pitch,HAL_Imu_Angle(IMU_ANGLE_PITCH) - pid_x_output + *pitch_ref );
 800430c:	2000      	movs	r0, #0
				pid_x_output = process_pid(&pid_x,reference_xspeed-actual_xspeed);
 800430e:	ed85 0a00 	vstr	s0, [r5]
				pid_pitch_output = process_pid_win(&pid_pitch,HAL_Imu_Angle(IMU_ANGLE_PITCH) - pid_x_output + *pitch_ref );
 8004312:	f7fe fe59 	bl	8002fc8 <HAL_Imu_Angle>
 8004316:	edd5 7a00 	vldr	s15, [r5]
 800431a:	9b03      	ldr	r3, [sp, #12]
 800431c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004320:	4857      	ldr	r0, [pc, #348]	; (8004480 <main+0x990>)
 8004322:	edd3 7a00 	vldr	s15, [r3]
 8004326:	ee30 0a27 	vadd.f32	s0, s0, s15
 800432a:	f7ff fb25 	bl	8003978 <process_pid_win>
 800432e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
				process_ewma(&e_ptich_correction,pid_x_output);
 8004332:	4854      	ldr	r0, [pc, #336]	; (8004484 <main+0x994>)
				pid_pitch_output = process_pid_win(&pid_pitch,HAL_Imu_Angle(IMU_ANGLE_PITCH) - pid_x_output + *pitch_ref );
 8004334:	ed8b 0a00 	vstr	s0, [fp]
				process_ewma(&e_ptich_correction,pid_x_output);
 8004338:	ed95 0a00 	vldr	s0, [r5]
 800433c:	f7ff fa8f 	bl	800385e <process_ewma>
				m1_speed = process_ewma(&m1_ewma,pid_pitch_output-reference_wspeed);
 8004340:	eddb 7a00 	vldr	s15, [fp]
 8004344:	ed97 0a00 	vldr	s0, [r7]
 8004348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800434c:	484e      	ldr	r0, [pc, #312]	; (8004488 <main+0x998>)
 800434e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004352:	f7ff fa84 	bl	800385e <process_ewma>
 8004356:	ed8a 0a00 	vstr	s0, [sl]
				m2_speed = process_ewma(&m2_ewma,pid_pitch_output+reference_wspeed);
 800435a:	ed9b 0a00 	vldr	s0, [fp]
 800435e:	edd7 7a00 	vldr	s15, [r7]
 8004362:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004366:	4849      	ldr	r0, [pc, #292]	; (800448c <main+0x99c>)
 8004368:	4f49      	ldr	r7, [pc, #292]	; (8004490 <main+0x9a0>)
 800436a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800436e:	f7ff fa76 	bl	800385e <process_ewma>
				HAL_Stepper_Motor_Set_Speed(&m1,-(int32_t)m1_speed);
 8004372:	edda 7a00 	vldr	s15, [sl]
 8004376:	4847      	ldr	r0, [pc, #284]	; (8004494 <main+0x9a4>)
 8004378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				m2_speed = process_ewma(&m2_ewma,pid_pitch_output+reference_wspeed);
 800437c:	ed87 0a00 	vstr	s0, [r7]
				HAL_Stepper_Motor_Set_Speed(&m1,-(int32_t)m1_speed);
 8004380:	ee17 1a90 	vmov	r1, s15
 8004384:	4249      	negs	r1, r1
 8004386:	f7ff fa13 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
				HAL_Stepper_Motor_Set_Speed(&m2,(int32_t)m2_speed);
 800438a:	edd7 7a00 	vldr	s15, [r7]
 800438e:	4842      	ldr	r0, [pc, #264]	; (8004498 <main+0x9a8>)
 8004390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004394:	ee17 1a90 	vmov	r1, s15
 8004398:	f7ff fa0a 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
 800439c:	e667      	b.n	800406e <main+0x57e>
					reference_xspeed = 0.0f;
 800439e:	2300      	movs	r3, #0
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <main+0x970>)
 80043a2:	6013      	str	r3, [r2, #0]
					reference_wspeed = 0.0f;
 80043a4:	4a2f      	ldr	r2, [pc, #188]	; (8004464 <main+0x974>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e76b      	b.n	8004282 <main+0x792>
				HAL_GPIO_WritePin(M1_ENABLE_GPIO_Port,M1_ENABLE_Pin,GPIO_PIN_RESET); //! RESET to run
 80043aa:	4652      	mov	r2, sl
 80043ac:	2101      	movs	r1, #1
 80043ae:	483b      	ldr	r0, [pc, #236]	; (800449c <main+0x9ac>)
 80043b0:	f7fc fc28 	bl	8000c04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M2_ENABLE_GPIO_Port,M2_ENABLE_Pin,GPIO_PIN_RESET);
 80043b4:	4652      	mov	r2, sl
 80043b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043ba:	4839      	ldr	r0, [pc, #228]	; (80044a0 <main+0x9b0>)
 80043bc:	f7fc fc22 	bl	8000c04 <HAL_GPIO_WritePin>
				HAL_Stepper_Motor_Set_Speed(&m1,0);
 80043c0:	4651      	mov	r1, sl
 80043c2:	4834      	ldr	r0, [pc, #208]	; (8004494 <main+0x9a4>)
 80043c4:	f7ff f9f4 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
				HAL_Stepper_Motor_Set_Speed(&m2,0);
 80043c8:	4651      	mov	r1, sl
 80043ca:	4833      	ldr	r0, [pc, #204]	; (8004498 <main+0x9a8>)
 80043cc:	f7ff f9f0 	bl	80037b0 <HAL_Stepper_Motor_Set_Speed>
				HAL_Stepper_Motor_Reset_Position(&m1);
 80043d0:	4830      	ldr	r0, [pc, #192]	; (8004494 <main+0x9a4>)
 80043d2:	f7ff f9ff 	bl	80037d4 <HAL_Stepper_Motor_Reset_Position>
				HAL_Stepper_Motor_Reset_Position(&m2);
 80043d6:	4830      	ldr	r0, [pc, #192]	; (8004498 <main+0x9a8>)
 80043d8:	f7ff f9fc 	bl	80037d4 <HAL_Stepper_Motor_Reset_Position>
				reset_pid_win(&pid_pitch);
 80043dc:	4828      	ldr	r0, [pc, #160]	; (8004480 <main+0x990>)
 80043de:	f7ff fabb 	bl	8003958 <reset_pid_win>
				reset_pid(&pid_x);
 80043e2:	4826      	ldr	r0, [pc, #152]	; (800447c <main+0x98c>)
 80043e4:	f7ff fa5e 	bl	80038a4 <reset_pid>
				reset_ewma( &m1_ewma );
 80043e8:	4827      	ldr	r0, [pc, #156]	; (8004488 <main+0x998>)
 80043ea:	f7ff fa35 	bl	8003858 <reset_ewma>
				reset_ewma( &m2_ewma );
 80043ee:	4827      	ldr	r0, [pc, #156]	; (800448c <main+0x99c>)
 80043f0:	f7ff fa32 	bl	8003858 <reset_ewma>
				reset_ewma( &xspeed_ewma );
 80043f4:	481c      	ldr	r0, [pc, #112]	; (8004468 <main+0x978>)
 80043f6:	f7ff fa2f 	bl	8003858 <reset_ewma>
				reset_ewma( &wspeed_ewma );
 80043fa:	481e      	ldr	r0, [pc, #120]	; (8004474 <main+0x984>)
 80043fc:	f7ff fa2c 	bl	8003858 <reset_ewma>
				pid_pitch_output = 0.0;
 8004400:	4928      	ldr	r1, [pc, #160]	; (80044a4 <main+0x9b4>)
				pid_x_output = 0.0;
 8004402:	2200      	movs	r2, #0
				armed = (HAL_Imu_Angle(IMU_ANGLE_PITCH)>-1.5) && (HAL_Imu_Angle(IMU_ANGLE_PITCH)<1.5);
 8004404:	4650      	mov	r0, sl
				pid_pitch_output = 0.0;
 8004406:	f8c1 a000 	str.w	sl, [r1]
				m1_speed = 0.0;
 800440a:	4927      	ldr	r1, [pc, #156]	; (80044a8 <main+0x9b8>)
				pid_x_output = 0.0;
 800440c:	602a      	str	r2, [r5, #0]
				m1_speed = 0.0;
 800440e:	600a      	str	r2, [r1, #0]
				m2_speed = 0.0;
 8004410:	491f      	ldr	r1, [pc, #124]	; (8004490 <main+0x9a0>)
 8004412:	600a      	str	r2, [r1, #0]
				armed = (HAL_Imu_Angle(IMU_ANGLE_PITCH)>-1.5) && (HAL_Imu_Angle(IMU_ANGLE_PITCH)<1.5);
 8004414:	f7fe fdd8 	bl	8002fc8 <HAL_Imu_Angle>
 8004418:	eeff 7a08 	vmov.f32	s15, #248	; 0xbfc00000 -1.5
 800441c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	dd0d      	ble.n	8004442 <main+0x952>
 8004426:	4650      	mov	r0, sl
 8004428:	f7fe fdce 	bl	8002fc8 <HAL_Imu_Angle>
 800442c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8004430:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004438:	bf4c      	ite	mi
 800443a:	2301      	movmi	r3, #1
 800443c:	2300      	movpl	r3, #0
 800443e:	7023      	strb	r3, [r4, #0]
 8004440:	e615      	b.n	800406e <main+0x57e>
 8004442:	4653      	mov	r3, sl
 8004444:	e7fb      	b.n	800443e <main+0x94e>
 8004446:	bf00      	nop
 8004448:	00000000 	.word	0x00000000
 800444c:	40690000 	.word	0x40690000
 8004450:	1a63cbb0 	.word	0x1a63cbb0
 8004454:	404ca5dc 	.word	0x404ca5dc
 8004458:	200026b4 	.word	0x200026b4
 800445c:	447a0000 	.word	0x447a0000
 8004460:	20001ce4 	.word	0x20001ce4
 8004464:	20001ce0 	.word	0x20001ce0
 8004468:	2000031c 	.word	0x2000031c
 800446c:	20001cc8 	.word	0x20001cc8
 8004470:	3de147ae 	.word	0x3de147ae
 8004474:	20000314 	.word	0x20000314
 8004478:	20001cbc 	.word	0x20001cbc
 800447c:	200002ec 	.word	0x200002ec
 8004480:	200000c4 	.word	0x200000c4
 8004484:	200000ac 	.word	0x200000ac
 8004488:	200000b4 	.word	0x200000b4
 800448c:	200000bc 	.word	0x200000bc
 8004490:	20001cd4 	.word	0x20001cd4
 8004494:	20002894 	.word	0x20002894
 8004498:	20002740 	.word	0x20002740
 800449c:	40020c00 	.word	0x40020c00
 80044a0:	40020800 	.word	0x40020800
 80044a4:	20001cd8 	.word	0x20001cd8
 80044a8:	20001cd0 	.word	0x20001cd0

080044ac <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80044ac:	e7fe      	b.n	80044ac <_Error_Handler>

080044ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044ae:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044b0:	2003      	movs	r0, #3
 80044b2:	f7fb fefd 	bl	80002b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80044b6:	2200      	movs	r2, #0
 80044b8:	f06f 000b 	mvn.w	r0, #11
 80044bc:	4611      	mov	r1, r2
 80044be:	f7fb ff09 	bl	80002d4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	f06f 000a 	mvn.w	r0, #10
 80044c8:	4611      	mov	r1, r2
 80044ca:	f7fb ff03 	bl	80002d4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	f06f 0009 	mvn.w	r0, #9
 80044d4:	4611      	mov	r1, r2
 80044d6:	f7fb fefd 	bl	80002d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80044da:	2200      	movs	r2, #0
 80044dc:	f06f 0004 	mvn.w	r0, #4
 80044e0:	4611      	mov	r1, r2
 80044e2:	f7fb fef7 	bl	80002d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80044e6:	2200      	movs	r2, #0
 80044e8:	f06f 0003 	mvn.w	r0, #3
 80044ec:	4611      	mov	r1, r2
 80044ee:	f7fb fef1 	bl	80002d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80044f2:	2200      	movs	r2, #0
 80044f4:	f06f 0001 	mvn.w	r0, #1
 80044f8:	4611      	mov	r1, r2
 80044fa:	f7fb feeb 	bl	80002d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800450a:	f7fb bee3 	b.w	80002d4 <HAL_NVIC_SetPriority>
	...

08004510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8004512:	6802      	ldr	r2, [r0, #0]
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_I2C_MspInit+0x44>)
 8004516:	429a      	cmp	r2, r3
 8004518:	d119      	bne.n	800454e <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800451a:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451e:	480e      	ldr	r0, [pc, #56]	; (8004558 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004520:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004522:	2312      	movs	r3, #18
 8004524:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004526:	2301      	movs	r3, #1
 8004528:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452a:	2303      	movs	r3, #3
 800452c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800452e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004530:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004534:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004536:	f7fc fa7b 	bl	8000a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_I2C_MspInit+0x4c>)
 800453c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800454e:	b007      	add	sp, #28
 8004550:	f85d fb04 	ldr.w	pc, [sp], #4
 8004554:	40005400 	.word	0x40005400
 8004558:	40020400 	.word	0x40020400
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8004560:	6802      	ldr	r2, [r0, #0]
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <HAL_SPI_MspInit+0x58>)
 8004564:	429a      	cmp	r2, r3
{
 8004566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004568:	b087      	sub	sp, #28
  if(hspi->Instance==SPI1)
 800456a:	d122      	bne.n	80045b2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800456c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004574:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004578:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457a:	a901      	add	r1, sp, #4
 800457c:	480f      	ldr	r0, [pc, #60]	; (80045bc <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800457e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004582:	645a      	str	r2, [r3, #68]	; 0x44
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004586:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458e:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004594:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004596:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004598:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459a:	f7fc fa49 	bl	8000a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800459e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a0:	a901      	add	r1, sp, #4
 80045a2:	4807      	ldr	r0, [pc, #28]	; (80045c0 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a6:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045aa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045ac:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ae:	f7fc fa3f 	bl	8000a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80045b2:	b007      	add	sp, #28
 80045b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40013000 	.word	0x40013000
 80045bc:	40020000 	.word	0x40020000
 80045c0:	40020400 	.word	0x40020400

080045c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 80045c4:	6803      	ldr	r3, [r0, #0]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80045ca:	b500      	push	{lr}
 80045cc:	b089      	sub	sp, #36	; 0x24
  if(htim_base->Instance==TIM2)
 80045ce:	d115      	bne.n	80045fc <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045d0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045d4:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045de:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045e2:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	9303      	str	r3, [sp, #12]
 80045ea:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045ec:	f7fb fe72 	bl	80002d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045f0:	201c      	movs	r0, #28
 80045f2:	f7fb fea7 	bl	8000344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80045f6:	b009      	add	sp, #36	; 0x24
 80045f8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM4)
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_TIM_Base_MspInit+0xa0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d117      	bne.n	8004632 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004602:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_TIM_Base_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004604:	a903      	add	r1, sp, #12
 8004606:	4819      	ldr	r0, [pc, #100]	; (800466c <HAL_TIM_Base_MspInit+0xa8>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460a:	f042 0204 	orr.w	r2, r2, #4
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	9205      	str	r2, [sp, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004616:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461a:	9206      	str	r2, [sp, #24]
    __HAL_RCC_TIM4_CLK_ENABLE();
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004624:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800462a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800462c:	f7fc fa00 	bl	8000a30 <HAL_GPIO_Init>
}
 8004630:	e7e1      	b.n	80045f6 <HAL_TIM_Base_MspInit+0x32>
  else if(htim_base->Instance==TIM8)
 8004632:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <HAL_TIM_Base_MspInit+0xac>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d1de      	bne.n	80045f6 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_TIM_Base_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463a:	a903      	add	r1, sp, #12
 800463c:	480d      	ldr	r0, [pc, #52]	; (8004674 <HAL_TIM_Base_MspInit+0xb0>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 800463e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004640:	f042 0202 	orr.w	r2, r2, #2
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	9302      	str	r3, [sp, #8]
 800464e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004654:	2302      	movs	r3, #2
 8004656:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004658:	2300      	movs	r3, #0
 800465a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800465e:	2303      	movs	r3, #3
 8004660:	9307      	str	r3, [sp, #28]
 8004662:	e7e3      	b.n	800462c <HAL_TIM_Base_MspInit+0x68>
 8004664:	40000800 	.word	0x40000800
 8004668:	40023800 	.word	0x40023800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40010400 	.word	0x40010400
 8004674:	40020800 	.word	0x40020800

08004678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART8)
 8004678:	6802      	ldr	r2, [r0, #0]
 800467a:	4b31      	ldr	r3, [pc, #196]	; (8004740 <HAL_UART_MspInit+0xc8>)
 800467c:	429a      	cmp	r2, r3
{
 800467e:	b530      	push	{r4, r5, lr}
 8004680:	4605      	mov	r5, r0
 8004682:	b087      	sub	sp, #28
  if(huart->Instance==UART8)
 8004684:	d15a      	bne.n	800473c <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004686:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800468a:	482e      	ldr	r0, [pc, #184]	; (8004744 <HAL_UART_MspInit+0xcc>)
 800468c:	a901      	add	r1, sp, #4

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream6;
 800468e:	4c2e      	ldr	r4, [pc, #184]	; (8004748 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8004690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004692:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004696:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004698:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800469e:	2201      	movs	r2, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 80046a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046a4:	9203      	str	r2, [sp, #12]
    __HAL_RCC_UART8_CLK_ENABLE();
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046aa:	2303      	movs	r3, #3
 80046ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80046b0:	2308      	movs	r3, #8
 80046b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046b4:	f7fc f9bc 	bl	8000a30 <HAL_GPIO_Init>
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80046b8:	4824      	ldr	r0, [pc, #144]	; (800474c <HAL_UART_MspInit+0xd4>)
 80046ba:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80046c2:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046c6:	6122      	str	r2, [r4, #16]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046c8:	2300      	movs	r3, #0
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80046ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80046ce:	4620      	mov	r0, r4
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046d0:	60a3      	str	r3, [r4, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046d2:	60e3      	str	r3, [r4, #12]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046d4:	6163      	str	r3, [r4, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046d6:	61a3      	str	r3, [r4, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80046d8:	61e2      	str	r2, [r4, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046da:	6223      	str	r3, [r4, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046dc:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80046de:	f7fb fe79 	bl	80003d4 <HAL_DMA_Init>
 80046e2:	b120      	cbz	r0, 80046ee <HAL_UART_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 80046e4:	f240 1165 	movw	r1, #357	; 0x165
 80046e8:	4819      	ldr	r0, [pc, #100]	; (8004750 <HAL_UART_MspInit+0xd8>)
 80046ea:	f7ff fedf 	bl	80044ac <_Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream0;
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046ee:	4b19      	ldr	r3, [pc, #100]	; (8004754 <HAL_UART_MspInit+0xdc>)
 80046f0:	f04f 6c20 	mov.w	ip, #167772160	; 0xa000000
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80046f4:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046f6:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80046fa:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8004700:	4c15      	ldr	r4, [pc, #84]	; (8004758 <HAL_UART_MspInit+0xe0>)
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004702:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004706:	2300      	movs	r3, #0
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8004708:	4620      	mov	r0, r4
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800470a:	6122      	str	r2, [r4, #16]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800470c:	60e3      	str	r3, [r4, #12]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800470e:	6163      	str	r3, [r4, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004710:	61a3      	str	r3, [r4, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8004712:	61e3      	str	r3, [r4, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004714:	6223      	str	r3, [r4, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004716:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8004718:	f7fb fe5c 	bl	80003d4 <HAL_DMA_Init>
 800471c:	b120      	cbz	r0, 8004728 <HAL_UART_MspInit+0xb0>
    {
      _Error_Handler(__FILE__, __LINE__);
 800471e:	f240 1177 	movw	r1, #375	; 0x177
 8004722:	480b      	ldr	r0, [pc, #44]	; (8004750 <HAL_UART_MspInit+0xd8>)
 8004724:	f7ff fec2 	bl	80044ac <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004728:	2200      	movs	r2, #0
 800472a:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 800472c:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800472e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8004730:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004732:	f7fb fdcf 	bl	80002d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004736:	2053      	movs	r0, #83	; 0x53
 8004738:	f7fb fe04 	bl	8000344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800473c:	b007      	add	sp, #28
 800473e:	bd30      	pop	{r4, r5, pc}
 8004740:	40007c00 	.word	0x40007c00
 8004744:	40021000 	.word	0x40021000
 8004748:	20002764 	.word	0x20002764
 800474c:	400260a0 	.word	0x400260a0
 8004750:	08005748 	.word	0x08005748
 8004754:	40026010 	.word	0x40026010
 8004758:	200027c4 	.word	0x200027c4

0800475c <NMI_Handler>:
 800475c:	4770      	bx	lr

0800475e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800475e:	e7fe      	b.n	800475e <HardFault_Handler>

08004760 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004760:	e7fe      	b.n	8004760 <MemManage_Handler>

08004762 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004762:	e7fe      	b.n	8004762 <BusFault_Handler>

08004764 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004764:	e7fe      	b.n	8004764 <UsageFault_Handler>

08004766 <SVC_Handler>:
 8004766:	4770      	bx	lr

08004768 <DebugMon_Handler>:
 8004768:	4770      	bx	lr

0800476a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800476a:	4770      	bx	lr

0800476c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800476c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800476e:	f7fb fd83 	bl	8000278 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004776:	f7fb be13 	b.w	80003a0 <HAL_SYSTICK_IRQHandler>
	...

0800477c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 800477c:	4801      	ldr	r0, [pc, #4]	; (8004784 <DMA1_Stream0_IRQHandler+0x8>)
 800477e:	f7fb bef7 	b.w	8000570 <HAL_DMA_IRQHandler>
 8004782:	bf00      	nop
 8004784:	200027c4 	.word	0x200027c4

08004788 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8004788:	4801      	ldr	r0, [pc, #4]	; (8004790 <DMA1_Stream6_IRQHandler+0x8>)
 800478a:	f7fb bef1 	b.w	8000570 <HAL_DMA_IRQHandler>
 800478e:	bf00      	nop
 8004790:	20002764 	.word	0x20002764

08004794 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <TIM2_IRQHandler+0x8>)
 8004796:	f7fd bb6d 	b.w	8001e74 <HAL_TIM_IRQHandler>
 800479a:	bf00      	nop
 800479c:	2000291c 	.word	0x2000291c

080047a0 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80047a0:	4801      	ldr	r0, [pc, #4]	; (80047a8 <UART8_IRQHandler+0x8>)
 80047a2:	f7fd bff9 	b.w	8002798 <HAL_UART_IRQHandler>
 80047a6:	bf00      	nop
 80047a8:	20002824 	.word	0x20002824

080047ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047ac:	490f      	ldr	r1, [pc, #60]	; (80047ec <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047ae:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80047b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <SystemInit+0x44>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80047c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80047ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80047d4:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <SystemInit+0x48>)
 80047d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80047e0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e6:	608b      	str	r3, [r1, #8]
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	e000ed00 	.word	0xe000ed00
 80047f0:	40023800 	.word	0x40023800
 80047f4:	24003010 	.word	0x24003010

080047f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80047f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004830 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80047fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80047fe:	e003      	b.n	8004808 <LoopCopyDataInit>

08004800 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004802:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004804:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004806:	3104      	adds	r1, #4

08004808 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004808:	480b      	ldr	r0, [pc, #44]	; (8004838 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800480a:	4b0c      	ldr	r3, [pc, #48]	; (800483c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800480c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800480e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004810:	d3f6      	bcc.n	8004800 <CopyDataInit>
  ldr  r2, =_sbss
 8004812:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004814:	e002      	b.n	800481c <LoopFillZerobss>

08004816 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004816:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004818:	f842 3b04 	str.w	r3, [r2], #4

0800481c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800481e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004820:	d3f9      	bcc.n	8004816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004822:	f7ff ffc3 	bl	80047ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004826:	f000 f811 	bl	800484c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800482a:	f7ff f961 	bl	8003af0 <main>
  bx  lr    
 800482e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004830:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004834:	08005960 	.word	0x08005960
  ldr  r0, =_sdata
 8004838:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800483c:	20000390 	.word	0x20000390
  ldr  r2, =_sbss
 8004840:	20000390 	.word	0x20000390
  ldr  r3, = _ebss
 8004844:	2000295c 	.word	0x2000295c

08004848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004848:	e7fe      	b.n	8004848 <ADC_IRQHandler>
	...

0800484c <__libc_init_array>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4e0d      	ldr	r6, [pc, #52]	; (8004884 <__libc_init_array+0x38>)
 8004850:	4c0d      	ldr	r4, [pc, #52]	; (8004888 <__libc_init_array+0x3c>)
 8004852:	1ba4      	subs	r4, r4, r6
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	2500      	movs	r5, #0
 8004858:	42a5      	cmp	r5, r4
 800485a:	d109      	bne.n	8004870 <__libc_init_array+0x24>
 800485c:	4e0b      	ldr	r6, [pc, #44]	; (800488c <__libc_init_array+0x40>)
 800485e:	4c0c      	ldr	r4, [pc, #48]	; (8004890 <__libc_init_array+0x44>)
 8004860:	f000 ff0c 	bl	800567c <_init>
 8004864:	1ba4      	subs	r4, r4, r6
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	2500      	movs	r5, #0
 800486a:	42a5      	cmp	r5, r4
 800486c:	d105      	bne.n	800487a <__libc_init_array+0x2e>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004874:	4798      	blx	r3
 8004876:	3501      	adds	r5, #1
 8004878:	e7ee      	b.n	8004858 <__libc_init_array+0xc>
 800487a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800487e:	4798      	blx	r3
 8004880:	3501      	adds	r5, #1
 8004882:	e7f2      	b.n	800486a <__libc_init_array+0x1e>
 8004884:	08005958 	.word	0x08005958
 8004888:	08005958 	.word	0x08005958
 800488c:	08005958 	.word	0x08005958
 8004890:	0800595c 	.word	0x0800595c
 8004894:	00000000 	.word	0x00000000

08004898 <cos>:
 8004898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800489a:	eeb0 7b40 	vmov.f64	d7, d0
 800489e:	ee17 3a90 	vmov	r3, s15
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <cos+0x70>)
 80048a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	4293      	cmp	r3, r2
 80048aa:	dc04      	bgt.n	80048b6 <cos+0x1e>
 80048ac:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8004900 <cos+0x68>
 80048b0:	f000 fa96 	bl	8004de0 <__kernel_cos>
 80048b4:	e004      	b.n	80048c0 <cos+0x28>
 80048b6:	4a15      	ldr	r2, [pc, #84]	; (800490c <cos+0x74>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	dd04      	ble.n	80048c6 <cos+0x2e>
 80048bc:	ee30 0b40 	vsub.f64	d0, d0, d0
 80048c0:	b005      	add	sp, #20
 80048c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80048c6:	4668      	mov	r0, sp
 80048c8:	f000 f8aa 	bl	8004a20 <__ieee754_rem_pio2>
 80048cc:	f000 0003 	and.w	r0, r0, #3
 80048d0:	2801      	cmp	r0, #1
 80048d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048d6:	ed9d 0b00 	vldr	d0, [sp]
 80048da:	d007      	beq.n	80048ec <cos+0x54>
 80048dc:	2802      	cmp	r0, #2
 80048de:	d00a      	beq.n	80048f6 <cos+0x5e>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d0e5      	beq.n	80048b0 <cos+0x18>
 80048e4:	2001      	movs	r0, #1
 80048e6:	f000 fd5b 	bl	80053a0 <__kernel_sin>
 80048ea:	e7e9      	b.n	80048c0 <cos+0x28>
 80048ec:	f000 fd58 	bl	80053a0 <__kernel_sin>
 80048f0:	eeb1 0b40 	vneg.f64	d0, d0
 80048f4:	e7e4      	b.n	80048c0 <cos+0x28>
 80048f6:	f000 fa73 	bl	8004de0 <__kernel_cos>
 80048fa:	e7f9      	b.n	80048f0 <cos+0x58>
 80048fc:	f3af 8000 	nop.w
	...
 8004908:	3fe921fb 	.word	0x3fe921fb
 800490c:	7fefffff 	.word	0x7fefffff

08004910 <sin>:
 8004910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004912:	eeb0 7b40 	vmov.f64	d7, d0
 8004916:	ee17 3a90 	vmov	r3, s15
 800491a:	4a19      	ldr	r2, [pc, #100]	; (8004980 <sin+0x70>)
 800491c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004920:	4293      	cmp	r3, r2
 8004922:	dc05      	bgt.n	8004930 <sin+0x20>
 8004924:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8004978 <sin+0x68>
 8004928:	2000      	movs	r0, #0
 800492a:	f000 fd39 	bl	80053a0 <__kernel_sin>
 800492e:	e004      	b.n	800493a <sin+0x2a>
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <sin+0x74>)
 8004932:	4293      	cmp	r3, r2
 8004934:	dd04      	ble.n	8004940 <sin+0x30>
 8004936:	ee30 0b40 	vsub.f64	d0, d0, d0
 800493a:	b005      	add	sp, #20
 800493c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004940:	4668      	mov	r0, sp
 8004942:	f000 f86d 	bl	8004a20 <__ieee754_rem_pio2>
 8004946:	f000 0003 	and.w	r0, r0, #3
 800494a:	2801      	cmp	r0, #1
 800494c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004950:	ed9d 0b00 	vldr	d0, [sp]
 8004954:	d004      	beq.n	8004960 <sin+0x50>
 8004956:	2802      	cmp	r0, #2
 8004958:	d005      	beq.n	8004966 <sin+0x56>
 800495a:	b950      	cbnz	r0, 8004972 <sin+0x62>
 800495c:	2001      	movs	r0, #1
 800495e:	e7e4      	b.n	800492a <sin+0x1a>
 8004960:	f000 fa3e 	bl	8004de0 <__kernel_cos>
 8004964:	e7e9      	b.n	800493a <sin+0x2a>
 8004966:	2001      	movs	r0, #1
 8004968:	f000 fd1a 	bl	80053a0 <__kernel_sin>
 800496c:	eeb1 0b40 	vneg.f64	d0, d0
 8004970:	e7e3      	b.n	800493a <sin+0x2a>
 8004972:	f000 fa35 	bl	8004de0 <__kernel_cos>
 8004976:	e7f9      	b.n	800496c <sin+0x5c>
	...
 8004980:	3fe921fb 	.word	0x3fe921fb
 8004984:	7fefffff 	.word	0x7fefffff

08004988 <sqrt>:
 8004988:	b500      	push	{lr}
 800498a:	ed2d 8b02 	vpush	{d8}
 800498e:	eeb0 8b40 	vmov.f64	d8, d0
 8004992:	b08b      	sub	sp, #44	; 0x2c
 8004994:	f000 f984 	bl	8004ca0 <__ieee754_sqrt>
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <sqrt+0x90>)
 800499a:	f993 3000 	ldrsb.w	r3, [r3]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	d024      	beq.n	80049ec <sqrt+0x64>
 80049a2:	eeb4 8b48 	vcmp.f64	d8, d8
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	d61f      	bvs.n	80049ec <sqrt+0x64>
 80049ac:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8004a10 <sqrt+0x88>
 80049b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	d518      	bpl.n	80049ec <sqrt+0x64>
 80049ba:	2201      	movs	r2, #1
 80049bc:	9200      	str	r2, [sp, #0]
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <sqrt+0x94>)
 80049c0:	9201      	str	r2, [sp, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	9208      	str	r2, [sp, #32]
 80049c6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80049ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80049ce:	b993      	cbnz	r3, 80049f6 <sqrt+0x6e>
 80049d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80049d4:	4668      	mov	r0, sp
 80049d6:	f000 fdbb 	bl	8005550 <matherr>
 80049da:	b190      	cbz	r0, 8004a02 <sqrt+0x7a>
 80049dc:	9b08      	ldr	r3, [sp, #32]
 80049de:	b11b      	cbz	r3, 80049e8 <sqrt+0x60>
 80049e0:	f000 fe46 	bl	8005670 <__errno>
 80049e4:	9b08      	ldr	r3, [sp, #32]
 80049e6:	6003      	str	r3, [r0, #0]
 80049e8:	ed9d 0b06 	vldr	d0, [sp, #24]
 80049ec:	b00b      	add	sp, #44	; 0x2c
 80049ee:	ecbd 8b02 	vpop	{d8}
 80049f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80049fc:	ed8d 6b06 	vstr	d6, [sp, #24]
 8004a00:	d1e8      	bne.n	80049d4 <sqrt+0x4c>
 8004a02:	f000 fe35 	bl	8005670 <__errno>
 8004a06:	2321      	movs	r3, #33	; 0x21
 8004a08:	6003      	str	r3, [r0, #0]
 8004a0a:	e7e7      	b.n	80049dc <sqrt+0x54>
 8004a0c:	f3af 8000 	nop.w
	...
 8004a18:	20000328 	.word	0x20000328
 8004a1c:	0800577b 	.word	0x0800577b

08004a20 <__ieee754_rem_pio2>:
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	eeb0 7b40 	vmov.f64	d7, d0
 8004a26:	ee17 5a90 	vmov	r5, s15
 8004a2a:	4b97      	ldr	r3, [pc, #604]	; (8004c88 <__ieee754_rem_pio2+0x268>)
 8004a2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004a30:	429e      	cmp	r6, r3
 8004a32:	b089      	sub	sp, #36	; 0x24
 8004a34:	4604      	mov	r4, r0
 8004a36:	dc07      	bgt.n	8004a48 <__ieee754_rem_pio2+0x28>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	ed84 0b00 	vstr	d0, [r4]
 8004a40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004a44:	2000      	movs	r0, #0
 8004a46:	e01b      	b.n	8004a80 <__ieee754_rem_pio2+0x60>
 8004a48:	4b90      	ldr	r3, [pc, #576]	; (8004c8c <__ieee754_rem_pio2+0x26c>)
 8004a4a:	429e      	cmp	r6, r3
 8004a4c:	dc3b      	bgt.n	8004ac6 <__ieee754_rem_pio2+0xa6>
 8004a4e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8004c48 <__ieee754_rem_pio2+0x228>
 8004a58:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8004a5c:	dd19      	ble.n	8004a92 <__ieee754_rem_pio2+0x72>
 8004a5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8004a62:	429e      	cmp	r6, r3
 8004a64:	d00e      	beq.n	8004a84 <__ieee754_rem_pio2+0x64>
 8004a66:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8004c50 <__ieee754_rem_pio2+0x230>
 8004a6a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8004a6e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004a72:	ed84 5b00 	vstr	d5, [r4]
 8004a76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a7a:	ed84 7b02 	vstr	d7, [r4, #8]
 8004a7e:	2001      	movs	r0, #1
 8004a80:	b009      	add	sp, #36	; 0x24
 8004a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a84:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8004c58 <__ieee754_rem_pio2+0x238>
 8004a88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a8c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8004c60 <__ieee754_rem_pio2+0x240>
 8004a90:	e7eb      	b.n	8004a6a <__ieee754_rem_pio2+0x4a>
 8004a92:	429e      	cmp	r6, r3
 8004a94:	ee30 7b06 	vadd.f64	d7, d0, d6
 8004a98:	d00e      	beq.n	8004ab8 <__ieee754_rem_pio2+0x98>
 8004a9a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8004c50 <__ieee754_rem_pio2+0x230>
 8004a9e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8004aa2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004aa6:	ed84 5b00 	vstr	d5, [r4]
 8004aaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004aae:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab2:	ed84 7b02 	vstr	d7, [r4, #8]
 8004ab6:	e7e3      	b.n	8004a80 <__ieee754_rem_pio2+0x60>
 8004ab8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8004c58 <__ieee754_rem_pio2+0x238>
 8004abc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ac0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8004c60 <__ieee754_rem_pio2+0x240>
 8004ac4:	e7eb      	b.n	8004a9e <__ieee754_rem_pio2+0x7e>
 8004ac6:	4b72      	ldr	r3, [pc, #456]	; (8004c90 <__ieee754_rem_pio2+0x270>)
 8004ac8:	429e      	cmp	r6, r3
 8004aca:	dc6e      	bgt.n	8004baa <__ieee754_rem_pio2+0x18a>
 8004acc:	f000 fcc0 	bl	8005450 <fabs>
 8004ad0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8004ad4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8004c68 <__ieee754_rem_pio2+0x248>
 8004ad8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8004adc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004ae0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004ae4:	ee17 0a90 	vmov	r0, s15
 8004ae8:	eeb1 5b44 	vneg.f64	d5, d4
 8004aec:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8004c48 <__ieee754_rem_pio2+0x228>
 8004af0:	eea5 0b07 	vfma.f64	d0, d5, d7
 8004af4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8004c50 <__ieee754_rem_pio2+0x230>
 8004af8:	281f      	cmp	r0, #31
 8004afa:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004afe:	ee30 6b47 	vsub.f64	d6, d0, d7
 8004b02:	dc1b      	bgt.n	8004b3c <__ieee754_rem_pio2+0x11c>
 8004b04:	1e42      	subs	r2, r0, #1
 8004b06:	4b63      	ldr	r3, [pc, #396]	; (8004c94 <__ieee754_rem_pio2+0x274>)
 8004b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0c:	429e      	cmp	r6, r3
 8004b0e:	d015      	beq.n	8004b3c <__ieee754_rem_pio2+0x11c>
 8004b10:	ed84 6b00 	vstr	d6, [r4]
 8004b14:	ed94 6b00 	vldr	d6, [r4]
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8004b1e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8004b22:	ed84 7b02 	vstr	d7, [r4, #8]
 8004b26:	daab      	bge.n	8004a80 <__ieee754_rem_pio2+0x60>
 8004b28:	eeb1 6b46 	vneg.f64	d6, d6
 8004b2c:	ed84 6b00 	vstr	d6, [r4]
 8004b30:	eeb1 7b47 	vneg.f64	d7, d7
 8004b34:	4240      	negs	r0, r0
 8004b36:	ed84 7b02 	vstr	d7, [r4, #8]
 8004b3a:	e7a1      	b.n	8004a80 <__ieee754_rem_pio2+0x60>
 8004b3c:	ee16 3a90 	vmov	r3, s13
 8004b40:	1536      	asrs	r6, r6, #20
 8004b42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8004b46:	1af3      	subs	r3, r6, r3
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	ed84 6b00 	vstr	d6, [r4]
 8004b4e:	dde1      	ble.n	8004b14 <__ieee754_rem_pio2+0xf4>
 8004b50:	eeb0 6b40 	vmov.f64	d6, d0
 8004b54:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8004c58 <__ieee754_rem_pio2+0x238>
 8004b58:	eea5 6b03 	vfma.f64	d6, d5, d3
 8004b5c:	ee30 7b46 	vsub.f64	d7, d0, d6
 8004b60:	eea5 7b03 	vfma.f64	d7, d5, d3
 8004b64:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8004c60 <__ieee754_rem_pio2+0x240>
 8004b68:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8004b6c:	ee36 3b47 	vsub.f64	d3, d6, d7
 8004b70:	ee13 3a90 	vmov	r3, s7
 8004b74:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8004b78:	1af6      	subs	r6, r6, r3
 8004b7a:	2e31      	cmp	r6, #49	; 0x31
 8004b7c:	ed84 3b00 	vstr	d3, [r4]
 8004b80:	dd10      	ble.n	8004ba4 <__ieee754_rem_pio2+0x184>
 8004b82:	eeb0 0b46 	vmov.f64	d0, d6
 8004b86:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8004c70 <__ieee754_rem_pio2+0x250>
 8004b8a:	eea5 0b03 	vfma.f64	d0, d5, d3
 8004b8e:	ee36 7b40 	vsub.f64	d7, d6, d0
 8004b92:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8004c78 <__ieee754_rem_pio2+0x258>
 8004b96:	eea5 7b03 	vfma.f64	d7, d5, d3
 8004b9a:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8004b9e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8004ba2:	e7b5      	b.n	8004b10 <__ieee754_rem_pio2+0xf0>
 8004ba4:	eeb0 0b46 	vmov.f64	d0, d6
 8004ba8:	e7b4      	b.n	8004b14 <__ieee754_rem_pio2+0xf4>
 8004baa:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <__ieee754_rem_pio2+0x278>)
 8004bac:	429e      	cmp	r6, r3
 8004bae:	dd06      	ble.n	8004bbe <__ieee754_rem_pio2+0x19e>
 8004bb0:	ee30 7b40 	vsub.f64	d7, d0, d0
 8004bb4:	ed80 7b02 	vstr	d7, [r0, #8]
 8004bb8:	ed80 7b00 	vstr	d7, [r0]
 8004bbc:	e742      	b.n	8004a44 <__ieee754_rem_pio2+0x24>
 8004bbe:	ee10 3a10 	vmov	r3, s0
 8004bc2:	1532      	asrs	r2, r6, #20
 8004bc4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8004bc8:	4618      	mov	r0, r3
 8004bca:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8004bce:	ec41 0b17 	vmov	d7, r0, r1
 8004bd2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8004bd6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004c80 <__ieee754_rem_pio2+0x260>
 8004bda:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8004bde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004be2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004be6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004bea:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8004bee:	a908      	add	r1, sp, #32
 8004bf0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8004bf4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bf8:	ed8d 6b04 	vstr	d6, [sp, #16]
 8004bfc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004c00:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004c04:	2303      	movs	r3, #3
 8004c06:	ed31 7b02 	vldmdb	r1!, {d7}
 8004c0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	f103 30ff 	add.w	r0, r3, #4294967295
 8004c16:	d013      	beq.n	8004c40 <__ieee754_rem_pio2+0x220>
 8004c18:	4920      	ldr	r1, [pc, #128]	; (8004c9c <__ieee754_rem_pio2+0x27c>)
 8004c1a:	9101      	str	r1, [sp, #4]
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	9100      	str	r1, [sp, #0]
 8004c20:	a802      	add	r0, sp, #8
 8004c22:	4621      	mov	r1, r4
 8004c24:	f000 f948 	bl	8004eb8 <__kernel_rem_pio2>
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	f6bf af29 	bge.w	8004a80 <__ieee754_rem_pio2+0x60>
 8004c2e:	ed94 7b00 	vldr	d7, [r4]
 8004c32:	eeb1 7b47 	vneg.f64	d7, d7
 8004c36:	ed84 7b00 	vstr	d7, [r4]
 8004c3a:	ed94 7b02 	vldr	d7, [r4, #8]
 8004c3e:	e777      	b.n	8004b30 <__ieee754_rem_pio2+0x110>
 8004c40:	4603      	mov	r3, r0
 8004c42:	e7e0      	b.n	8004c06 <__ieee754_rem_pio2+0x1e6>
 8004c44:	f3af 8000 	nop.w
 8004c48:	54400000 	.word	0x54400000
 8004c4c:	3ff921fb 	.word	0x3ff921fb
 8004c50:	1a626331 	.word	0x1a626331
 8004c54:	3dd0b461 	.word	0x3dd0b461
 8004c58:	1a600000 	.word	0x1a600000
 8004c5c:	3dd0b461 	.word	0x3dd0b461
 8004c60:	2e037073 	.word	0x2e037073
 8004c64:	3ba3198a 	.word	0x3ba3198a
 8004c68:	6dc9c883 	.word	0x6dc9c883
 8004c6c:	3fe45f30 	.word	0x3fe45f30
 8004c70:	2e000000 	.word	0x2e000000
 8004c74:	3ba3198a 	.word	0x3ba3198a
 8004c78:	252049c1 	.word	0x252049c1
 8004c7c:	397b839a 	.word	0x397b839a
 8004c80:	00000000 	.word	0x00000000
 8004c84:	41700000 	.word	0x41700000
 8004c88:	3fe921fb 	.word	0x3fe921fb
 8004c8c:	4002d97b 	.word	0x4002d97b
 8004c90:	413921fb 	.word	0x413921fb
 8004c94:	08005780 	.word	0x08005780
 8004c98:	7fefffff 	.word	0x7fefffff
 8004c9c:	08005800 	.word	0x08005800

08004ca0 <__ieee754_sqrt>:
 8004ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca4:	ee10 3a90 	vmov	r3, s1
 8004ca8:	4c4b      	ldr	r4, [pc, #300]	; (8004dd8 <__ieee754_sqrt+0x138>)
 8004caa:	439c      	bics	r4, r3
 8004cac:	ee10 0a10 	vmov	r0, s0
 8004cb0:	ee10 2a90 	vmov	r2, s1
 8004cb4:	ee10 1a10 	vmov	r1, s0
 8004cb8:	d103      	bne.n	8004cc2 <__ieee754_sqrt+0x22>
 8004cba:	eea0 0b00 	vfma.f64	d0, d0, d0
 8004cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	dc0a      	bgt.n	8004cdc <__ieee754_sqrt+0x3c>
 8004cc6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004cca:	4320      	orrs	r0, r4
 8004ccc:	d079      	beq.n	8004dc2 <__ieee754_sqrt+0x122>
 8004cce:	b12b      	cbz	r3, 8004cdc <__ieee754_sqrt+0x3c>
 8004cd0:	ee30 7b40 	vsub.f64	d7, d0, d0
 8004cd4:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	151b      	asrs	r3, r3, #20
 8004cde:	d10c      	bne.n	8004cfa <__ieee754_sqrt+0x5a>
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d070      	beq.n	8004dc6 <__ieee754_sqrt+0x126>
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	02d5      	lsls	r5, r2, #11
 8004ce8:	d571      	bpl.n	8004dce <__ieee754_sqrt+0x12e>
 8004cea:	1e44      	subs	r4, r0, #1
 8004cec:	1b1b      	subs	r3, r3, r4
 8004cee:	f1c0 0420 	rsb	r4, r0, #32
 8004cf2:	fa21 f404 	lsr.w	r4, r1, r4
 8004cf6:	4322      	orrs	r2, r4
 8004cf8:	4081      	lsls	r1, r0
 8004cfa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004cfe:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004d02:	07dc      	lsls	r4, r3, #31
 8004d04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d08:	bf42      	ittt	mi
 8004d0a:	0052      	lslmi	r2, r2, #1
 8004d0c:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8004d10:	0049      	lslmi	r1, r1, #1
 8004d12:	105c      	asrs	r4, r3, #1
 8004d14:	2500      	movs	r5, #0
 8004d16:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8004d1a:	441a      	add	r2, r3
 8004d1c:	0049      	lsls	r1, r1, #1
 8004d1e:	2316      	movs	r3, #22
 8004d20:	4628      	mov	r0, r5
 8004d22:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004d26:	1987      	adds	r7, r0, r6
 8004d28:	4297      	cmp	r7, r2
 8004d2a:	bfde      	ittt	le
 8004d2c:	1bd2      	suble	r2, r2, r7
 8004d2e:	19b8      	addle	r0, r7, r6
 8004d30:	19ad      	addle	r5, r5, r6
 8004d32:	0052      	lsls	r2, r2, #1
 8004d34:	3b01      	subs	r3, #1
 8004d36:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004d3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004d42:	d1f0      	bne.n	8004d26 <__ieee754_sqrt+0x86>
 8004d44:	f04f 0e20 	mov.w	lr, #32
 8004d48:	469c      	mov	ip, r3
 8004d4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004d4e:	4282      	cmp	r2, r0
 8004d50:	eb06 070c 	add.w	r7, r6, ip
 8004d54:	dc02      	bgt.n	8004d5c <__ieee754_sqrt+0xbc>
 8004d56:	d112      	bne.n	8004d7e <__ieee754_sqrt+0xde>
 8004d58:	428f      	cmp	r7, r1
 8004d5a:	d810      	bhi.n	8004d7e <__ieee754_sqrt+0xde>
 8004d5c:	2f00      	cmp	r7, #0
 8004d5e:	eb07 0c06 	add.w	ip, r7, r6
 8004d62:	da37      	bge.n	8004dd4 <__ieee754_sqrt+0x134>
 8004d64:	f1bc 0f00 	cmp.w	ip, #0
 8004d68:	db34      	blt.n	8004dd4 <__ieee754_sqrt+0x134>
 8004d6a:	f100 0801 	add.w	r8, r0, #1
 8004d6e:	1a12      	subs	r2, r2, r0
 8004d70:	428f      	cmp	r7, r1
 8004d72:	bf88      	it	hi
 8004d74:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004d78:	1bc9      	subs	r1, r1, r7
 8004d7a:	4433      	add	r3, r6
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8004d82:	f1be 0e01 	subs.w	lr, lr, #1
 8004d86:	443a      	add	r2, r7
 8004d88:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004d8c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d90:	d1dd      	bne.n	8004d4e <__ieee754_sqrt+0xae>
 8004d92:	430a      	orrs	r2, r1
 8004d94:	d006      	beq.n	8004da4 <__ieee754_sqrt+0x104>
 8004d96:	1c58      	adds	r0, r3, #1
 8004d98:	bf13      	iteet	ne
 8004d9a:	3301      	addne	r3, #1
 8004d9c:	3501      	addeq	r5, #1
 8004d9e:	4673      	moveq	r3, lr
 8004da0:	f023 0301 	bicne.w	r3, r3, #1
 8004da4:	106a      	asrs	r2, r5, #1
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	07e9      	lsls	r1, r5, #31
 8004daa:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004dae:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004db2:	bf48      	it	mi
 8004db4:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004db8:	eb02 5104 	add.w	r1, r2, r4, lsl #20
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	ec41 0b10 	vmov	d0, r0, r1
 8004dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc6:	0aca      	lsrs	r2, r1, #11
 8004dc8:	3b15      	subs	r3, #21
 8004dca:	0549      	lsls	r1, r1, #21
 8004dcc:	e788      	b.n	8004ce0 <__ieee754_sqrt+0x40>
 8004dce:	0052      	lsls	r2, r2, #1
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	e788      	b.n	8004ce6 <__ieee754_sqrt+0x46>
 8004dd4:	4680      	mov	r8, r0
 8004dd6:	e7ca      	b.n	8004d6e <__ieee754_sqrt+0xce>
 8004dd8:	7ff00000 	.word	0x7ff00000
 8004ddc:	00000000 	.word	0x00000000

08004de0 <__kernel_cos>:
 8004de0:	ee10 1a90 	vmov	r1, s1
 8004de4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8004de8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004dec:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8004df0:	da05      	bge.n	8004dfe <__kernel_cos+0x1e>
 8004df2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8004df6:	ee17 3a90 	vmov	r3, s15
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d03d      	beq.n	8004e7a <__kernel_cos+0x9a>
 8004dfe:	ee20 6b00 	vmul.f64	d6, d0, d0
 8004e02:	ee20 1b01 	vmul.f64	d1, d0, d1
 8004e06:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8004e80 <__kernel_cos+0xa0>
 8004e0a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004e0e:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8004e88 <__kernel_cos+0xa8>
 8004e12:	eea6 4b07 	vfma.f64	d4, d6, d7
 8004e16:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8004e90 <__kernel_cos+0xb0>
 8004e1a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8004e1e:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8004e98 <__kernel_cos+0xb8>
 8004e22:	eea6 4b07 	vfma.f64	d4, d6, d7
 8004e26:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8004ea0 <__kernel_cos+0xc0>
 8004e2a:	4b21      	ldr	r3, [pc, #132]	; (8004eb0 <__kernel_cos+0xd0>)
 8004e2c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8004e30:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8004ea8 <__kernel_cos+0xc8>
 8004e34:	4299      	cmp	r1, r3
 8004e36:	eea6 4b07 	vfma.f64	d4, d6, d7
 8004e3a:	ee24 4b06 	vmul.f64	d4, d4, d6
 8004e3e:	dc06      	bgt.n	8004e4e <__kernel_cos+0x6e>
 8004e40:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8004e44:	ee96 1b03 	vfnms.f64	d1, d6, d3
 8004e48:	ee35 0b41 	vsub.f64	d0, d5, d1
 8004e4c:	4770      	bx	lr
 8004e4e:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <__kernel_cos+0xd4>)
 8004e50:	4299      	cmp	r1, r3
 8004e52:	dc0f      	bgt.n	8004e74 <__kernel_cos+0x94>
 8004e54:	2200      	movs	r2, #0
 8004e56:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8004e5a:	ec43 2b17 	vmov	d7, r2, r3
 8004e5e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e62:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8004e66:	ee96 7b03 	vfnms.f64	d7, d6, d3
 8004e6a:	ee37 0b41 	vsub.f64	d0, d7, d1
 8004e6e:	ee35 0b40 	vsub.f64	d0, d5, d0
 8004e72:	4770      	bx	lr
 8004e74:	eeb5 7b02 	vmov.f64	d7, #82	; 0x3e900000  0.2812500
 8004e78:	e7f1      	b.n	8004e5e <__kernel_cos+0x7e>
 8004e7a:	eeb0 0b45 	vmov.f64	d0, d5
 8004e7e:	4770      	bx	lr
 8004e80:	be8838d4 	.word	0xbe8838d4
 8004e84:	bda8fae9 	.word	0xbda8fae9
 8004e88:	bdb4b1c4 	.word	0xbdb4b1c4
 8004e8c:	3e21ee9e 	.word	0x3e21ee9e
 8004e90:	809c52ad 	.word	0x809c52ad
 8004e94:	be927e4f 	.word	0xbe927e4f
 8004e98:	19cb1590 	.word	0x19cb1590
 8004e9c:	3efa01a0 	.word	0x3efa01a0
 8004ea0:	16c15177 	.word	0x16c15177
 8004ea4:	bf56c16c 	.word	0xbf56c16c
 8004ea8:	5555554c 	.word	0x5555554c
 8004eac:	3fa55555 	.word	0x3fa55555
 8004eb0:	3fd33332 	.word	0x3fd33332
 8004eb4:	3fe90000 	.word	0x3fe90000

08004eb8 <__kernel_rem_pio2>:
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	ed2d 8b06 	vpush	{d8-d10}
 8004ec0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8004ec4:	468b      	mov	fp, r1
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004eca:	4bcf      	ldr	r3, [pc, #828]	; (8005208 <__kernel_rem_pio2+0x350>)
 8004ecc:	9002      	str	r0, [sp, #8]
 8004ece:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8004ed2:	9b01      	ldr	r3, [sp, #4]
 8004ed4:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	1ed0      	subs	r0, r2, #3
 8004eda:	2518      	movs	r5, #24
 8004edc:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 80051f0 <__kernel_rem_pio2+0x338>
 8004ee0:	fb90 f0f5 	sdiv	r0, r0, r5
 8004ee4:	f06f 0517 	mvn.w	r5, #23
 8004ee8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004eec:	fb00 5505 	mla	r5, r0, r5, r5
 8004ef0:	1ac7      	subs	r7, r0, r3
 8004ef2:	4415      	add	r5, r2
 8004ef4:	eb0a 0e03 	add.w	lr, sl, r3
 8004ef8:	ae1a      	add	r6, sp, #104	; 0x68
 8004efa:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 8004efe:	2200      	movs	r2, #0
 8004f00:	4572      	cmp	r2, lr
 8004f02:	dd0f      	ble.n	8004f24 <__kernel_rem_pio2+0x6c>
 8004f04:	f50d 7ed4 	add.w	lr, sp, #424	; 0x1a8
 8004f08:	2600      	movs	r6, #0
 8004f0a:	4556      	cmp	r6, sl
 8004f0c:	dc27      	bgt.n	8004f5e <__kernel_rem_pio2+0xa6>
 8004f0e:	9a01      	ldr	r2, [sp, #4]
 8004f10:	9f02      	ldr	r7, [sp, #8]
 8004f12:	4432      	add	r2, r6
 8004f14:	a91a      	add	r1, sp, #104	; 0x68
 8004f16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8004f1a:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 80051f0 <__kernel_rem_pio2+0x338>
 8004f1e:	f04f 0c00 	mov.w	ip, #0
 8004f22:	e016      	b.n	8004f52 <__kernel_rem_pio2+0x9a>
 8004f24:	42d7      	cmn	r7, r2
 8004f26:	d409      	bmi.n	8004f3c <__kernel_rem_pio2+0x84>
 8004f28:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8004f2c:	ee07 1a90 	vmov	s15, r1
 8004f30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f34:	eca6 7b02 	vstmia	r6!, {d7}
 8004f38:	3201      	adds	r2, #1
 8004f3a:	e7e1      	b.n	8004f00 <__kernel_rem_pio2+0x48>
 8004f3c:	eeb0 7b46 	vmov.f64	d7, d6
 8004f40:	e7f8      	b.n	8004f34 <__kernel_rem_pio2+0x7c>
 8004f42:	ecb7 5b02 	vldmia	r7!, {d5}
 8004f46:	ed32 6b02 	vldmdb	r2!, {d6}
 8004f4a:	f10c 0c01 	add.w	ip, ip, #1
 8004f4e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004f52:	459c      	cmp	ip, r3
 8004f54:	ddf5      	ble.n	8004f42 <__kernel_rem_pio2+0x8a>
 8004f56:	ecae 7b02 	vstmia	lr!, {d7}
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d5      	b.n	8004f0a <__kernel_rem_pio2+0x52>
 8004f5e:	aa06      	add	r2, sp, #24
 8004f60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004f64:	ed9f 9ba4 	vldr	d9, [pc, #656]	; 80051f8 <__kernel_rem_pio2+0x340>
 8004f68:	ed9f aba5 	vldr	d10, [pc, #660]	; 8005200 <__kernel_rem_pio2+0x348>
 8004f6c:	9204      	str	r2, [sp, #16]
 8004f6e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8004f72:	9203      	str	r2, [sp, #12]
 8004f74:	4657      	mov	r7, sl
 8004f76:	aa92      	add	r2, sp, #584	; 0x248
 8004f78:	f107 5800 	add.w	r8, r7, #536870912	; 0x20000000
 8004f7c:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8004f80:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f84:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8004f88:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004f8c:	aa92      	add	r2, sp, #584	; 0x248
 8004f8e:	eb02 0008 	add.w	r0, r2, r8
 8004f92:	3898      	subs	r0, #152	; 0x98
 8004f94:	2200      	movs	r2, #0
 8004f96:	1abc      	subs	r4, r7, r2
 8004f98:	2c00      	cmp	r4, #0
 8004f9a:	dc4c      	bgt.n	8005036 <__kernel_rem_pio2+0x17e>
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	9305      	str	r3, [sp, #20]
 8004fa0:	f000 fada 	bl	8005558 <scalbn>
 8004fa4:	eeb0 8b40 	vmov.f64	d8, d0
 8004fa8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8004fac:	ee28 0b00 	vmul.f64	d0, d8, d0
 8004fb0:	f000 fa56 	bl	8005460 <floor>
 8004fb4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8004fb8:	eea0 8b47 	vfms.f64	d8, d0, d7
 8004fbc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	ee17 9a90 	vmov	r9, s15
 8004fc6:	9b05      	ldr	r3, [sp, #20]
 8004fc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004fcc:	ee38 8b47 	vsub.f64	d8, d8, d7
 8004fd0:	dd46      	ble.n	8005060 <__kernel_rem_pio2+0x1a8>
 8004fd2:	1e78      	subs	r0, r7, #1
 8004fd4:	aa06      	add	r2, sp, #24
 8004fd6:	f1c5 0418 	rsb	r4, r5, #24
 8004fda:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8004fde:	fa46 f204 	asr.w	r2, r6, r4
 8004fe2:	4491      	add	r9, r2
 8004fe4:	40a2      	lsls	r2, r4
 8004fe6:	1ab6      	subs	r6, r6, r2
 8004fe8:	aa06      	add	r2, sp, #24
 8004fea:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8004fee:	f1c5 0217 	rsb	r2, r5, #23
 8004ff2:	4116      	asrs	r6, r2
 8004ff4:	2e00      	cmp	r6, #0
 8004ff6:	dd42      	ble.n	800507e <__kernel_rem_pio2+0x1c6>
 8004ff8:	2400      	movs	r4, #0
 8004ffa:	f109 0901 	add.w	r9, r9, #1
 8004ffe:	4620      	mov	r0, r4
 8005000:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8005004:	42a7      	cmp	r7, r4
 8005006:	dc75      	bgt.n	80050f4 <__kernel_rem_pio2+0x23c>
 8005008:	2d00      	cmp	r5, #0
 800500a:	dd05      	ble.n	8005018 <__kernel_rem_pio2+0x160>
 800500c:	2d01      	cmp	r5, #1
 800500e:	f000 8086 	beq.w	800511e <__kernel_rem_pio2+0x266>
 8005012:	2d02      	cmp	r5, #2
 8005014:	f000 808d 	beq.w	8005132 <__kernel_rem_pio2+0x27a>
 8005018:	2e02      	cmp	r6, #2
 800501a:	d130      	bne.n	800507e <__kernel_rem_pio2+0x1c6>
 800501c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005020:	ee30 8b48 	vsub.f64	d8, d0, d8
 8005024:	b358      	cbz	r0, 800507e <__kernel_rem_pio2+0x1c6>
 8005026:	4628      	mov	r0, r5
 8005028:	9305      	str	r3, [sp, #20]
 800502a:	f000 fa95 	bl	8005558 <scalbn>
 800502e:	9b05      	ldr	r3, [sp, #20]
 8005030:	ee38 8b40 	vsub.f64	d8, d8, d0
 8005034:	e023      	b.n	800507e <__kernel_rem_pio2+0x1c6>
 8005036:	ee20 7b09 	vmul.f64	d7, d0, d9
 800503a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800503e:	ac06      	add	r4, sp, #24
 8005040:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8005044:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8005048:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800504c:	ee10 1a10 	vmov	r1, s0
 8005050:	ed30 0b02 	vldmdb	r0!, {d0}
 8005054:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8005058:	ee37 0b00 	vadd.f64	d0, d7, d0
 800505c:	3201      	adds	r2, #1
 800505e:	e79a      	b.n	8004f96 <__kernel_rem_pio2+0xde>
 8005060:	d105      	bne.n	800506e <__kernel_rem_pio2+0x1b6>
 8005062:	1e7a      	subs	r2, r7, #1
 8005064:	a906      	add	r1, sp, #24
 8005066:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800506a:	15f6      	asrs	r6, r6, #23
 800506c:	e7c2      	b.n	8004ff4 <__kernel_rem_pio2+0x13c>
 800506e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005072:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507a:	da39      	bge.n	80050f0 <__kernel_rem_pio2+0x238>
 800507c:	2600      	movs	r6, #0
 800507e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	f040 808e 	bne.w	80051a6 <__kernel_rem_pio2+0x2ee>
 800508a:	1e7c      	subs	r4, r7, #1
 800508c:	4620      	mov	r0, r4
 800508e:	2200      	movs	r2, #0
 8005090:	4550      	cmp	r0, sl
 8005092:	da55      	bge.n	8005140 <__kernel_rem_pio2+0x288>
 8005094:	2a00      	cmp	r2, #0
 8005096:	d164      	bne.n	8005162 <__kernel_rem_pio2+0x2aa>
 8005098:	2401      	movs	r4, #1
 800509a:	f06f 0003 	mvn.w	r0, #3
 800509e:	fb00 f204 	mul.w	r2, r0, r4
 80050a2:	9904      	ldr	r1, [sp, #16]
 80050a4:	588a      	ldr	r2, [r1, r2]
 80050a6:	2a00      	cmp	r2, #0
 80050a8:	d050      	beq.n	800514c <__kernel_rem_pio2+0x294>
 80050aa:	aa92      	add	r2, sp, #584	; 0x248
 80050ac:	4490      	add	r8, r2
 80050ae:	9a01      	ldr	r2, [sp, #4]
 80050b0:	a91a      	add	r1, sp, #104	; 0x68
 80050b2:	443a      	add	r2, r7
 80050b4:	1c78      	adds	r0, r7, #1
 80050b6:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
 80050ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80050be:	4427      	add	r7, r4
 80050c0:	42b8      	cmp	r0, r7
 80050c2:	f73f af58 	bgt.w	8004f76 <__kernel_rem_pio2+0xbe>
 80050c6:	9903      	ldr	r1, [sp, #12]
 80050c8:	9e02      	ldr	r6, [sp, #8]
 80050ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80050ce:	9105      	str	r1, [sp, #20]
 80050d0:	ee07 1a90 	vmov	s15, r1
 80050d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80050d8:	2400      	movs	r4, #0
 80050da:	eca2 7b02 	vstmia	r2!, {d7}
 80050de:	ed9f 7b44 	vldr	d7, [pc, #272]	; 80051f0 <__kernel_rem_pio2+0x338>
 80050e2:	4696      	mov	lr, r2
 80050e4:	429c      	cmp	r4, r3
 80050e6:	dd33      	ble.n	8005150 <__kernel_rem_pio2+0x298>
 80050e8:	eca8 7b02 	vstmia	r8!, {d7}
 80050ec:	3001      	adds	r0, #1
 80050ee:	e7e7      	b.n	80050c0 <__kernel_rem_pio2+0x208>
 80050f0:	2602      	movs	r6, #2
 80050f2:	e781      	b.n	8004ff8 <__kernel_rem_pio2+0x140>
 80050f4:	aa06      	add	r2, sp, #24
 80050f6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80050fa:	b948      	cbnz	r0, 8005110 <__kernel_rem_pio2+0x258>
 80050fc:	b12a      	cbz	r2, 800510a <__kernel_rem_pio2+0x252>
 80050fe:	a906      	add	r1, sp, #24
 8005100:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8005104:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8005108:	2201      	movs	r2, #1
 800510a:	3401      	adds	r4, #1
 800510c:	4610      	mov	r0, r2
 800510e:	e779      	b.n	8005004 <__kernel_rem_pio2+0x14c>
 8005110:	a906      	add	r1, sp, #24
 8005112:	ebae 0202 	sub.w	r2, lr, r2
 8005116:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800511a:	4602      	mov	r2, r0
 800511c:	e7f5      	b.n	800510a <__kernel_rem_pio2+0x252>
 800511e:	1e7c      	subs	r4, r7, #1
 8005120:	aa06      	add	r2, sp, #24
 8005122:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8005126:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800512a:	a906      	add	r1, sp, #24
 800512c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8005130:	e772      	b.n	8005018 <__kernel_rem_pio2+0x160>
 8005132:	1e7c      	subs	r4, r7, #1
 8005134:	aa06      	add	r2, sp, #24
 8005136:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800513a:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800513e:	e7f4      	b.n	800512a <__kernel_rem_pio2+0x272>
 8005140:	a906      	add	r1, sp, #24
 8005142:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005146:	3801      	subs	r0, #1
 8005148:	430a      	orrs	r2, r1
 800514a:	e7a1      	b.n	8005090 <__kernel_rem_pio2+0x1d8>
 800514c:	3401      	adds	r4, #1
 800514e:	e7a6      	b.n	800509e <__kernel_rem_pio2+0x1e6>
 8005150:	ecb6 5b02 	vldmia	r6!, {d5}
 8005154:	ed3e 6b02 	vldmdb	lr!, {d6}
 8005158:	3401      	adds	r4, #1
 800515a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800515e:	e7c1      	b.n	80050e4 <__kernel_rem_pio2+0x22c>
 8005160:	3c01      	subs	r4, #1
 8005162:	ab06      	add	r3, sp, #24
 8005164:	3d18      	subs	r5, #24
 8005166:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f8      	beq.n	8005160 <__kernel_rem_pio2+0x2a8>
 800516e:	4628      	mov	r0, r5
 8005170:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005174:	f000 f9f0 	bl	8005558 <scalbn>
 8005178:	00e3      	lsls	r3, r4, #3
 800517a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80051f8 <__kernel_rem_pio2+0x340>
 800517e:	aa6a      	add	r2, sp, #424	; 0x1a8
 8005180:	3308      	adds	r3, #8
 8005182:	18d0      	adds	r0, r2, r3
 8005184:	4622      	mov	r2, r4
 8005186:	2a00      	cmp	r2, #0
 8005188:	da4b      	bge.n	8005222 <__kernel_rem_pio2+0x36a>
 800518a:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800518e:	2200      	movs	r2, #0
 8005190:	4677      	mov	r7, lr
 8005192:	1aa5      	subs	r5, r4, r2
 8005194:	d464      	bmi.n	8005260 <__kernel_rem_pio2+0x3a8>
 8005196:	a86a      	add	r0, sp, #424	; 0x1a8
 8005198:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800519c:	491b      	ldr	r1, [pc, #108]	; (800520c <__kernel_rem_pio2+0x354>)
 800519e:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80051f0 <__kernel_rem_pio2+0x338>
 80051a2:	2000      	movs	r0, #0
 80051a4:	e054      	b.n	8005250 <__kernel_rem_pio2+0x398>
 80051a6:	4268      	negs	r0, r5
 80051a8:	eeb0 0b48 	vmov.f64	d0, d8
 80051ac:	f000 f9d4 	bl	8005558 <scalbn>
 80051b0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8005200 <__kernel_rem_pio2+0x348>
 80051b4:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	db28      	blt.n	8005210 <__kernel_rem_pio2+0x358>
 80051be:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80051f8 <__kernel_rem_pio2+0x340>
 80051c2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80051c6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80051ca:	aa06      	add	r2, sp, #24
 80051cc:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80051d0:	eea5 0b46 	vfms.f64	d0, d5, d6
 80051d4:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80051d8:	1c7c      	adds	r4, r7, #1
 80051da:	ee10 3a10 	vmov	r3, s0
 80051de:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80051e2:	ee17 3a10 	vmov	r3, s14
 80051e6:	3518      	adds	r5, #24
 80051e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80051ec:	e7bf      	b.n	800516e <__kernel_rem_pio2+0x2b6>
 80051ee:	bf00      	nop
	...
 80051fc:	3e700000 	.word	0x3e700000
 8005200:	00000000 	.word	0x00000000
 8005204:	41700000 	.word	0x41700000
 8005208:	08005948 	.word	0x08005948
 800520c:	08005908 	.word	0x08005908
 8005210:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8005214:	aa06      	add	r2, sp, #24
 8005216:	ee10 3a10 	vmov	r3, s0
 800521a:	463c      	mov	r4, r7
 800521c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8005220:	e7a5      	b.n	800516e <__kernel_rem_pio2+0x2b6>
 8005222:	a906      	add	r1, sp, #24
 8005224:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005228:	9101      	str	r1, [sp, #4]
 800522a:	ee07 1a90 	vmov	s15, r1
 800522e:	3a01      	subs	r2, #1
 8005230:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005234:	ee27 7b00 	vmul.f64	d7, d7, d0
 8005238:	ee20 0b06 	vmul.f64	d0, d0, d6
 800523c:	ed20 7b02 	vstmdb	r0!, {d7}
 8005240:	e7a1      	b.n	8005186 <__kernel_rem_pio2+0x2ce>
 8005242:	ecb1 5b02 	vldmia	r1!, {d5}
 8005246:	ecb5 6b02 	vldmia	r5!, {d6}
 800524a:	3001      	adds	r0, #1
 800524c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005250:	4550      	cmp	r0, sl
 8005252:	dc01      	bgt.n	8005258 <__kernel_rem_pio2+0x3a0>
 8005254:	4290      	cmp	r0, r2
 8005256:	ddf4      	ble.n	8005242 <__kernel_rem_pio2+0x38a>
 8005258:	ecae 7b02 	vstmia	lr!, {d7}
 800525c:	3201      	adds	r2, #1
 800525e:	e798      	b.n	8005192 <__kernel_rem_pio2+0x2da>
 8005260:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8005262:	2a03      	cmp	r2, #3
 8005264:	d843      	bhi.n	80052ee <__kernel_rem_pio2+0x436>
 8005266:	e8df f002 	tbb	[pc, r2]
 800526a:	1d37      	.short	0x1d37
 800526c:	021d      	.short	0x021d
 800526e:	aa42      	add	r2, sp, #264	; 0x108
 8005270:	4413      	add	r3, r2
 8005272:	461a      	mov	r2, r3
 8005274:	4620      	mov	r0, r4
 8005276:	2800      	cmp	r0, #0
 8005278:	dc56      	bgt.n	8005328 <__kernel_rem_pio2+0x470>
 800527a:	461a      	mov	r2, r3
 800527c:	4620      	mov	r0, r4
 800527e:	2801      	cmp	r0, #1
 8005280:	dc62      	bgt.n	8005348 <__kernel_rem_pio2+0x490>
 8005282:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8005398 <__kernel_rem_pio2+0x4e0>
 8005286:	2c01      	cmp	r4, #1
 8005288:	dc6e      	bgt.n	8005368 <__kernel_rem_pio2+0x4b0>
 800528a:	2e00      	cmp	r6, #0
 800528c:	d172      	bne.n	8005374 <__kernel_rem_pio2+0x4bc>
 800528e:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 8005292:	e9cb 2300 	strd	r2, r3, [fp]
 8005296:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 800529a:	e9cb 2302 	strd	r2, r3, [fp, #8]
 800529e:	ed8b 7b04 	vstr	d7, [fp, #16]
 80052a2:	e024      	b.n	80052ee <__kernel_rem_pio2+0x436>
 80052a4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8005398 <__kernel_rem_pio2+0x4e0>
 80052a8:	aa42      	add	r2, sp, #264	; 0x108
 80052aa:	4413      	add	r3, r2
 80052ac:	4622      	mov	r2, r4
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	da2b      	bge.n	800530a <__kernel_rem_pio2+0x452>
 80052b2:	b386      	cbz	r6, 8005316 <__kernel_rem_pio2+0x45e>
 80052b4:	eeb1 7b46 	vneg.f64	d7, d6
 80052b8:	ed8b 7b00 	vstr	d7, [fp]
 80052bc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80052c0:	aa44      	add	r2, sp, #272	; 0x110
 80052c2:	2301      	movs	r3, #1
 80052c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052c8:	429c      	cmp	r4, r3
 80052ca:	da27      	bge.n	800531c <__kernel_rem_pio2+0x464>
 80052cc:	b10e      	cbz	r6, 80052d2 <__kernel_rem_pio2+0x41a>
 80052ce:	eeb1 7b47 	vneg.f64	d7, d7
 80052d2:	ed8b 7b02 	vstr	d7, [fp, #8]
 80052d6:	e00a      	b.n	80052ee <__kernel_rem_pio2+0x436>
 80052d8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005398 <__kernel_rem_pio2+0x4e0>
 80052dc:	aa42      	add	r2, sp, #264	; 0x108
 80052de:	4413      	add	r3, r2
 80052e0:	2c00      	cmp	r4, #0
 80052e2:	da0c      	bge.n	80052fe <__kernel_rem_pio2+0x446>
 80052e4:	b10e      	cbz	r6, 80052ea <__kernel_rem_pio2+0x432>
 80052e6:	eeb1 7b47 	vneg.f64	d7, d7
 80052ea:	ed8b 7b00 	vstr	d7, [fp]
 80052ee:	f009 0007 	and.w	r0, r9, #7
 80052f2:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80052f6:	ecbd 8b06 	vpop	{d8-d10}
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	ed33 6b02 	vldmdb	r3!, {d6}
 8005302:	3c01      	subs	r4, #1
 8005304:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005308:	e7ea      	b.n	80052e0 <__kernel_rem_pio2+0x428>
 800530a:	ed33 7b02 	vldmdb	r3!, {d7}
 800530e:	3a01      	subs	r2, #1
 8005310:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005314:	e7cb      	b.n	80052ae <__kernel_rem_pio2+0x3f6>
 8005316:	eeb0 7b46 	vmov.f64	d7, d6
 800531a:	e7cd      	b.n	80052b8 <__kernel_rem_pio2+0x400>
 800531c:	ecb2 6b02 	vldmia	r2!, {d6}
 8005320:	3301      	adds	r3, #1
 8005322:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005326:	e7cf      	b.n	80052c8 <__kernel_rem_pio2+0x410>
 8005328:	ed12 5b02 	vldr	d5, [r2, #-8]
 800532c:	ed12 7b04 	vldr	d7, [r2, #-16]
 8005330:	ee37 6b05 	vadd.f64	d6, d7, d5
 8005334:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005338:	ee37 7b05 	vadd.f64	d7, d7, d5
 800533c:	ed22 7b02 	vstmdb	r2!, {d7}
 8005340:	3801      	subs	r0, #1
 8005342:	ed02 6b02 	vstr	d6, [r2, #-8]
 8005346:	e796      	b.n	8005276 <__kernel_rem_pio2+0x3be>
 8005348:	ed12 5b02 	vldr	d5, [r2, #-8]
 800534c:	ed12 7b04 	vldr	d7, [r2, #-16]
 8005350:	ee37 6b05 	vadd.f64	d6, d7, d5
 8005354:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005358:	ee37 7b05 	vadd.f64	d7, d7, d5
 800535c:	ed22 7b02 	vstmdb	r2!, {d7}
 8005360:	3801      	subs	r0, #1
 8005362:	ed02 6b02 	vstr	d6, [r2, #-8]
 8005366:	e78a      	b.n	800527e <__kernel_rem_pio2+0x3c6>
 8005368:	ed33 6b02 	vldmdb	r3!, {d6}
 800536c:	3c01      	subs	r4, #1
 800536e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005372:	e788      	b.n	8005286 <__kernel_rem_pio2+0x3ce>
 8005374:	ed97 6b00 	vldr	d6, [r7]
 8005378:	eeb1 7b47 	vneg.f64	d7, d7
 800537c:	eeb1 6b46 	vneg.f64	d6, d6
 8005380:	ed8b 6b00 	vstr	d6, [fp]
 8005384:	ed97 6b02 	vldr	d6, [r7, #8]
 8005388:	eeb1 6b46 	vneg.f64	d6, d6
 800538c:	ed8b 6b02 	vstr	d6, [fp, #8]
 8005390:	e785      	b.n	800529e <__kernel_rem_pio2+0x3e6>
 8005392:	bf00      	nop
 8005394:	f3af 8000 	nop.w
	...

080053a0 <__kernel_sin>:
 80053a0:	ee10 3a90 	vmov	r3, s1
 80053a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80053ac:	da04      	bge.n	80053b8 <__kernel_sin+0x18>
 80053ae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80053b2:	ee17 3a90 	vmov	r3, s15
 80053b6:	b35b      	cbz	r3, 8005410 <__kernel_sin+0x70>
 80053b8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80053bc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80053c0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8005418 <__kernel_sin+0x78>
 80053c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005420 <__kernel_sin+0x80>
 80053c8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80053cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005428 <__kernel_sin+0x88>
 80053d0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80053d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005430 <__kernel_sin+0x90>
 80053d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80053dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005438 <__kernel_sin+0x98>
 80053e0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80053e4:	b930      	cbnz	r0, 80053f4 <__kernel_sin+0x54>
 80053e6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005440 <__kernel_sin+0xa0>
 80053ea:	eea6 4b07 	vfma.f64	d4, d6, d7
 80053ee:	eea5 0b04 	vfma.f64	d0, d5, d4
 80053f2:	4770      	bx	lr
 80053f4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80053f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80053fc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8005400:	ee96 1b07 	vfnms.f64	d1, d6, d7
 8005404:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005448 <__kernel_sin+0xa8>
 8005408:	eea5 1b07 	vfma.f64	d1, d5, d7
 800540c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	f3af 8000 	nop.w
 8005418:	5acfd57c 	.word	0x5acfd57c
 800541c:	3de5d93a 	.word	0x3de5d93a
 8005420:	8a2b9ceb 	.word	0x8a2b9ceb
 8005424:	be5ae5e6 	.word	0xbe5ae5e6
 8005428:	57b1fe7d 	.word	0x57b1fe7d
 800542c:	3ec71de3 	.word	0x3ec71de3
 8005430:	19c161d5 	.word	0x19c161d5
 8005434:	bf2a01a0 	.word	0xbf2a01a0
 8005438:	1110f8a6 	.word	0x1110f8a6
 800543c:	3f811111 	.word	0x3f811111
 8005440:	55555549 	.word	0x55555549
 8005444:	bfc55555 	.word	0xbfc55555
 8005448:	55555549 	.word	0x55555549
 800544c:	3fc55555 	.word	0x3fc55555

08005450 <fabs>:
 8005450:	ec53 2b10 	vmov	r2, r3, d0
 8005454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005458:	ec43 2b10 	vmov	d0, r2, r3
 800545c:	4770      	bx	lr
	...

08005460 <floor>:
 8005460:	ee10 1a90 	vmov	r1, s1
 8005464:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005468:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800546c:	2b13      	cmp	r3, #19
 800546e:	b530      	push	{r4, r5, lr}
 8005470:	ee10 0a10 	vmov	r0, s0
 8005474:	ee10 5a10 	vmov	r5, s0
 8005478:	dc33      	bgt.n	80054e2 <floor+0x82>
 800547a:	2b00      	cmp	r3, #0
 800547c:	da17      	bge.n	80054ae <floor+0x4e>
 800547e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8005540 <floor+0xe0>
 8005482:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005486:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	dd09      	ble.n	80054a4 <floor+0x44>
 8005490:	2900      	cmp	r1, #0
 8005492:	da50      	bge.n	8005536 <floor+0xd6>
 8005494:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005498:	432b      	orrs	r3, r5
 800549a:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <floor+0xe8>)
 800549c:	f04f 0000 	mov.w	r0, #0
 80054a0:	bf18      	it	ne
 80054a2:	4619      	movne	r1, r3
 80054a4:	460b      	mov	r3, r1
 80054a6:	4602      	mov	r2, r0
 80054a8:	ec43 2b10 	vmov	d0, r2, r3
 80054ac:	bd30      	pop	{r4, r5, pc}
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <floor+0xec>)
 80054b0:	411a      	asrs	r2, r3
 80054b2:	ea01 0402 	and.w	r4, r1, r2
 80054b6:	432c      	orrs	r4, r5
 80054b8:	d0f8      	beq.n	80054ac <floor+0x4c>
 80054ba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005540 <floor+0xe0>
 80054be:	ee30 0b07 	vadd.f64	d0, d0, d7
 80054c2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80054c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ca:	ddeb      	ble.n	80054a4 <floor+0x44>
 80054cc:	2900      	cmp	r1, #0
 80054ce:	bfbe      	ittt	lt
 80054d0:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80054d4:	fa40 f303 	asrlt.w	r3, r0, r3
 80054d8:	18c9      	addlt	r1, r1, r3
 80054da:	ea21 0102 	bic.w	r1, r1, r2
 80054de:	2000      	movs	r0, #0
 80054e0:	e7e0      	b.n	80054a4 <floor+0x44>
 80054e2:	2b33      	cmp	r3, #51	; 0x33
 80054e4:	dd05      	ble.n	80054f2 <floor+0x92>
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ea:	d1df      	bne.n	80054ac <floor+0x4c>
 80054ec:	ee30 0b00 	vadd.f64	d0, d0, d0
 80054f0:	bd30      	pop	{r4, r5, pc}
 80054f2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	40e2      	lsrs	r2, r4
 80054fc:	4215      	tst	r5, r2
 80054fe:	d0d5      	beq.n	80054ac <floor+0x4c>
 8005500:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8005540 <floor+0xe0>
 8005504:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005508:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800550c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005510:	ddc8      	ble.n	80054a4 <floor+0x44>
 8005512:	2900      	cmp	r1, #0
 8005514:	da02      	bge.n	800551c <floor+0xbc>
 8005516:	2b14      	cmp	r3, #20
 8005518:	d103      	bne.n	8005522 <floor+0xc2>
 800551a:	3101      	adds	r1, #1
 800551c:	ea20 0002 	bic.w	r0, r0, r2
 8005520:	e7c0      	b.n	80054a4 <floor+0x44>
 8005522:	2401      	movs	r4, #1
 8005524:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005528:	fa04 f303 	lsl.w	r3, r4, r3
 800552c:	4418      	add	r0, r3
 800552e:	4285      	cmp	r5, r0
 8005530:	bf88      	it	hi
 8005532:	1909      	addhi	r1, r1, r4
 8005534:	e7f2      	b.n	800551c <floor+0xbc>
 8005536:	2000      	movs	r0, #0
 8005538:	4601      	mov	r1, r0
 800553a:	e7b3      	b.n	80054a4 <floor+0x44>
 800553c:	f3af 8000 	nop.w
 8005540:	8800759c 	.word	0x8800759c
 8005544:	7e37e43c 	.word	0x7e37e43c
 8005548:	bff00000 	.word	0xbff00000
 800554c:	000fffff 	.word	0x000fffff

08005550 <matherr>:
 8005550:	2000      	movs	r0, #0
 8005552:	4770      	bx	lr
 8005554:	0000      	movs	r0, r0
	...

08005558 <scalbn>:
 8005558:	b500      	push	{lr}
 800555a:	ed2d 8b02 	vpush	{d8}
 800555e:	b083      	sub	sp, #12
 8005560:	ed8d 0b00 	vstr	d0, [sp]
 8005564:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8005568:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800556c:	b9a2      	cbnz	r2, 8005598 <scalbn+0x40>
 800556e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005572:	430b      	orrs	r3, r1
 8005574:	d03a      	beq.n	80055ec <scalbn+0x94>
 8005576:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005630 <scalbn+0xd8>
 800557a:	4a35      	ldr	r2, [pc, #212]	; (8005650 <scalbn+0xf8>)
 800557c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8005580:	4290      	cmp	r0, r2
 8005582:	ed8d 7b00 	vstr	d7, [sp]
 8005586:	9b01      	ldr	r3, [sp, #4]
 8005588:	da11      	bge.n	80055ae <scalbn+0x56>
 800558a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8005638 <scalbn+0xe0>
 800558e:	ed9d 6b00 	vldr	d6, [sp]
 8005592:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005596:	e007      	b.n	80055a8 <scalbn+0x50>
 8005598:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800559c:	428a      	cmp	r2, r1
 800559e:	d109      	bne.n	80055b4 <scalbn+0x5c>
 80055a0:	ed9d 7b00 	vldr	d7, [sp]
 80055a4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80055a8:	ed8d 7b00 	vstr	d7, [sp]
 80055ac:	e01e      	b.n	80055ec <scalbn+0x94>
 80055ae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80055b2:	3a36      	subs	r2, #54	; 0x36
 80055b4:	4402      	add	r2, r0
 80055b6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80055ba:	428a      	cmp	r2, r1
 80055bc:	dd0a      	ble.n	80055d4 <scalbn+0x7c>
 80055be:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8005640 <scalbn+0xe8>
 80055c2:	eeb0 0b48 	vmov.f64	d0, d8
 80055c6:	ed9d 1b00 	vldr	d1, [sp]
 80055ca:	f000 f843 	bl	8005654 <copysign>
 80055ce:	ee20 7b08 	vmul.f64	d7, d0, d8
 80055d2:	e7e9      	b.n	80055a8 <scalbn+0x50>
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	dd10      	ble.n	80055fa <scalbn+0xa2>
 80055d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80055e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055e4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80055e8:	e9cd 0100 	strd	r0, r1, [sp]
 80055ec:	ed9d 0b00 	vldr	d0, [sp]
 80055f0:	b003      	add	sp, #12
 80055f2:	ecbd 8b02 	vpop	{d8}
 80055f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80055fa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80055fe:	da06      	bge.n	800560e <scalbn+0xb6>
 8005600:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005604:	4298      	cmp	r0, r3
 8005606:	dcda      	bgt.n	80055be <scalbn+0x66>
 8005608:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8005638 <scalbn+0xe0>
 800560c:	e7d9      	b.n	80055c2 <scalbn+0x6a>
 800560e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005612:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005616:	3236      	adds	r2, #54	; 0x36
 8005618:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800561c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005620:	ec41 0b17 	vmov	d7, r0, r1
 8005624:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8005648 <scalbn+0xf0>
 8005628:	e7b3      	b.n	8005592 <scalbn+0x3a>
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w
 8005630:	00000000 	.word	0x00000000
 8005634:	43500000 	.word	0x43500000
 8005638:	c2f8f359 	.word	0xc2f8f359
 800563c:	01a56e1f 	.word	0x01a56e1f
 8005640:	8800759c 	.word	0x8800759c
 8005644:	7e37e43c 	.word	0x7e37e43c
 8005648:	00000000 	.word	0x00000000
 800564c:	3c900000 	.word	0x3c900000
 8005650:	ffff3cb0 	.word	0xffff3cb0

08005654 <copysign>:
 8005654:	ec53 2b10 	vmov	r2, r3, d0
 8005658:	ee11 0a90 	vmov	r0, s3
 800565c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005660:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005664:	ea41 0300 	orr.w	r3, r1, r0
 8005668:	ec43 2b10 	vmov	d0, r2, r3
 800566c:	4770      	bx	lr
	...

08005670 <__errno>:
 8005670:	4b01      	ldr	r3, [pc, #4]	; (8005678 <__errno+0x8>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	2000032c 	.word	0x2000032c

0800567c <_init>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr

08005688 <_fini>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr
